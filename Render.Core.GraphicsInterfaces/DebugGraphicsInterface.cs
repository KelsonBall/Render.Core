using System;
using System.Text;
using System.Collections.Generic;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;

namespace Render.Core.GraphicsInterface
{
    public class DebugGraphicsInterface : IGraphicsInterface
    {
        private ErrorCode _error = ErrorCode.NoError;

        public class GlCallRecord
        {
            public long Tick { get; set; }
            public string Method { get; set; }
            public (Type type, string name, object value)[] CallParams { get; set; }

            public override string ToString() => $"{Method}";
        }

        public DebugGraphicsInterface(int callRecordLength = 100)
        {
            this.callRecordLength = callRecordLength;
        }

        private readonly Queue<GlCallRecord> _calls = new Queue<GlCallRecord>(1024);
        private readonly int callRecordLength;
        private void EnqueueCallRecord(GlCallRecord record)
        {
            if (_calls.Count > callRecordLength)
                _calls.Dequeue();
            _calls.Enqueue(record);
        }

        public IEnumerable<GlCallRecord> Calls => _calls;

        public void Uniform2(int location, Vector2 vector)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (vector.GetType(), "vector", vector),
                }
            });

            GL.Uniform2(location, vector);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, Vector3 vector)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (vector.GetType(), "vector", vector),
                }
            });

            GL.Uniform3(location, vector);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, Vector4 vector)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (vector.GetType(), "vector", vector),
                }
            });

            GL.Uniform4(location, vector);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, Color4 color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (color.GetType(), "color", color),
                }
            });

            GL.Uniform4(location, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, Quaternion quaternion)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (quaternion.GetType(), "quaternion", quaternion),
                }
            });

            GL.Uniform4(location, quaternion);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public string GetActiveUniformName(int program, int uniformIndex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveUniformName",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformIndex.GetType(), "uniformIndex", uniformIndex),
                }
            });

            var result = GL.GetActiveUniformName(program, uniformIndex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public string GetActiveUniformBlockName(int program, int uniformIndex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveUniformBlockName",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformIndex.GetType(), "uniformIndex", uniformIndex),
                }
            });

            var result = GL.GetActiveUniformBlockName(program, uniformIndex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void ShaderSource(int shader, string @string)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderSource",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                    (@string.GetType(), "@string", @string),
                }
            });

            GL.ShaderSource(shader, @string);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public string GetShaderInfoLog(int shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetShaderInfoLog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                }
            });

            var result = GL.GetShaderInfoLog(shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public string GetProgramInfoLog(int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramInfoLog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            var result = GL.GetProgramInfoLog(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void PointParameter(PointSpriteCoordOriginParameter param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PointParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (param.GetType(), "param", param),
                }
            });

            GL.PointParameter(param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, Vector2 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, Vector3 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, Vector4 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, Vector2d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, Vector3d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, Vector4d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(RectangleF rect)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (rect.GetType(), "rect", rect),
                }
            });

            GL.Rect(rect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(Rectangle rect)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (rect.GetType(), "rect", rect),
                }
            });

            GL.Rect(rect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexPointer(int size, VertexPointerType type, int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.VertexPointer(size, type, stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NormalPointer(NormalPointerType type, int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NormalPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.NormalPointer(type, stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void IndexPointer(IndexPointerType type, int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IndexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.IndexPointer(type, stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorPointer(int size, ColorPointerType type, int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.ColorPointer(size, type, stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FogCoordPointer(FogPointerType type, int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FogCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.FogCoordPointer(type, stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EdgeFlagPointer(int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EdgeFlagPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.EdgeFlagPointer(stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordPointer(int size, TexCoordPointerType type, int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.TexCoordPointer(size, type, stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (offset.GetType(), "offset", offset),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, offset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Viewport(Size size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Viewport",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                }
            });

            GL.Viewport(size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Viewport(Point location, Size size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Viewport",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (size.GetType(), "size", size),
                }
            });

            GL.Viewport(location, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Viewport(Rectangle rectangle)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Viewport",
                CallParams = new(Type type, string name, object value)[]
                {
                    (rectangle.GetType(), "rectangle", rectangle),
                }
            });

            GL.Viewport(rectangle);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (color.GetType(), "color", color),
                }
            });

            GL.TexEnv(target, pname, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color4 color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (color.GetType(), "color", color),
                }
            });

            GL.TexEnv(target, pname, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[] pointer)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,] pointer)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,,] pointer)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexBindingDivisor(int bindingindex, int divisor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexBindingDivisor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (divisor.GetType(), "divisor", divisor),
                }
            });

            GL.VertexBindingDivisor(bindingindex, divisor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexBindingDivisor(uint bindingindex, uint divisor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexBindingDivisor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (divisor.GetType(), "divisor", divisor),
                }
            });

            GL.VertexBindingDivisor(bindingindex, divisor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexP2(PackedPointerType type, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexP2(type, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexP2(PackedPointerType type, uint value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexP2(type, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexP3(PackedPointerType type, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexP3(type, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexP3(PackedPointerType type, uint value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexP3(type, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexP4(PackedPointerType type, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexP4(type, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexP4(PackedPointerType type, uint value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexP4(type, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexPointer<T3>(int size, VertexPointerType type, int stride, T3[] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexPointer<T3>(int size, VertexPointerType type, int stride, T3[,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexPointer<T3>(int size, VertexPointerType type, int stride, T3[,,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Viewport(int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Viewport",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.Viewport(x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ViewportArray(int first, int count, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ViewportArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (v.GetType(), "v", v),
                }
            });

            GL.ViewportArray(first, count, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ViewportArray(uint first, int count, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ViewportArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (v.GetType(), "v", v),
                }
            });

            GL.ViewportArray(first, count, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ViewportIndexed(int index, float x, float y, float w, float h)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ViewportIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (w.GetType(), "w", w),
                    (h.GetType(), "h", h),
                }
            });

            GL.ViewportIndexed(index, x, y, w, h);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ViewportIndexed(uint index, float x, float y, float w, float h)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ViewportIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (w.GetType(), "w", w),
                    (h.GetType(), "h", h),
                }
            });

            GL.ViewportIndexed(index, x, y, w, h);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ViewportIndexed(int index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ViewportIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.ViewportIndexed(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ViewportIndexed(uint index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ViewportIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.ViewportIndexed(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, long timeout)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WaitSync",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sync.GetType(), "sync", sync),
                    (flags.GetType(), "flags", flags),
                    (timeout.GetType(), "timeout", timeout),
                }
            });

            var result = GL.WaitSync(sync, flags, timeout);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, ulong timeout)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WaitSync",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sync.GetType(), "sync", sync),
                    (flags.GetType(), "flags", flags),
                    (timeout.GetType(), "timeout", timeout),
                }
            });

            var result = GL.WaitSync(sync, flags, timeout);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void WindowPos2(double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.WindowPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos2(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos2(float x, float y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.WindowPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos2(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos2(int x, int y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.WindowPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos2(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos2(short x, short y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.WindowPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos2(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.WindowPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.WindowPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(int x, int y, int z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.WindowPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(short x, short y, short z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.WindowPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void WindowPos3(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "WindowPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.WindowPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(Color color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.Color3(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Color color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.Color4(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(Vector3 color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.Color3(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Vector4 color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.Color4(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Color4 color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.Color4(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearColor(Color color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearColor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.ClearColor(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearColor(Color4 color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearColor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.ClearColor(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendColor(Color color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendColor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.BlendColor(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendColor(Color4 color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendColor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (color.GetType(), "color", color),
                }
            });

            GL.BlendColor(color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Material(MaterialFace face, MaterialParameter pname, Vector4 @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Material",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Material(face, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Material(MaterialFace face, MaterialParameter pname, Color4 @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Material",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Material(face, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Light(LightName name, LightParameter pname, Vector4 @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Light",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Light(name, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Light(LightName name, LightParameter pname, Color4 @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Light",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Light(name, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(Vector3 normal)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (normal.GetType(), "normal", normal),
                }
            });

            GL.Normal3(normal);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(Vector2 pos)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pos.GetType(), "pos", pos),
                }
            });

            GL.RasterPos2(pos);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(Vector3 pos)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pos.GetType(), "pos", pos),
                }
            });

            GL.RasterPos3(pos);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(Vector4 pos)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pos.GetType(), "pos", pos),
                }
            });

            GL.RasterPos4(pos);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(Vector2 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(Vector3 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(Vector4 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(Vector2 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(Vector3 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(Vector4 v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rotate(float angle, Vector3 axis)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rotate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (angle.GetType(), "angle", angle),
                    (axis.GetType(), "axis", axis),
                }
            });

            GL.Rotate(angle, axis);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Scale(Vector3 scale)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Scale",
                CallParams = new(Type type, string name, object value)[]
                {
                    (scale.GetType(), "scale", scale),
                }
            });

            GL.Scale(scale);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Translate(Vector3 trans)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Translate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (trans.GetType(), "trans", trans),
                }
            });

            GL.Translate(trans);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(Vector3d normal)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (normal.GetType(), "normal", normal),
                }
            });

            GL.Normal3(normal);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(Vector2d pos)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pos.GetType(), "pos", pos),
                }
            });

            GL.RasterPos2(pos);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(Vector3d pos)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pos.GetType(), "pos", pos),
                }
            });

            GL.RasterPos3(pos);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(Vector4d pos)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pos.GetType(), "pos", pos),
                }
            });

            GL.RasterPos4(pos);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(Vector2d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(Vector3d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(Vector4d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(Vector2d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(Vector3d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(Vector4d v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rotate(double angle, Vector3d axis)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rotate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (angle.GetType(), "angle", angle),
                    (axis.GetType(), "axis", axis),
                }
            });

            GL.Rotate(angle, axis);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Scale(Vector3d scale)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Scale",
                CallParams = new(Type type, string name, object value)[]
                {
                    (scale.GetType(), "scale", scale),
                }
            });

            GL.Scale(scale);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Translate(Vector3d trans)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Translate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (trans.GetType(), "trans", trans),
                }
            });

            GL.Translate(trans);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer(int index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, T4[] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, T4[,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, T4[,,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer(uint index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, T4[] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, T4[,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, T4[,,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribIPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL1(int index, double x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttribL1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL1(uint index, double x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttribL1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL2(int index, double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttribL2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL2(uint index, double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttribL2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL2(int index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribL2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL2(uint index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribL2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL3(int index, double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttribL3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL3(uint index, double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttribL3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL3(int index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribL3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL3(uint index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribL3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL4(int index, double x, double y, double z, double w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttribL4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL4(uint index, double x, double y, double z, double w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttribL4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL4(int index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribL4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribL4(uint index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribL4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribL4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLFormat(int attribindex, int size, VertexAttribDoubleType type, int relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexAttribLFormat(attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLFormat(uint attribindex, int size, VertexAttribDoubleType type, uint relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexAttribLFormat(attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer(int index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, T4[] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, T4[,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, T4[,,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer(uint index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, T4[] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, T4[,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, T4[,,] pointer)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribLPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribLPointer(index, size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP1(int index, PackedPointerType type, bool normalized, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP1(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP1(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP2(int index, PackedPointerType type, bool normalized, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP2(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP2(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP3(int index, PackedPointerType type, bool normalized, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP3(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP3(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP4(int index, PackedPointerType type, bool normalized, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP4(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (value.GetType(), "value", value),
                }
            });

            GL.VertexAttribP4(index, type, normalized, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[] pointer)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,] pointer)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,,] pointer)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.VertexAttribPointer(index, size, type, normalized, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(uint index, SByte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(int index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(uint index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(int index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(uint index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(int index, byte x, byte y, byte z, byte w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4N(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4N(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(int index, Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(uint index, Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(uint index, UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4N(uint index, UInt16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4N",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4N(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, short x, short y, short z, short w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, short x, short y, short z, short w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, UInt16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribBinding(int attribindex, int bindingindex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                }
            });

            GL.VertexAttribBinding(attribindex, bindingindex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribBinding(uint attribindex, uint bindingindex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                }
            });

            GL.VertexAttribBinding(attribindex, bindingindex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribDivisor(int index, int divisor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribDivisor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (divisor.GetType(), "divisor", divisor),
                }
            });

            GL.VertexAttribDivisor(index, divisor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribDivisor(uint index, uint divisor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribDivisor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (divisor.GetType(), "divisor", divisor),
                }
            });

            GL.VertexAttribDivisor(index, divisor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribFormat(int attribindex, int size, VertexAttribType type, bool normalized, int relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI1(int index, int x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttribI1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI1(uint index, int x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttribI1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI1(uint index, uint x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttribI1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI2(int index, int x, int y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttribI2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI2(uint index, int x, int y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttribI2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI2(int index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI2(uint index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI2(uint index, uint x, uint y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttribI2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI2(uint index, UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI3(int index, int x, int y, int z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttribI3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI3(uint index, int x, int y, int z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttribI3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI3(int index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI3(uint index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI3(uint index, uint x, uint y, uint z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttribI3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI3(uint index, UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, SByte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(int index, int x, int y, int z, int w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttribI4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, int x, int y, int z, int w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttribI4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(int index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(int index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(int index, Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttribI4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribI4(uint index, UInt16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribI4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttribI4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIFormat(int attribindex, int size, VertexAttribIntegerType type, int relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexAttribIFormat(attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttribIFormat(uint attribindex, int size, VertexAttribIntegerType type, uint relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttribIFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexAttribIFormat(attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Vertex3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Vertex3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(int x, int y, int z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Vertex3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(short x, short y, short z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Vertex3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex3(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(double x, double y, double z, double w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.Vertex4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(float x, float y, float z, float w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.Vertex4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(int x, int y, int z, int w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.Vertex4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(short x, short y, short z, short w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.Vertex4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex4(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribBinding(int vaobj, int attribindex, int bindingindex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                }
            });

            GL.VertexArrayAttribBinding(vaobj, attribindex, bindingindex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                }
            });

            GL.VertexArrayAttribBinding(vaobj, attribindex, bindingindex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribFormat(int vaobj, int attribindex, int size, VertexAttribType type, bool normalized, int relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (normalized.GetType(), "normalized", normalized),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribIFormat(int vaobj, int attribindex, int size, VertexAttribType type, int relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribIFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, uint relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribIFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribLFormat(int vaobj, int attribindex, int size, All type, int relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribLFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, All type, uint relativeoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayAttribLFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (attribindex.GetType(), "attribindex", attribindex),
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (relativeoffset.GetType(), "relativeoffset", relativeoffset),
                }
            });

            GL.VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayBindingDivisor(int vaobj, int bindingindex, int divisor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayBindingDivisor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (divisor.GetType(), "divisor", divisor),
                }
            });

            GL.VertexArrayBindingDivisor(vaobj, bindingindex, divisor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayBindingDivisor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (divisor.GetType(), "divisor", divisor),
                }
            });

            GL.VertexArrayBindingDivisor(vaobj, bindingindex, divisor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayElementBuffer(int vaobj, int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayElementBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.VertexArrayElementBuffer(vaobj, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayElementBuffer(uint vaobj, uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayElementBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.VertexArrayElementBuffer(vaobj, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayVertexBuffer(int vaobj, int bindingindex, int buffer, IntPtr offset, int stride)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayVertexBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayVertexBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayVertexBuffers(int vaobj, int first, int count, Int32[] buffers, IntPtr[] offsets, Int32[] strides)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayVertexBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                    (offsets.GetType(), "offsets", offsets),
                    (strides.GetType(), "strides", strides),
                }
            });

            GL.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexArrayVertexBuffers(uint vaobj, uint first, int count, UInt32[] buffers, IntPtr[] offsets, Int32[] strides)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexArrayVertexBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                    (offsets.GetType(), "offsets", offsets),
                    (strides.GetType(), "strides", strides),
                }
            });

            GL.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib1(int index, double x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttrib1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib1(uint index, double x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttrib1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib1(int index, float x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttrib1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib1(uint index, float x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttrib1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib1(int index, short x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttrib1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib1(uint index, short x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                }
            });

            GL.VertexAttrib1(index, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttrib2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(uint index, double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttrib2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(uint index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, float x, float y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttrib2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(uint index, float x, float y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttrib2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(uint index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, short x, short y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttrib2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(uint index, short x, short y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.VertexAttrib2(index, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(int index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib2(uint index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib2(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttrib3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(uint index, double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttrib3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(uint index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttrib3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(uint index, float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttrib3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(uint index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, short x, short y, short z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttrib3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(uint index, short x, short y, short z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.VertexAttrib3(index, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(int index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib3(uint index, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib3(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, SByte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, double x, double y, double z, double w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, double x, double y, double z, double w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, float x, float y, float z, float w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(uint index, float x, float y, float z, float w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.VertexAttrib4(index, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void VertexAttrib4(int index, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "VertexAttrib4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.VertexAttrib4(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, int v0, int v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.Uniform2(location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform2(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, uint v0, uint v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.Uniform2(location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, int count, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform2(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Uniform3(location, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform3(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, float v0, float v1, float v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.Uniform3(location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform3(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, int v0, int v1, int v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.Uniform3(location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform3(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, uint v0, uint v1, uint v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.Uniform3(location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform3(int location, int count, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform3(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, double x, double y, double z, double w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.Uniform4(location, x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform4(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, float v0, float v1, float v2, float v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.Uniform4(location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform4(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, int v0, int v1, int v2, int v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.Uniform4(location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform4(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.Uniform4(location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform4(int location, int count, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform4(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformBlockBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformBlockIndex.GetType(), "uniformBlockIndex", uniformBlockIndex),
                    (uniformBlockBinding.GetType(), "uniformBlockBinding", uniformBlockBinding),
                }
            });

            GL.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformBlockBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformBlockIndex.GetType(), "uniformBlockIndex", uniformBlockIndex),
                    (uniformBlockBinding.GetType(), "uniformBlockBinding", uniformBlockBinding),
                }
            });

            GL.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix2(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix2(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix2(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix2(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix2x3(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix2x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix2x3(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix2x3(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix2x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix2x3(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix2x4(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix2x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix2x4(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix2x4(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix2x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix2x4(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix3(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix3(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix3(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix3(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix3x2(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix3x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix3x2(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix3x2(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix3x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix3x2(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix3x4(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix3x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix3x4(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix3x4(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix3x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix3x4(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix4(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix4(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix4(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix4(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix4x2(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix4x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix4x2(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix4x2(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix4x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix4x2(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix4x3(int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix4x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix4x3(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformMatrix4x3(int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformMatrix4x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.UniformMatrix4x3(location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformSubroutines(ShaderType shadertype, int count, Int32[] indices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformSubroutines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shadertype.GetType(), "shadertype", shadertype),
                    (count.GetType(), "count", count),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.UniformSubroutines(shadertype, count, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UniformSubroutines(ShaderType shadertype, int count, UInt32[] indices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UniformSubroutines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shadertype.GetType(), "shadertype", shadertype),
                    (count.GetType(), "count", count),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.UniformSubroutines(shadertype, count, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public bool UnmapBuffer(BufferTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UnmapBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                }
            });

            var result = GL.UnmapBuffer(target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool UnmapNamedBuffer(int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UnmapNamedBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            var result = GL.UnmapNamedBuffer(buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool UnmapNamedBuffer(uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UnmapNamedBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            var result = GL.UnmapNamedBuffer(buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void UseProgram(int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UseProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.UseProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UseProgram(uint program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UseProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.UseProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UseProgramStages(int pipeline, ProgramStageMask stages, int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UseProgramStages",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                    (stages.GetType(), "stages", stages),
                    (program.GetType(), "program", program),
                }
            });

            GL.UseProgramStages(pipeline, stages, program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void UseProgramStages(uint pipeline, ProgramStageMask stages, uint program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "UseProgramStages",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                    (stages.GetType(), "stages", stages),
                    (program.GetType(), "program", program),
                }
            });

            GL.UseProgramStages(pipeline, stages, program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ValidateProgram(int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ValidateProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.ValidateProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ValidateProgram(uint program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ValidateProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.ValidateProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ValidateProgramPipeline(int pipeline)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ValidateProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                }
            });

            GL.ValidateProgramPipeline(pipeline);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ValidateProgramPipeline(uint pipeline)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ValidateProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                }
            });

            GL.ValidateProgramPipeline(pipeline);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.Vertex2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(float x, float y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.Vertex2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(int x, int y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.Vertex2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(short x, short y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.Vertex2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Vertex2(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Vertex2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Vertex2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureBarrier()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureBarrier",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.TextureBarrier();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureBuffer(int texture, SizedInternalFormat internalformat, int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.TextureBuffer(texture, internalformat, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureBuffer(uint texture, SizedInternalFormat internalformat, uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.TextureBuffer(texture, internalformat, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureBufferRange(int texture, SizedInternalFormat internalformat, int buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TextureBufferRange(texture, internalformat, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureBufferRange(uint texture, SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TextureBufferRange(texture, internalformat, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(int texture, TextureParameterName pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(uint texture, TextureParameterName pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(int texture, TextureParameterName pname, Single[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(uint texture, TextureParameterName pname, Single[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(int texture, TextureParameterName pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(uint texture, TextureParameterName pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameterI(int texture, All pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TextureParameterI(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameterI(uint texture, All pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TextureParameterI(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameterI(uint texture, All pname, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TextureParameterI(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(int texture, TextureParameterName pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureParameter(uint texture, TextureParameterName pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TextureParameter(texture, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage1D(int texture, int levels, SizedInternalFormat internalformat, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                }
            });

            GL.TextureStorage1D(texture, levels, internalformat, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage1D(uint texture, int levels, SizedInternalFormat internalformat, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                }
            });

            GL.TextureStorage1D(texture, levels, internalformat, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage2D(int texture, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.TextureStorage2D(texture, levels, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage2D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.TextureStorage2D(texture, levels, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage2DMultisample(int texture, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage2DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage2DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage2DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage3D(int texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                }
            });

            GL.TextureStorage3D(texture, levels, internalformat, width, height, depth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage3D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                }
            });

            GL.TextureStorage3D(texture, levels, internalformat, width, height, depth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage3DMultisample(int texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage3DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureStorage3DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureStorage3DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureView(int texture, TextureTarget target, int origtexture, PixelInternalFormat internalformat, int minlevel, int numlevels, int minlayer, int numlayers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureView",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (target.GetType(), "target", target),
                    (origtexture.GetType(), "origtexture", origtexture),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (minlevel.GetType(), "minlevel", minlevel),
                    (numlevels.GetType(), "numlevels", numlevels),
                    (minlayer.GetType(), "minlayer", minlayer),
                    (numlayers.GetType(), "numlayers", numlayers),
                }
            });

            GL.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TextureView(uint texture, TextureTarget target, uint origtexture, PixelInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TextureView",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (target.GetType(), "target", target),
                    (origtexture.GetType(), "origtexture", origtexture),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (minlevel.GetType(), "minlevel", minlevel),
                    (numlevels.GetType(), "numlevels", numlevels),
                    (minlayer.GetType(), "minlayer", minlayer),
                    (numlayers.GetType(), "numlayers", numlayers),
                }
            });

            GL.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TransformFeedbackBufferBase(int xfb, int index, int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TransformFeedbackBufferBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.TransformFeedbackBufferBase(xfb, index, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TransformFeedbackBufferBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.TransformFeedbackBufferBase(xfb, index, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TransformFeedbackBufferRange(int xfb, int index, int buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TransformFeedbackBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TransformFeedbackBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TransformFeedbackVaryings(int program, int count, String[] varyings, TransformFeedbackMode bufferMode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TransformFeedbackVaryings",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (count.GetType(), "count", count),
                    (varyings.GetType(), "varyings", varyings),
                    (bufferMode.GetType(), "bufferMode", bufferMode),
                }
            });

            GL.TransformFeedbackVaryings(program, count, varyings, bufferMode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TransformFeedbackVaryings(uint program, int count, String[] varyings, TransformFeedbackMode bufferMode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TransformFeedbackVaryings",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (count.GetType(), "count", count),
                    (varyings.GetType(), "varyings", varyings),
                    (bufferMode.GetType(), "bufferMode", bufferMode),
                }
            });

            GL.TransformFeedbackVaryings(program, count, varyings, bufferMode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Translate(double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Translate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Translate(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Translate(float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Translate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Translate(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, double x)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (x.GetType(), "x", x),
                }
            });

            GL.Uniform1(location, x);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform1(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, float v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.Uniform1(location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform1(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, int v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.Uniform1(location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform1(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, uint v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.Uniform1(location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform1(int location, int count, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform1(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.Uniform2(location, x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform2(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, float v0, float v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.Uniform2(location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Uniform2(int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Uniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.Uniform2(location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(short s, short t, short r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.TexCoord3(s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(double s, double t, double r, double q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.TexCoord4(s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(float s, float t, float r, float q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.TexCoord4(s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(int s, int t, int r, int q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.TexCoord4(s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(short s, short t, short r, short q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.TexCoord4(s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord4(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP1(PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP1(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP1(PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP1(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP2(PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP2(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP2(PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP2(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP3(PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP3(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP3(PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP3(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP4(PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP4(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordP4(PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.TexCoordP4(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.TexCoordPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, T3[] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.TexCoordPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, T3[,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.TexCoordPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, T3[,,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.TexCoordPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TexEnv(target, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexEnv(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TexEnv(target, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexEnv(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexGend(TextureCoordName coord, TextureGenParameter pname, double param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexGend",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TexGend(coord, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexGen(TextureCoordName coord, TextureGenParameter pname, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexGen(coord, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexGen(TextureCoordName coord, TextureGenParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TexGen(coord, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexGen(TextureCoordName coord, TextureGenParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexGen(coord, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexGen(TextureCoordName coord, TextureGenParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TexGen(coord, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexGen(TextureCoordName coord, TextureGenParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexGen(coord, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage1D(target, level, internalformat, width, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T7[] pixels)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage1D(target, level, internalformat, width, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T7[,] pixels)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage1D(target, level, internalformat, width, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T7[,,] pixels)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage1D(target, level, internalformat, width, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T8[] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T8[,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T8[,,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage2DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage2DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T9[] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T9[,] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T9[,,] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexImage3DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexImage3DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexParameter(TextureTarget target, TextureParameterName pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TexParameter(target, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexParameter(TextureTarget target, TextureParameterName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexParameter(TextureTarget target, TextureParameterName pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.TexParameter(target, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexParameterI(TextureTarget target, TextureParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexParameterI(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexParameterI(TextureTarget target, TextureParameterName pname, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexParameterI(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexParameter(TextureTarget target, TextureParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.TexParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexStorage1D(TextureTarget1d target, int levels, SizedInternalFormat internalformat, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexStorage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                }
            });

            GL.TexStorage1D(target, levels, internalformat, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexStorage2D(TextureTarget2d target, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexStorage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.TexStorage2D(target, levels, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexStorage2DMultisample(TextureTargetMultisample2d target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexStorage2DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexStorage3D(TextureTarget3d target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexStorage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (levels.GetType(), "levels", levels),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                }
            });

            GL.TexStorage3D(target, levels, internalformat, width, height, depth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexStorage3DMultisample(TextureTargetMultisample3d target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexStorage3DMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (fixedsamplelocations.GetType(), "fixedsamplelocations", fixedsamplelocations),
                }
            });

            GL.TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage1D(target, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage1D(target, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage1D(target, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage1D(target, level, xoffset, width, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,,] pixels)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] pixels)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SeparableFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                }
            });

            GL.SeparableFilter2D(target, internalformat, width, height, format, type, row, column);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[] row, T7[] column)
                    where T6 : struct
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SeparableFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                }
            });

            GL.SeparableFilter2D(target, internalformat, width, height, format, type, row, column);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,] row, T7[,] column)
                    where T6 : struct
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SeparableFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                }
            });

            GL.SeparableFilter2D(target, internalformat, width, height, format, type, row, column);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,,] row, T7[,,] column)
                    where T6 : struct
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SeparableFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                }
            });

            GL.SeparableFilter2D(target, internalformat, width, height, format, type, row, column);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShadeModel(ShadingModel mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShadeModel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.ShadeModel(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary(int count, Int32[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary<T3>(int count, Int32[] shaders, BinaryFormat binaryformat, T3[] binary, int length)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary<T3>(int count, Int32[] shaders, BinaryFormat binaryformat, T3[,] binary, int length)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary<T3>(int count, Int32[] shaders, BinaryFormat binaryformat, T3[,,] binary, int length)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary(int count, UInt32[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary<T3>(int count, UInt32[] shaders, BinaryFormat binaryformat, T3[] binary, int length)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary<T3>(int count, UInt32[] shaders, BinaryFormat binaryformat, T3[,] binary, int length)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderBinary<T3>(int count, UInt32[] shaders, BinaryFormat binaryformat, T3[,,] binary, int length)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (shaders.GetType(), "shaders", shaders),
                    (binaryformat.GetType(), "binaryformat", binaryformat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderBinary(count, shaders, binaryformat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderSource(int shader, int count, String[] @string, Int32[] length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderSource",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                    (count.GetType(), "count", count),
                    (@string.GetType(), "@string", @string),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderSource(shader, count, @string, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderSource(uint shader, int count, String[] @string, Int32[] length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderSource",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                    (count.GetType(), "count", count),
                    (@string.GetType(), "@string", @string),
                    (length.GetType(), "length", length),
                }
            });

            GL.ShaderSource(shader, count, @string, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderStorageBlockBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (storageBlockIndex.GetType(), "storageBlockIndex", storageBlockIndex),
                    (storageBlockBinding.GetType(), "storageBlockBinding", storageBlockBinding),
                }
            });

            GL.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ShaderStorageBlockBinding",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (storageBlockIndex.GetType(), "storageBlockIndex", storageBlockIndex),
                    (storageBlockBinding.GetType(), "storageBlockBinding", storageBlockBinding),
                }
            });

            GL.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilFunc(StencilFunction func, int @ref, int mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilFunc",
                CallParams = new(Type type, string name, object value)[]
                {
                    (func.GetType(), "func", func),
                    (@ref.GetType(), "@ref", @ref),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilFunc(func, @ref, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilFunc(StencilFunction func, int @ref, uint mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilFunc",
                CallParams = new(Type type, string name, object value)[]
                {
                    (func.GetType(), "func", func),
                    (@ref.GetType(), "@ref", @ref),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilFunc(func, @ref, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, int mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilFuncSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (func.GetType(), "func", func),
                    (@ref.GetType(), "@ref", @ref),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilFuncSeparate(face, func, @ref, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, uint mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilFuncSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (func.GetType(), "func", func),
                    (@ref.GetType(), "@ref", @ref),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilFuncSeparate(face, func, @ref, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilMask(int mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilMask(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilMask(uint mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilMask(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilMaskSeparate(StencilFace face, int mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilMaskSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilMaskSeparate(face, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilMaskSeparate(StencilFace face, uint mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilMaskSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.StencilMaskSeparate(face, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilOp",
                CallParams = new(Type type, string name, object value)[]
                {
                    (fail.GetType(), "fail", fail),
                    (zfail.GetType(), "zfail", zfail),
                    (zpass.GetType(), "zpass", zpass),
                }
            });

            GL.StencilOp(fail, zfail, zpass);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "StencilOpSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (sfail.GetType(), "sfail", sfail),
                    (dpfail.GetType(), "dpfail", dpfail),
                    (dppass.GetType(), "dppass", dppass),
                }
            });

            GL.StencilOpSeparate(face, sfail, dpfail, dppass);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.TexBuffer(target, internalformat, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.TexBuffer(target, internalformat, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TexBufferRange(target, internalformat, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer, IntPtr offset, IntPtr size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TexBufferRange(target, internalformat, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TexBufferRange(target, internalformat, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.TexBufferRange(target, internalformat, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord1(double s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                }
            });

            GL.TexCoord1(s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord1(float s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                }
            });

            GL.TexCoord1(s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord1(int s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                }
            });

            GL.TexCoord1(s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord1(short s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                }
            });

            GL.TexCoord1(s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(double s, double t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.TexCoord2(s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(float s, float t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.TexCoord2(s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(int s, int t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.TexCoord2(s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(short s, short t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.TexCoord2(s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord2(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(double s, double t, double r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.TexCoord3(s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(float s, float t, float r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.TexCoord3(s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(int s, int t, int r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.TexCoord3(s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void TexCoord3(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "TexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.TexCoord3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(int x1, int y1, int x2, int y2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x1.GetType(), "x1", x1),
                    (y1.GetType(), "y1", y1),
                    (x2.GetType(), "x2", x2),
                    (y2.GetType(), "y2", y2),
                }
            });

            GL.Rect(x1, y1, x2, y2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(Int32[] v1, Int32[] v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.Rect(v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rects(short x1, short y1, short x2, short y2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rects",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x1.GetType(), "x1", x1),
                    (y1.GetType(), "y1", y1),
                    (x2.GetType(), "x2", x2),
                    (y2.GetType(), "y2", y2),
                }
            });

            GL.Rects(x1, y1, x2, y2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(Int16[] v1, Int16[] v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.Rect(v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReleaseShaderCompiler()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReleaseShaderCompiler",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.ReleaseShaderCompiler();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RenderbufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.RenderbufferStorage(target, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RenderbufferStorageMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.RenderbufferStorageMultisample(target, samples, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int RenderMode(RenderingMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RenderMode",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            var result = GL.RenderMode(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void ResetHistogram(HistogramTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ResetHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                }
            });

            GL.ResetHistogram(target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ResetMinmax(MinmaxTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ResetMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                }
            });

            GL.ResetMinmax(target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ResumeTransformFeedback()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ResumeTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.ResumeTransformFeedback();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rotate(double angle, double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rotate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (angle.GetType(), "angle", angle),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Rotate(angle, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rotate(float angle, float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rotate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (angle.GetType(), "angle", angle),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Rotate(angle, x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SampleCoverage(float value, bool invert)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SampleCoverage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (value.GetType(), "value", value),
                    (invert.GetType(), "invert", invert),
                }
            });

            GL.SampleCoverage(value, invert);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SampleMask(int maskNumber, int mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SampleMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (maskNumber.GetType(), "maskNumber", maskNumber),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.SampleMask(maskNumber, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SampleMask(uint maskNumber, uint mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SampleMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (maskNumber.GetType(), "maskNumber", maskNumber),
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.SampleMask(maskNumber, mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(int sampler, SamplerParameterName pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(uint sampler, SamplerParameterName pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(int sampler, SamplerParameterName pname, Single[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(uint sampler, SamplerParameterName pname, Single[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(int sampler, SamplerParameterName pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(uint sampler, SamplerParameterName pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameterI(int sampler, SamplerParameterName pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameterI(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameterI(uint sampler, SamplerParameterName pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameterI(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameterI(uint sampler, SamplerParameterName pname, UInt32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameterI(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(int sampler, SamplerParameterName pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SamplerParameter(uint sampler, SamplerParameterName pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.SamplerParameter(sampler, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Scale(double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Scale",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Scale(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Scale(float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Scale",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.Scale(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Scissor(int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Scissor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.Scissor(x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ScissorArray(int first, int count, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ScissorArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (v.GetType(), "v", v),
                }
            });

            GL.ScissorArray(first, count, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ScissorArray(uint first, int count, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ScissorArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (v.GetType(), "v", v),
                }
            });

            GL.ScissorArray(first, count, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ScissorIndexed(int index, int left, int bottom, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ScissorIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (left.GetType(), "left", left),
                    (bottom.GetType(), "bottom", bottom),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.ScissorIndexed(index, left, bottom, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ScissorIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (left.GetType(), "left", left),
                    (bottom.GetType(), "bottom", bottom),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.ScissorIndexed(index, left, bottom, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ScissorIndexed(int index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ScissorIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.ScissorIndexed(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ScissorIndexed(uint index, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ScissorIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (v.GetType(), "v", v),
                }
            });

            GL.ScissorIndexed(index, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(SByte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(double red, double green, double blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(float red, float green, float blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(int red, int green, int blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(short red, short green, short blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(byte red, byte green, byte blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(uint red, uint green, uint blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(ushort red, ushort green, ushort blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.SecondaryColor3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColor3(UInt16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColor3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.SecondaryColor3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColorP3(PackedPointerType type, int color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColorP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (color.GetType(), "color", color),
                }
            });

            GL.SecondaryColorP3(type, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColorP3(PackedPointerType type, uint color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColorP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (color.GetType(), "color", color),
                }
            });

            GL.SecondaryColorP3(type, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.SecondaryColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, T3[] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.SecondaryColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.SecondaryColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SecondaryColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.SecondaryColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SelectBuffer(int size, Int32[] buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SelectBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.SelectBuffer(size, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void SelectBuffer(int size, UInt32[] buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "SelectBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.SelectBuffer(size, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix4x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix4x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProvokingVertex(ProvokingVertexMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProvokingVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.ProvokingVertex(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PushAttrib(AttribMask mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PushAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.PushAttrib(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PushClientAttrib(ClientAttribMask mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PushClientAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.PushClientAttrib(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PushDebugGroup(DebugSourceExternal source, int id, int length, string message)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PushDebugGroup",
                CallParams = new(Type type, string name, object value)[]
                {
                    (source.GetType(), "source", source),
                    (id.GetType(), "id", id),
                    (length.GetType(), "length", length),
                    (message.GetType(), "message", message),
                }
            });

            GL.PushDebugGroup(source, id, length, message);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PushDebugGroup(DebugSourceExternal source, uint id, int length, string message)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PushDebugGroup",
                CallParams = new(Type type, string name, object value)[]
                {
                    (source.GetType(), "source", source),
                    (id.GetType(), "id", id),
                    (length.GetType(), "length", length),
                    (message.GetType(), "message", message),
                }
            });

            GL.PushDebugGroup(source, id, length, message);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PushMatrix()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PushMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.PushMatrix();

            //if ((_error = GL.GetError()) != ErrorCode.NoError)
            //    throw new InvalidOperationException(_error.ToString());
        }

        public void PushName(int name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PushName",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                }
            });

            GL.PushName(name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PushName(uint name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PushName",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                }
            });

            GL.PushName(name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void QueryCounter(int id, QueryCounterTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "QueryCounter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (target.GetType(), "target", target),
                }
            });

            GL.QueryCounter(id, target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void QueryCounter(uint id, QueryCounterTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "QueryCounter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (target.GetType(), "target", target),
                }
            });

            GL.QueryCounter(id, target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(double x, double y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.RasterPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(float x, float y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.RasterPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(int x, int y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.RasterPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(short x, short y)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                }
            });

            GL.RasterPos2(x, y);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos2(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos2(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(double x, double y, double z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.RasterPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(float x, float y, float z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.RasterPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(int x, int y, int z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.RasterPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(short x, short y, short z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                }
            });

            GL.RasterPos3(x, y, z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos3(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(double x, double y, double z, double w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.RasterPos4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(float x, float y, float z, float w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.RasterPos4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(int x, int y, int z, int w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.RasterPos4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(short x, short y, short z, short w)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (z.GetType(), "z", z),
                    (w.GetType(), "w", w),
                }
            });

            GL.RasterPos4(x, y, z, w);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void RasterPos4(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "RasterPos4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.RasterPos4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadBuffer(ReadBufferMode src)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (src.GetType(), "src", src),
                }
            });

            GL.ReadBuffer(src);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadnPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.ReadnPixels(x, y, width, height, format, type, bufSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadnPixels<T7>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T7[] data)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadnPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.ReadnPixels(x, y, width, height, format, type, bufSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadnPixels<T7>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T7[,] data)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadnPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.ReadnPixels(x, y, width, height, format, type, bufSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadnPixels<T7>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T7[,,] data)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadnPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.ReadnPixels(x, y, width, height, format, type, bufSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.ReadPixels(x, y, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, T6[] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.ReadPixels(x, y, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, T6[,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.ReadPixels(x, y, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, T6[,,] pixels)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ReadPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.ReadPixels(x, y, width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(double x1, double y1, double x2, double y2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x1.GetType(), "x1", x1),
                    (y1.GetType(), "y1", y1),
                    (x2.GetType(), "x2", x2),
                    (y2.GetType(), "y2", y2),
                }
            });

            GL.Rect(x1, y1, x2, y2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(Double[] v1, Double[] v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.Rect(v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(float x1, float y1, float x2, float y2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x1.GetType(), "x1", x1),
                    (y1.GetType(), "y1", y1),
                    (x2.GetType(), "x2", x2),
                    (y2.GetType(), "y2", y2),
                }
            });

            GL.Rect(x1, y1, x2, y2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Rect(Single[] v1, Single[] v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Rect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.Rect(v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform2(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, uint v0, uint v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.ProgramUniform2(program, location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, int count, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform2(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(int program, int location, double v0, double v1, double v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.ProgramUniform3(program, location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, double v0, double v1, double v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.ProgramUniform3(program, location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(int program, int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform3(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform3(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(int program, int location, float v0, float v1, float v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.ProgramUniform3(program, location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.ProgramUniform3(program, location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(int program, int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform3(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform3(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(int program, int location, int v0, int v1, int v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.ProgramUniform3(program, location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.ProgramUniform3(program, location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(int program, int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform3(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform3(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.ProgramUniform3(program, location, v0, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform3(uint program, int location, int count, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform3(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(int program, int location, double v0, double v1, double v2, double v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.ProgramUniform4(program, location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.ProgramUniform4(program, location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(int program, int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform4(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform4(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.ProgramUniform4(program, location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.ProgramUniform4(program, location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(int program, int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform4(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform4(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.ProgramUniform4(program, location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.ProgramUniform4(program, location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(int program, int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform4(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform4(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (v3.GetType(), "v3", v3),
                }
            });

            GL.ProgramUniform4(program, location, v0, v1, v2, v3);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform4(uint program, int location, int count, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform4(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix2x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix2x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x2(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniformMatrix3x4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (transpose.GetType(), "transpose", transpose),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniformMatrix3x4(program, location, count, transpose, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ObjectPtrLabel<T0>(T0[] ptr, int length, string label)
                    where T0 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ObjectPtrLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ptr.GetType(), "ptr", ptr),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.ObjectPtrLabel(ptr, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ObjectPtrLabel<T0>(T0[,] ptr, int length, string label)
                    where T0 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ObjectPtrLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ptr.GetType(), "ptr", ptr),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.ObjectPtrLabel(ptr, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ObjectPtrLabel<T0>(T0[,,] ptr, int length, string label)
                    where T0 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ObjectPtrLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ptr.GetType(), "ptr", ptr),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.ObjectPtrLabel(ptr, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Ortho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Ortho",
                CallParams = new(Type type, string name, object value)[]
                {
                    (left.GetType(), "left", left),
                    (right.GetType(), "right", right),
                    (bottom.GetType(), "bottom", bottom),
                    (top.GetType(), "top", top),
                    (zNear.GetType(), "zNear", zNear),
                    (zFar.GetType(), "zFar", zFar),
                }
            });

            GL.Ortho(left, right, bottom, top, zNear, zFar);

            //if ((_error = GL.GetError()) != ErrorCode.NoError)
            //    throw new InvalidOperationException(_error.ToString());
        }

        public void PassThrough(float token)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PassThrough",
                CallParams = new(Type type, string name, object value)[]
                {
                    (token.GetType(), "token", token),
                }
            });

            GL.PassThrough(token);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PatchParameter(PatchParameterFloat pname, Single[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PatchParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (values.GetType(), "values", values),
                }
            });

            GL.PatchParameter(pname, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PatchParameter(PatchParameterInt pname, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PatchParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (value.GetType(), "value", value),
                }
            });

            GL.PatchParameter(pname, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PauseTransformFeedback()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PauseTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.PauseTransformFeedback();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelMap(PixelMap map, int mapsize, Single[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (mapsize.GetType(), "mapsize", mapsize),
                    (values.GetType(), "values", values),
                }
            });

            GL.PixelMap(map, mapsize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelMap(PixelMap map, int mapsize, Int32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (mapsize.GetType(), "mapsize", mapsize),
                    (values.GetType(), "values", values),
                }
            });

            GL.PixelMap(map, mapsize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelMap(PixelMap map, int mapsize, UInt32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (mapsize.GetType(), "mapsize", mapsize),
                    (values.GetType(), "values", values),
                }
            });

            GL.PixelMap(map, mapsize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelMap(PixelMap map, int mapsize, Int16[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (mapsize.GetType(), "mapsize", mapsize),
                    (values.GetType(), "values", values),
                }
            });

            GL.PixelMap(map, mapsize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelMap(PixelMap map, int mapsize, UInt16[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (mapsize.GetType(), "mapsize", mapsize),
                    (values.GetType(), "values", values),
                }
            });

            GL.PixelMap(map, mapsize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelMapx(OesFixedPoint map, int size, Int32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelMapx",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (size.GetType(), "size", size),
                    (values.GetType(), "values", values),
                }
            });

            GL.PixelMapx(map, size, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelStore(PixelStoreParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelStore",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.PixelStore(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelStore(PixelStoreParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelStore",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.PixelStore(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelStorex(OesFixedPoint pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelStorex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.PixelStorex(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelTransfer(PixelTransferParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelTransfer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.PixelTransfer(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelTransfer(PixelTransferParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelTransfer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.PixelTransfer(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PixelZoom(float xfactor, float yfactor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PixelZoom",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfactor.GetType(), "xfactor", xfactor),
                    (yfactor.GetType(), "yfactor", yfactor),
                }
            });

            GL.PixelZoom(xfactor, yfactor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PointParameter(PointParameterName pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PointParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.PointParameter(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PointParameter(PointParameterName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PointParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.PointParameter(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PointParameter(PointParameterName pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PointParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.PointParameter(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PointParameter(PointParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PointParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.PointParameter(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PointSize(float size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PointSize",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                }
            });

            GL.PointSize(size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PolygonMode(MaterialFace face, PolygonMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PolygonMode",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.PolygonMode(face, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PolygonOffset(float factor, float units)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PolygonOffset",
                CallParams = new(Type type, string name, object value)[]
                {
                    (factor.GetType(), "factor", factor),
                    (units.GetType(), "units", units),
                }
            });

            GL.PolygonOffset(factor, units);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PolygonStipple(Byte[] mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PolygonStipple",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.PolygonStipple(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PopAttrib()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PopAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.PopAttrib();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PopClientAttrib()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PopClientAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.PopClientAttrib();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PopDebugGroup()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PopDebugGroup",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.PopDebugGroup();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PopMatrix()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PopMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.PopMatrix();

            //if ((_error = GL.GetError()) != ErrorCode.NoError)
            //    throw new InvalidOperationException(_error.ToString());
        }

        public void PopName()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PopName",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.PopName();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PrimitiveRestartIndex(int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PrimitiveRestartIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                }
            });

            GL.PrimitiveRestartIndex(index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PrimitiveRestartIndex(uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PrimitiveRestartIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                }
            });

            GL.PrimitiveRestartIndex(index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PrioritizeTextures(int n, Int32[] textures, Single[] priorities)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PrioritizeTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                    (priorities.GetType(), "priorities", priorities),
                }
            });

            GL.PrioritizeTextures(n, textures, priorities);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void PrioritizeTextures(int n, UInt32[] textures, Single[] priorities)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "PrioritizeTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                    (priorities.GetType(), "priorities", priorities),
                }
            });

            GL.PrioritizeTextures(n, textures, priorities);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary(int program, BinaryFormat binaryFormat, IntPtr binary, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, T2[] binary, int length)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, T2[,] binary, int length)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, T2[,,] binary, int length)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary(uint program, BinaryFormat binaryFormat, IntPtr binary, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, T2[] binary, int length)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, T2[,] binary, int length)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, T2[,,] binary, int length)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramBinary",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (binaryFormat.GetType(), "binaryFormat", binaryFormat),
                    (binary.GetType(), "binary", binary),
                    (length.GetType(), "length", length),
                }
            });

            GL.ProgramBinary(program, binaryFormat, binary, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramParameter(int program, ProgramParameterName pname, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (pname.GetType(), "pname", pname),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramParameter(program, pname, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramParameter(uint program, ProgramParameterName pname, int value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (pname.GetType(), "pname", pname),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramParameter(program, pname, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform1(int program, int location, double v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.ProgramUniform1(program, location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform1(uint program, int location, double v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.ProgramUniform1(program, location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform1(int program, int location, float v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.ProgramUniform1(program, location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform1(uint program, int location, float v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.ProgramUniform1(program, location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform1(int program, int location, int v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.ProgramUniform1(program, location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform1(uint program, int location, int v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.ProgramUniform1(program, location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform1(uint program, int location, uint v0)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                }
            });

            GL.ProgramUniform1(program, location, v0);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(int program, int location, double v0, double v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.ProgramUniform2(program, location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, double v0, double v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.ProgramUniform2(program, location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(int program, int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform2(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, int count, Double[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform2(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(int program, int location, float v0, float v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.ProgramUniform2(program, location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, float v0, float v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.ProgramUniform2(program, location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(int program, int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform2(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, int count, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform2(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(int program, int location, int v0, int v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.ProgramUniform2(program, location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(uint program, int location, int v0, int v1)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (v0.GetType(), "v0", v0),
                    (v1.GetType(), "v1", v1),
                }
            });

            GL.ProgramUniform2(program, location, v0, v1);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ProgramUniform2(int program, int location, int count, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ProgramUniform2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (count.GetType(), "count", count),
                    (value.GetType(), "value", value),
                }
            });

            GL.ProgramUniform2(program, location, count, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultMatrix(Single[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.MultMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultTransposeMatrix(Double[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultTransposeMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.MultTransposeMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultTransposeMatrix(Single[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultTransposeMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.MultTransposeMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData(int buffer, int size, IntPtr data, BufferUsageHint usage)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData<T2>(int buffer, int size, T2[] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData<T2>(int buffer, int size, T2[,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData<T2>(int buffer, int size, T2[,,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData(uint buffer, int size, IntPtr data, BufferUsageHint usage)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData<T2>(uint buffer, int size, T2[] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData<T2>(uint buffer, int size, T2[,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferData<T2>(uint buffer, int size, T2[,,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.NamedBufferData(buffer, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage(int buffer, int size, IntPtr data, BufferStorageFlags flags)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage<T2>(int buffer, int size, T2[] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage<T2>(int buffer, int size, T2[,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage<T2>(int buffer, int size, T2[,,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage(uint buffer, int size, IntPtr data, BufferStorageFlags flags)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage<T2>(uint buffer, int size, T2[] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage<T2>(uint buffer, int size, T2[,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferStorage<T2>(uint buffer, int size, T2[,,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.NamedBufferStorage(buffer, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData(int buffer, IntPtr offset, int size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData(uint buffer, IntPtr offset, int size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.NamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferDrawBuffer(int framebuffer, DrawBufferMode buf)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferDrawBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buf.GetType(), "buf", buf),
                }
            });

            GL.NamedFramebufferDrawBuffer(framebuffer, buf);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferDrawBuffer(uint framebuffer, DrawBufferMode buf)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferDrawBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buf.GetType(), "buf", buf),
                }
            });

            GL.NamedFramebufferDrawBuffer(framebuffer, buf);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferDrawBuffers(int framebuffer, int n, DrawBuffersEnum[] bufs)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferDrawBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (n.GetType(), "n", n),
                    (bufs.GetType(), "bufs", bufs),
                }
            });

            GL.NamedFramebufferDrawBuffers(framebuffer, n, bufs);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferDrawBuffers(uint framebuffer, int n, DrawBuffersEnum[] bufs)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferDrawBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (n.GetType(), "n", n),
                    (bufs.GetType(), "bufs", bufs),
                }
            });

            GL.NamedFramebufferDrawBuffers(framebuffer, n, bufs);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferParameter(int framebuffer, FramebufferDefaultParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.NamedFramebufferParameter(framebuffer, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferParameter(uint framebuffer, FramebufferDefaultParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.NamedFramebufferParameter(framebuffer, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferReadBuffer(int framebuffer, ReadBufferMode src)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferReadBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (src.GetType(), "src", src),
                }
            });

            GL.NamedFramebufferReadBuffer(framebuffer, src);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferReadBuffer(uint framebuffer, ReadBufferMode src)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferReadBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (src.GetType(), "src", src),
                }
            });

            GL.NamedFramebufferReadBuffer(framebuffer, src);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferRenderbuffer(int framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (renderbuffertarget.GetType(), "renderbuffertarget", renderbuffertarget),
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            GL.NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (renderbuffertarget.GetType(), "renderbuffertarget", renderbuffertarget),
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            GL.NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferTexture(int framebuffer, FramebufferAttachment attachment, int texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.NamedFramebufferTexture(framebuffer, attachment, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.NamedFramebufferTexture(framebuffer, attachment, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferTextureLayer(int framebuffer, FramebufferAttachment attachment, int texture, int level, int layer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferTextureLayer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (layer.GetType(), "layer", layer),
                }
            });

            GL.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedFramebufferTextureLayer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (layer.GetType(), "layer", layer),
                }
            });

            GL.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedRenderbufferStorage(int renderbuffer, RenderbufferStorage internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedRenderbufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.NamedRenderbufferStorage(renderbuffer, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedRenderbufferStorage(uint renderbuffer, RenderbufferStorage internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedRenderbufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.NamedRenderbufferStorage(renderbuffer, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedRenderbufferStorageMultisample(int renderbuffer, int samples, RenderbufferStorage internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedRenderbufferStorageMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, RenderbufferStorage internalformat, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NamedRenderbufferStorageMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                    (samples.GetType(), "samples", samples),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NewList(int list, ListMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NewList",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.NewList(list, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NewList(uint list, ListMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NewList",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.NewList(list, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(byte nx, byte ny, byte nz)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (nx.GetType(), "nx", nx),
                    (ny.GetType(), "ny", ny),
                    (nz.GetType(), "nz", nz),
                }
            });

            GL.Normal3(nx, ny, nz);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(sbyte nx, sbyte ny, sbyte nz)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (nx.GetType(), "nx", nx),
                    (ny.GetType(), "ny", ny),
                    (nz.GetType(), "nz", nz),
                }
            });

            GL.Normal3(nx, ny, nz);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Normal3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(SByte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Normal3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(double nx, double ny, double nz)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (nx.GetType(), "nx", nx),
                    (ny.GetType(), "ny", ny),
                    (nz.GetType(), "nz", nz),
                }
            });

            GL.Normal3(nx, ny, nz);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Normal3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(float nx, float ny, float nz)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (nx.GetType(), "nx", nx),
                    (ny.GetType(), "ny", ny),
                    (nz.GetType(), "nz", nz),
                }
            });

            GL.Normal3(nx, ny, nz);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Normal3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(int nx, int ny, int nz)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (nx.GetType(), "nx", nx),
                    (ny.GetType(), "ny", ny),
                    (nz.GetType(), "nz", nz),
                }
            });

            GL.Normal3(nx, ny, nz);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Normal3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(short nx, short ny, short nz)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (nx.GetType(), "nx", nx),
                    (ny.GetType(), "ny", ny),
                    (nz.GetType(), "nz", nz),
                }
            });

            GL.Normal3(nx, ny, nz);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Normal3(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Normal3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Normal3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NormalP3(PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NormalP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.NormalP3(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NormalP3(PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NormalP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.NormalP3(type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NormalPointer(NormalPointerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NormalPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.NormalPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NormalPointer<T2>(NormalPointerType type, int stride, T2[] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NormalPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.NormalPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NormalPointer<T2>(NormalPointerType type, int stride, T2[,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NormalPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.NormalPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void NormalPointer<T2>(NormalPointerType type, int stride, T2[,,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "NormalPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.NormalPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ObjectLabel(ObjectLabelIdentifier identifier, int name, int length, string label)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ObjectLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (identifier.GetType(), "identifier", identifier),
                    (name.GetType(), "name", name),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.ObjectLabel(identifier, name, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ObjectLabel(ObjectLabelIdentifier identifier, uint name, int length, string label)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ObjectLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (identifier.GetType(), "identifier", identifier),
                    (name.GetType(), "name", name),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.ObjectLabel(identifier, name, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ObjectPtrLabel(IntPtr ptr, int length, string label)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ObjectPtrLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ptr.GetType(), "ptr", ptr),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.ObjectPtrLabel(ptr, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsBaseVertex(PrimitiveType mode, Int32[] count, DrawElementsType type, IntPtr indices, int drawcount, Int32[] basevertex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, Int32[] count, DrawElementsType type, T3[] indices, int drawcount, Int32[] basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, Int32[] count, DrawElementsType type, T3[,] indices, int drawcount, Int32[] basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, Int32[] count, DrawElementsType type, T3[,,] indices, int drawcount, Int32[] basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsIndirect(All mode, All type, IntPtr indirect, int drawcount, int stride)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsIndirect<T2>(All mode, All type, T2[] indirect, int drawcount, int stride)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsIndirect<T2>(All mode, All type, T2[,] indirect, int drawcount, int stride)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElementsIndirect<T2>(All mode, All type, T2[,,] indirect, int drawcount, int stride)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord1(TextureUnit target, double s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                }
            });

            GL.MultiTexCoord1(target, s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord1(TextureUnit target, float s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                }
            });

            GL.MultiTexCoord1(target, s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord1(TextureUnit target, int s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                }
            });

            GL.MultiTexCoord1(target, s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord1(TextureUnit target, short s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                }
            });

            GL.MultiTexCoord1(target, s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, double s, double t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.MultiTexCoord2(target, s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord2(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, float s, float t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.MultiTexCoord2(target, s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord2(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, int s, int t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.MultiTexCoord2(target, s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord2(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, short s, short t)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                }
            });

            GL.MultiTexCoord2(target, s, t);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord2(TextureUnit target, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord2(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, double s, double t, double r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.MultiTexCoord3(target, s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord3(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, float s, float t, float r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.MultiTexCoord3(target, s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord3(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, int s, int t, int r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.MultiTexCoord3(target, s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord3(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, short s, short t, short r)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                }
            });

            GL.MultiTexCoord3(target, s, t, r);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord3(TextureUnit target, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord3(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, double s, double t, double r, double q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.MultiTexCoord4(target, s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord4(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, float s, float t, float r, float q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.MultiTexCoord4(target, s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord4(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, int s, int t, int r, int q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.MultiTexCoord4(target, s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord4(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (s.GetType(), "s", s),
                    (t.GetType(), "t", t),
                    (r.GetType(), "r", r),
                    (q.GetType(), "q", q),
                }
            });

            GL.MultiTexCoord4(target, s, t, r, q);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoord4(TextureUnit target, Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoord4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (v.GetType(), "v", v),
                }
            });

            GL.MultiTexCoord4(target, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP1(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP1(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP2(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP2(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP3(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP3(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP4(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint coords)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiTexCoordP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (type.GetType(), "type", type),
                    (coords.GetType(), "coords", coords),
                }
            });

            GL.MultiTexCoordP4(texture, type, coords);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultMatrix(Double[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.MultMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LoadMatrix(Single[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LoadMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.LoadMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LoadName(int name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LoadName",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                }
            });

            GL.LoadName(name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LoadName(uint name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LoadName",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                }
            });

            GL.LoadName(name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LoadTransposeMatrix(Double[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LoadTransposeMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.LoadTransposeMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LoadTransposeMatrix(Single[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LoadTransposeMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.LoadTransposeMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LogicOp(LogicOp opcode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LogicOp",
                CallParams = new(Type type, string name, object value)[]
                {
                    (opcode.GetType(), "opcode", opcode),
                }
            });

            GL.LogicOp(opcode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Map1(MapTarget target, double u1, double u2, int stride, int order, Double[] points)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Map1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                    (stride.GetType(), "stride", stride),
                    (order.GetType(), "order", order),
                    (points.GetType(), "points", points),
                }
            });

            GL.Map1(target, u1, u2, stride, order, points);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Map1(MapTarget target, float u1, float u2, int stride, int order, Single[] points)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Map1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                    (stride.GetType(), "stride", stride),
                    (order.GetType(), "order", order),
                    (points.GetType(), "points", points),
                }
            });

            GL.Map1(target, u1, u2, stride, order, points);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, Double[] points)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Map2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                    (ustride.GetType(), "ustride", ustride),
                    (uorder.GetType(), "uorder", uorder),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (vstride.GetType(), "vstride", vstride),
                    (vorder.GetType(), "vorder", vorder),
                    (points.GetType(), "points", points),
                }
            });

            GL.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, Single[] points)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Map2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                    (ustride.GetType(), "ustride", ustride),
                    (uorder.GetType(), "uorder", uorder),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                    (vstride.GetType(), "vstride", vstride),
                    (vorder.GetType(), "vorder", vorder),
                    (points.GetType(), "points", points),
                }
            });

            GL.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public IntPtr MapBuffer(BufferTarget target, BufferAccess access)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (access.GetType(), "access", access),
                }
            });

            var result = GL.MapBuffer(target, access);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public IntPtr MapBufferRange(BufferTarget target, IntPtr offset, int length, BufferAccessMask access)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                    (access.GetType(), "access", access),
                }
            });

            var result = GL.MapBufferRange(target, offset, length, access);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                    (access.GetType(), "access", access),
                }
            });

            var result = GL.MapBufferRange(target, offset, length, access);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void MapGrid1(int un, double u1, double u2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapGrid1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (un.GetType(), "un", un),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                }
            });

            GL.MapGrid1(un, u1, u2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MapGrid1(int un, float u1, float u2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapGrid1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (un.GetType(), "un", un),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                }
            });

            GL.MapGrid1(un, u1, u2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MapGrid2(int un, double u1, double u2, int vn, double v1, double v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapGrid2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (un.GetType(), "un", un),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                    (vn.GetType(), "vn", vn),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.MapGrid2(un, u1, u2, vn, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MapGrid2(int un, float u1, float u2, int vn, float v1, float v2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapGrid2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (un.GetType(), "un", un),
                    (u1.GetType(), "u1", u1),
                    (u2.GetType(), "u2", u2),
                    (vn.GetType(), "vn", vn),
                    (v1.GetType(), "v1", v1),
                    (v2.GetType(), "v2", v2),
                }
            });

            GL.MapGrid2(un, u1, u2, vn, v1, v2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public IntPtr MapNamedBuffer(int buffer, BufferAccess access)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapNamedBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (access.GetType(), "access", access),
                }
            });

            var result = GL.MapNamedBuffer(buffer, access);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public IntPtr MapNamedBuffer(uint buffer, BufferAccess access)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapNamedBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (access.GetType(), "access", access),
                }
            });

            var result = GL.MapNamedBuffer(buffer, access);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public IntPtr MapNamedBufferRange(int buffer, IntPtr offset, int length, BufferAccessMask access)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapNamedBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                    (access.GetType(), "access", access),
                }
            });

            var result = GL.MapNamedBufferRange(buffer, offset, length, access);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, int length, BufferAccessMask access)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MapNamedBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                    (access.GetType(), "access", access),
                }
            });

            var result = GL.MapNamedBufferRange(buffer, offset, length, access);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void Material(MaterialFace face, MaterialParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Material",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.Material(face, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Material(MaterialFace face, MaterialParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Material",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Material(face, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Material(MaterialFace face, MaterialParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Material",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.Material(face, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Material(MaterialFace face, MaterialParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Material",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Material(face, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MatrixMode(MatrixMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MatrixMode",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.MatrixMode(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MemoryBarrier(MemoryBarrierFlags barriers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MemoryBarrier",
                CallParams = new(Type type, string name, object value)[]
                {
                    (barriers.GetType(), "barriers", barriers),
                }
            });

            GL.MemoryBarrier(barriers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MemoryBarrierByRegion(MemoryBarrierRegionFlags barriers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MemoryBarrierByRegion",
                CallParams = new(Type type, string name, object value)[]
                {
                    (barriers.GetType(), "barriers", barriers),
                }
            });

            GL.MemoryBarrierByRegion(barriers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, bool sink)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Minmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (sink.GetType(), "sink", sink),
                }
            });

            GL.Minmax(target, internalformat, sink);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MinSampleShading(float value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MinSampleShading",
                CallParams = new(Type type, string name, object value)[]
                {
                    (value.GetType(), "value", value),
                }
            });

            GL.MinSampleShading(value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawArrays(PrimitiveType mode, Int32[] first, Int32[] count, int drawcount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (drawcount.GetType(), "drawcount", drawcount),
                }
            });

            GL.MultiDrawArrays(mode, first, count, drawcount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawArraysIndirect(mode, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawArraysIndirect(mode, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[,] indirect, int drawcount, int stride)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawArraysIndirect(mode, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[,,] indirect, int drawcount, int stride)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                    (drawcount.GetType(), "drawcount", drawcount),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.MultiDrawArraysIndirect(mode, indirect, drawcount, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElements(PrimitiveType mode, Int32[] count, DrawElementsType type, IntPtr indices, int drawcount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                }
            });

            GL.MultiDrawElements(mode, count, type, indices, drawcount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElements<T3>(PrimitiveType mode, Int32[] count, DrawElementsType type, T3[] indices, int drawcount)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                }
            });

            GL.MultiDrawElements(mode, count, type, indices, drawcount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElements<T3>(PrimitiveType mode, Int32[] count, DrawElementsType type, T3[,] indices, int drawcount)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                }
            });

            GL.MultiDrawElements(mode, count, type, indices, drawcount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void MultiDrawElements<T3>(PrimitiveType mode, Int32[] count, DrawElementsType type, T3[,,] indices, int drawcount)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "MultiDrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (drawcount.GetType(), "drawcount", drawcount),
                }
            });

            GL.MultiDrawElements(mode, count, type, indices, drawcount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer(int index, VertexAttribPointerParameter pname, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, T2[] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, T2[,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, T2[,,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer(uint index, VertexAttribPointerParameter pname, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, T2[] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, T2[,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, T2[,,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.GetVertexAttribPointer(index, pname, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Hint(HintTarget target, HintMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Hint",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.Hint(target, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Histogram(HistogramTarget target, int width, PixelInternalFormat internalformat, bool sink)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Histogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (width.GetType(), "width", width),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (sink.GetType(), "sink", sink),
                }
            });

            GL.Histogram(target, width, internalformat, sink);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Index(double c)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Index",
                CallParams = new(Type type, string name, object value)[]
                {
                    (c.GetType(), "c", c),
                }
            });

            GL.Index(c);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Index(float c)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Index",
                CallParams = new(Type type, string name, object value)[]
                {
                    (c.GetType(), "c", c),
                }
            });

            GL.Index(c);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Index(int c)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Index",
                CallParams = new(Type type, string name, object value)[]
                {
                    (c.GetType(), "c", c),
                }
            });

            GL.Index(c);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void IndexMask(int mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IndexMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.IndexMask(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void IndexMask(uint mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IndexMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.IndexMask(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void IndexPointer(IndexPointerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IndexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.IndexPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void IndexPointer<T2>(IndexPointerType type, int stride, T2[] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IndexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.IndexPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void IndexPointer<T2>(IndexPointerType type, int stride, T2[,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IndexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.IndexPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void IndexPointer<T2>(IndexPointerType type, int stride, T2[,,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IndexPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.IndexPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Index(short c)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Index",
                CallParams = new(Type type, string name, object value)[]
                {
                    (c.GetType(), "c", c),
                }
            });

            GL.Index(c);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Index(byte c)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Index",
                CallParams = new(Type type, string name, object value)[]
                {
                    (c.GetType(), "c", c),
                }
            });

            GL.Index(c);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InitNames()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InitNames",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.InitNames();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InterleavedArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (format.GetType(), "format", format),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.InterleavedArrays(format, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, T2[] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InterleavedArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (format.GetType(), "format", format),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.InterleavedArrays(format, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, T2[,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InterleavedArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (format.GetType(), "format", format),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.InterleavedArrays(format, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, T2[,,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InterleavedArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (format.GetType(), "format", format),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.InterleavedArrays(format, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateBufferData(int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.InvalidateBufferData(buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateBufferData(uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.InvalidateBufferData(buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateBufferSubData(int buffer, IntPtr offset, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.InvalidateBufferSubData(buffer, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateBufferSubData(int buffer, IntPtr offset, IntPtr length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.InvalidateBufferSubData(buffer, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateBufferSubData(uint buffer, IntPtr offset, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.InvalidateBufferSubData(buffer, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateBufferSubData(uint buffer, IntPtr offset, IntPtr length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.InvalidateBufferSubData(buffer, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (numAttachments.GetType(), "numAttachments", numAttachments),
                    (attachments.GetType(), "attachments", attachments),
                }
            });

            GL.InvalidateFramebuffer(target, numAttachments, attachments);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateNamedFramebufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (numAttachments.GetType(), "numAttachments", numAttachments),
                    (attachments.GetType(), "attachments", attachments),
                }
            });

            GL.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateNamedFramebufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (numAttachments.GetType(), "numAttachments", numAttachments),
                    (attachments.GetType(), "attachments", attachments),
                }
            });

            GL.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateNamedFramebufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (numAttachments.GetType(), "numAttachments", numAttachments),
                    (attachments.GetType(), "attachments", attachments),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateNamedFramebufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (numAttachments.GetType(), "numAttachments", numAttachments),
                    (attachments.GetType(), "attachments", attachments),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateSubFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (numAttachments.GetType(), "numAttachments", numAttachments),
                    (attachments.GetType(), "attachments", attachments),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateTexImage(int texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.InvalidateTexImage(texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateTexImage(uint texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.InvalidateTexImage(texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                }
            });

            GL.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "InvalidateTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                }
            });

            GL.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public bool IsBuffer(int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            var result = GL.IsBuffer(buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsBuffer(uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            var result = GL.IsBuffer(buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsEnabled(EnableCap cap)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsEnabled",
                CallParams = new(Type type, string name, object value)[]
                {
                    (cap.GetType(), "cap", cap),
                }
            });

            var result = GL.IsEnabled(cap);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsEnabled(IndexedEnableCap target, int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsEnabled",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            var result = GL.IsEnabled(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsEnabled(IndexedEnableCap target, uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsEnabled",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            var result = GL.IsEnabled(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsFramebuffer(int framebuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                }
            });

            var result = GL.IsFramebuffer(framebuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsFramebuffer(uint framebuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                }
            });

            var result = GL.IsFramebuffer(framebuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsList(int list)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsList",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                }
            });

            var result = GL.IsList(list);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsList(uint list)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsList",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                }
            });

            var result = GL.IsList(list);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsProgram(int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            var result = GL.IsProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsProgram(uint program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            var result = GL.IsProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsProgramPipeline(int pipeline)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                }
            });

            var result = GL.IsProgramPipeline(pipeline);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsProgramPipeline(uint pipeline)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                }
            });

            var result = GL.IsProgramPipeline(pipeline);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsQuery(int id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                }
            });

            var result = GL.IsQuery(id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsQuery(uint id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                }
            });

            var result = GL.IsQuery(id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsRenderbuffer(int renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            var result = GL.IsRenderbuffer(renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsRenderbuffer(uint renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            var result = GL.IsRenderbuffer(renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsSampler(int sampler)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsSampler",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                }
            });

            var result = GL.IsSampler(sampler);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsSampler(uint sampler)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsSampler",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                }
            });

            var result = GL.IsSampler(sampler);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsShader(int shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                }
            });

            var result = GL.IsShader(shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsShader(uint shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                }
            });

            var result = GL.IsShader(shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsSync(IntPtr sync)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsSync",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sync.GetType(), "sync", sync),
                }
            });

            var result = GL.IsSync(sync);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsTexture(int texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                }
            });

            var result = GL.IsTexture(texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsTexture(uint texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                }
            });

            var result = GL.IsTexture(texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsTransformFeedback(int id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                }
            });

            var result = GL.IsTransformFeedback(id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsTransformFeedback(uint id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                }
            });

            var result = GL.IsTransformFeedback(id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsVertexArray(int array)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (array.GetType(), "array", array),
                }
            });

            var result = GL.IsVertexArray(array);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool IsVertexArray(uint array)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "IsVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (array.GetType(), "array", array),
                }
            });

            var result = GL.IsVertexArray(array);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void Light(LightName light, LightParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Light",
                CallParams = new(Type type, string name, object value)[]
                {
                    (light.GetType(), "light", light),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.Light(light, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Light(LightName light, LightParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Light",
                CallParams = new(Type type, string name, object value)[]
                {
                    (light.GetType(), "light", light),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Light(light, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Light(LightName light, LightParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Light",
                CallParams = new(Type type, string name, object value)[]
                {
                    (light.GetType(), "light", light),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.Light(light, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Light(LightName light, LightParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Light",
                CallParams = new(Type type, string name, object value)[]
                {
                    (light.GetType(), "light", light),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Light(light, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LightModel(LightModelParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LightModel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.LightModel(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LightModel(LightModelParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LightModel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.LightModel(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LightModel(LightModelParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LightModel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.LightModel(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LightModel(LightModelParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LightModel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.LightModel(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LineStipple(int factor, short pattern)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LineStipple",
                CallParams = new(Type type, string name, object value)[]
                {
                    (factor.GetType(), "factor", factor),
                    (pattern.GetType(), "pattern", pattern),
                }
            });

            GL.LineStipple(factor, pattern);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LineStipple(int factor, ushort pattern)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LineStipple",
                CallParams = new(Type type, string name, object value)[]
                {
                    (factor.GetType(), "factor", factor),
                    (pattern.GetType(), "pattern", pattern),
                }
            });

            GL.LineStipple(factor, pattern);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LineWidth(float width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LineWidth",
                CallParams = new(Type type, string name, object value)[]
                {
                    (width.GetType(), "width", width),
                }
            });

            GL.LineWidth(width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LinkProgram(int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LinkProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.LinkProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LinkProgram(uint program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LinkProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.LinkProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ListBase(int @base)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ListBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (@base.GetType(), "@base", @base),
                }
            });

            GL.ListBase(@base);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ListBase(uint @base)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ListBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (@base.GetType(), "@base", @base),
                }
            });

            GL.ListBase(@base);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void LoadIdentity()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LoadIdentity",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.LoadIdentity();

            //if ((_error = GL.GetError()) != ErrorCode.NoError)
            //    throw new InvalidOperationException(_error.ToString());
        }

        public void LoadMatrix(Double[] m)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "LoadMatrix",
                CallParams = new(Type type, string name, object value)[]
                {
                    (m.GetType(), "m", m),
                }
            });

            GL.LoadMatrix(m);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage<T11>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[] pixels)
                    where T11 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage<T11>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,] pixels)
                    where T11 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage<T11>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,,] pixels)
                    where T11 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[] pixels)
                    where T11 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,] pixels)
                    where T11 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,,] pixels)
                    where T11 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTransformFeedback(int xfb, TransformFeedbackIndexedParameter pname, int index, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (pname.GetType(), "pname", pname),
                    (index.GetType(), "index", index),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetTransformFeedback(xfb, pname, index, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTransformFeedback(uint xfb, TransformFeedbackIndexedParameter pname, uint index, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (pname.GetType(), "pname", pname),
                    (index.GetType(), "index", index),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetTransformFeedback(xfb, pname, index, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTransformFeedbacki64_(int xfb, TransformFeedbackIndexedParameter pname, int index, Int64[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTransformFeedbacki64_",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (pname.GetType(), "pname", pname),
                    (index.GetType(), "index", index),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetTransformFeedbacki64_(xfb, pname, index, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTransformFeedbacki64_(uint xfb, TransformFeedbackIndexedParameter pname, uint index, Int64[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTransformFeedbacki64_",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (pname.GetType(), "pname", pname),
                    (index.GetType(), "index", index),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetTransformFeedbacki64_(xfb, pname, index, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTransformFeedback(int xfb, TransformFeedbackParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetTransformFeedback(xfb, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTransformFeedback(uint xfb, TransformFeedbackParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (xfb.GetType(), "xfb", xfb),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetTransformFeedback(xfb, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GetUniformBlockIndex(int program, string uniformBlockName)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniformBlockIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformBlockName.GetType(), "uniformBlockName", uniformBlockName),
                }
            });

            var result = GL.GetUniformBlockIndex(program, uniformBlockName);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetUniformBlockIndex(uint program, string uniformBlockName)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniformBlockIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformBlockName.GetType(), "uniformBlockName", uniformBlockName),
                }
            });

            var result = GL.GetUniformBlockIndex(program, uniformBlockName);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetUniform(int program, int location, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetUniform(program, location, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetUniform(uint program, int location, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetUniform(program, location, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetUniform(int program, int location, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetUniform(program, location, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetUniform(uint program, int location, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetUniform(program, location, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetUniformIndices(int program, int uniformCount, String[] uniformNames, Int32[] uniformIndices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniformIndices",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformCount.GetType(), "uniformCount", uniformCount),
                    (uniformNames.GetType(), "uniformNames", uniformNames),
                    (uniformIndices.GetType(), "uniformIndices", uniformIndices),
                }
            });

            GL.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetUniformIndices(uint program, int uniformCount, String[] uniformNames, UInt32[] uniformIndices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniformIndices",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformCount.GetType(), "uniformCount", uniformCount),
                    (uniformNames.GetType(), "uniformNames", uniformNames),
                    (uniformIndices.GetType(), "uniformIndices", uniformIndices),
                }
            });

            GL.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetUniform(int program, int location, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetUniform(program, location, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetUniform(uint program, int location, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetUniform(program, location, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GetUniformLocation(int program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniformLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetUniformLocation(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetUniformLocation(uint program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniformLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetUniformLocation(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetUniform(uint program, int location, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetUniform(program, location, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexArrayIndexed64(int vaobj, int index, VertexArrayIndexed64Parameter pname, Int64[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexArrayIndexed64",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetVertexArrayIndexed64(vaobj, index, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexArrayIndexed64(uint vaobj, uint index, VertexArrayIndexed64Parameter pname, Int64[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexArrayIndexed64",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetVertexArrayIndexed64(vaobj, index, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexArrayIndexed(int vaobj, int index, VertexArrayIndexedParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexArrayIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetVertexArrayIndexed(vaobj, index, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexArrayIndexed(uint vaobj, uint index, VertexArrayIndexedParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexArrayIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetVertexArrayIndexed(vaobj, index, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexArray(int vaobj, VertexArrayParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetVertexArray(vaobj, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexArray(uint vaobj, VertexArrayParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetVertexArray(vaobj, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttrib(int index, VertexAttribParameter pname, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttrib(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttrib(uint index, VertexAttribParameter pname, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttrib(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttrib(int index, VertexAttribParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttrib(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttrib(uint index, VertexAttribParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttrib(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttrib(int index, VertexAttribParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttrib(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttrib(uint index, VertexAttribParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttrib(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribL(int index, VertexAttribParameter pname, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribL",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttribL(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetVertexAttribL(uint index, VertexAttribParameter pname, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetVertexAttribL",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetVertexAttribL(index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, T3[,,] row, T4[,,] column, T5[,,] span)
                    where T3 : struct
                    where T4 : struct
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetSeparableFilter(target, format, type, row, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetShader(int shader, ShaderParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetShader(shader, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetShader(uint shader, ShaderParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetShader(shader, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, Int32[] range, Int32[] precision)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetShaderPrecisionFormat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shadertype.GetType(), "shadertype", shadertype),
                    (precisiontype.GetType(), "precisiontype", precisiontype),
                    (range.GetType(), "range", range),
                    (precision.GetType(), "precision", precision),
                }
            });

            GL.GetShaderPrecisionFormat(shadertype, precisiontype, range, precision);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public string GetString(StringName name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetString",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetString(name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public string GetString(StringNameIndexed name, int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetString",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                    (index.GetType(), "index", index),
                }
            });

            var result = GL.GetString(name, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public string GetString(StringNameIndexed name, uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetString",
                CallParams = new(Type type, string name, object value)[]
                {
                    (name.GetType(), "name", name),
                    (index.GetType(), "index", index),
                }
            });

            var result = GL.GetString(name, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetSubroutineIndex(int program, ShaderType shadertype, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSubroutineIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shadertype.GetType(), "shadertype", shadertype),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetSubroutineIndex(program, shadertype, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetSubroutineIndex(uint program, ShaderType shadertype, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSubroutineIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shadertype.GetType(), "shadertype", shadertype),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetSubroutineIndex(program, shadertype, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSubroutineUniformLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shadertype.GetType(), "shadertype", shadertype),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetSubroutineUniformLocation(program, shadertype, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSubroutineUniformLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shadertype.GetType(), "shadertype", shadertype),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetSubroutineUniformLocation(program, shadertype, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexEnv(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexEnv",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexEnv(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexGen(TextureCoordName coord, TextureGenParameter pname, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexGen(coord, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexGen(TextureCoordName coord, TextureGenParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexGen(coord, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexGen(TextureCoordName coord, TextureGenParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexGen",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexGen(coord, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTexImage(target, level, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, T4[] pixels)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTexImage(target, level, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, T4[,] pixels)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTexImage(target, level, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, T4[,,] pixels)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTexImage(target, level, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexLevelParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexLevelParameter(target, level, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexLevelParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexLevelParameter(target, level, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexParameter(TextureTarget target, GetTextureParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexParameterI(TextureTarget target, GetTextureParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexParameterI(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexParameterI(TextureTarget target, GetTextureParameter pname, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexParameterI(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTexParameter(TextureTarget target, GetTextureParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTexParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTexParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage<T5>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T5[] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage<T5>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage<T5>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,,] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage<T5>(uint texture, int level, PixelFormat format, PixelType type, int bufSize, T5[] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage<T5>(uint texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureImage<T5>(uint texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,,] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetTextureImage(texture, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureLevelParameter(int texture, int level, GetTextureParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureLevelParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureLevelParameter(texture, level, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureLevelParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureLevelParameter(texture, level, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureLevelParameter(int texture, int level, GetTextureParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureLevelParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureLevelParameter(texture, level, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureLevelParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureLevelParameter(texture, level, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureParameter(int texture, GetTextureParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureParameter(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureParameter(uint texture, GetTextureParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureParameter(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureParameterI(int texture, All pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureParameterI(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureParameterI(uint texture, All pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureParameterI(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureParameterI(uint texture, All pname, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureParameterI(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureParameter(int texture, GetTextureParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureParameter(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetTextureParameter(uint texture, GetTextureParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetTextureParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetTextureParameter(texture, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramInterface",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetProgramInterface(program, programInterface, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetProgram(int program, GetProgramParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetProgram(program, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetProgram(uint program, GetProgramParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetProgram(program, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetProgramPipeline(pipeline, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetProgramPipeline(pipeline, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramResourceIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetProgramResourceIndex(program, programInterface, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetProgramResourceIndex(uint program, ProgramInterface programInterface, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramResourceIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetProgramResourceIndex(program, programInterface, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramResourceLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetProgramResourceLocation(program, programInterface, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetProgramResourceLocation(uint program, ProgramInterface programInterface, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramResourceLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetProgramResourceLocation(program, programInterface, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramResourceLocationIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetProgramResourceLocationIndex(program, programInterface, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramResourceLocationIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetProgramResourceLocationIndex(program, programInterface, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryIndexed(target, index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryIndexed(target, index, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQuery(QueryTarget target, GetQueryParam pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQuery(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQueryObject(int id, GetQueryObjectParam pname, Int64[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryObject",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryObject(id, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQueryObject(uint id, GetQueryObjectParam pname, Int64[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryObject",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryObject(id, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQueryObject(int id, GetQueryObjectParam pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryObject",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryObject(id, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQueryObject(uint id, GetQueryObjectParam pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryObject",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryObject(id, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQueryObject(uint id, GetQueryObjectParam pname, UInt64[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryObject",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryObject(id, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetQueryObject(uint id, GetQueryObjectParam pname, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetQueryObject",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetQueryObject(id, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetRenderbufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetRenderbufferParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSamplerParameter(int sampler, SamplerParameterName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetSamplerParameter(sampler, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSamplerParameter(uint sampler, SamplerParameterName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetSamplerParameter(sampler, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSamplerParameterI(int sampler, All pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSamplerParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetSamplerParameterI(sampler, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSamplerParameterI(uint sampler, All pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSamplerParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetSamplerParameterI(sampler, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSamplerParameterI(uint sampler, All pname, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSamplerParameterI",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetSamplerParameterI(sampler, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSamplerParameter(int sampler, SamplerParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetSamplerParameter(sampler, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSamplerParameter(uint sampler, SamplerParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSamplerParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sampler.GetType(), "sampler", sampler),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetSamplerParameter(sampler, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetSeparableFilter(target, format, type, row, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, T3[] row, T4[] column, T5[] span)
                    where T3 : struct
                    where T4 : struct
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetSeparableFilter(target, format, type, row, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, T3[,] row, T4[,] column, T5[,] span)
                    where T3 : struct
                    where T4 : struct
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (row.GetType(), "row", row),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetSeparableFilter(target, format, type, row, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnUniform(uint program, int location, int bufSize, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetnUniform(program, location, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnUniform(int program, int location, int bufSize, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetnUniform(program, location, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnUniform(uint program, int location, int bufSize, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetnUniform(program, location, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnUniform(int program, int location, int bufSize, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetnUniform(program, location, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnUniform(uint program, int location, int bufSize, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetnUniform(program, location, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnUniform(uint program, int location, int bufSize, UInt32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetnUniform(program, location, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, Int32[] length, StringBuilder label)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetObjectLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (identifier.GetType(), "identifier", identifier),
                    (name.GetType(), "name", name),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.GetObjectLabel(identifier, name, bufSize, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, Int32[] length, StringBuilder label)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetObjectLabel",
                CallParams = new(Type type, string name, object value)[]
                {
                    (identifier.GetType(), "identifier", identifier),
                    (name.GetType(), "name", name),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (length.GetType(), "length", length),
                    (label.GetType(), "label", label),
                }
            });

            GL.GetObjectLabel(identifier, name, bufSize, length, label);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public float GetPixelMap(PixelMap map)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                }
            });

            var result = GL.GetPixelMap(map);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetPixelMap(PixelMap map, Single[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetPixelMap(map, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPixelMap(PixelMap map, Int32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetPixelMap(map, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPixelMap(PixelMap map, UInt32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetPixelMap(map, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPixelMap(PixelMap map, Int16[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetPixelMap(map, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPixelMap(PixelMap map, UInt16[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetPixelMap(map, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPixelMapx(OesFixedPoint map, int size, Int32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPixelMapx",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (size.GetType(), "size", size),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetPixelMapx(map, size, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPointer(GetPointervPName pname, IntPtr @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetPointer(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPointer<T1>(GetPointervPName pname, T1[] @params)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetPointer(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPointer<T1>(GetPointervPName pname, T1[,] @params)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetPointer(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetPointer<T1>(GetPointervPName pname, T1[,,] @params)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetPointer(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public byte GetPolygonStipple()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPolygonStipple",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GetPolygonStipple();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetPolygonStipple(Byte[] mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetPolygonStipple",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.GetPolygonStipple(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetProgramInterface",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (programInterface.GetType(), "programInterface", programInterface),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetProgramInterface(program, programInterface, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData(int buffer, IntPtr offset, int size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData(uint buffer, IntPtr offset, int size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetNamedBufferSubData(buffer, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, FramebufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedFramebufferAttachmentParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, FramebufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedFramebufferAttachmentParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (attachment.GetType(), "attachment", attachment),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedFramebufferParameter(int framebuffer, FramebufferDefaultParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedFramebufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetNamedFramebufferParameter(framebuffer, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedFramebufferParameter(uint framebuffer, FramebufferDefaultParameter pname, Int32[] param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedFramebufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.GetNamedFramebufferParameter(framebuffer, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedRenderbufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedRenderbufferParameter(renderbuffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedRenderbufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedRenderbufferParameter(renderbuffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnColorTable(Version45 target, Version45 format, Version45 type, int bufSize, IntPtr table)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetnColorTable(target, format, type, bufSize, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnColorTable<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[] table)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetnColorTable(target, format, type, bufSize, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnColorTable<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,] table)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetnColorTable(target, format, type, bufSize, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnColorTable<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,,] table)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetnColorTable(target, format, type, bufSize, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnCompressedTexImage(Version45 target, int lod, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (lod.GetType(), "lod", lod),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnCompressedTexImage(target, lod, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnCompressedTexImage<T3>(Version45 target, int lod, int bufSize, T3[] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (lod.GetType(), "lod", lod),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnCompressedTexImage(target, lod, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnCompressedTexImage<T3>(Version45 target, int lod, int bufSize, T3[,] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (lod.GetType(), "lod", lod),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnCompressedTexImage(target, lod, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnCompressedTexImage<T3>(Version45 target, int lod, int bufSize, T3[,,] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (lod.GetType(), "lod", lod),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnCompressedTexImage(target, lod, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnConvolutionFilter(Version45 target, Version45 format, Version45 type, int bufSize, IntPtr image)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetnConvolutionFilter(target, format, type, bufSize, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnConvolutionFilter<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[] image)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetnConvolutionFilter(target, format, type, bufSize, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnConvolutionFilter<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,] image)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetnConvolutionFilter(target, format, type, bufSize, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnConvolutionFilter<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,,] image)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetnConvolutionFilter(target, format, type, bufSize, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnHistogram(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, IntPtr values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnHistogram(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnHistogram<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[] values)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnHistogram(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnHistogram<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,] values)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnHistogram(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnHistogram<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,,] values)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnHistogram(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnMap(Version45 target, Version45 query, int bufSize, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (query.GetType(), "query", query),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (v.GetType(), "v", v),
                }
            });

            GL.GetnMap(target, query, bufSize, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnMap(Version45 target, Version45 query, int bufSize, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (query.GetType(), "query", query),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (v.GetType(), "v", v),
                }
            });

            GL.GetnMap(target, query, bufSize, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnMap(Version45 target, Version45 query, int bufSize, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (query.GetType(), "query", query),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (v.GetType(), "v", v),
                }
            });

            GL.GetnMap(target, query, bufSize, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnMinmax(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, IntPtr values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnMinmax(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnMinmax<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[] values)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnMinmax(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnMinmax<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,] values)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnMinmax(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnMinmax<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,,] values)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnMinmax(target, reset, format, type, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnPixelMap(Version45 map, int bufSize, Single[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnPixelMap(map, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnPixelMap(Version45 map, int bufSize, Int32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnPixelMap(map, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnPixelMap(Version45 map, int bufSize, UInt32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnPixelMap(map, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnPixelMap(Version45 map, int bufSize, Int16[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnPixelMap(map, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnPixelMap(Version45 map, int bufSize, UInt16[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnPixelMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (map.GetType(), "map", map),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetnPixelMap(map, bufSize, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public byte GetnPolygonStipple()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnPolygonStipple",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GetnPolygonStipple();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetnPolygonStipple(int bufSize, Byte[] pattern)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnPolygonStipple",
                CallParams = new(Type type, string name, object value)[]
                {
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pattern.GetType(), "pattern", pattern),
                }
            });

            GL.GetnPolygonStipple(bufSize, pattern);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnSeparableFilter(Version45 target, Version45 format, Version45 type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (rowBufSize.GetType(), "rowBufSize", rowBufSize),
                    (row.GetType(), "row", row),
                    (columnBufSize.GetType(), "columnBufSize", columnBufSize),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnSeparableFilter<T4, T6, T7>(Version45 target, Version45 format, Version45 type, int rowBufSize, T4[] row, int columnBufSize, T6[] column, T7[] span)
                    where T4 : struct
                    where T6 : struct
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (rowBufSize.GetType(), "rowBufSize", rowBufSize),
                    (row.GetType(), "row", row),
                    (columnBufSize.GetType(), "columnBufSize", columnBufSize),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnSeparableFilter<T4, T6, T7>(Version45 target, Version45 format, Version45 type, int rowBufSize, T4[,] row, int columnBufSize, T6[,] column, T7[,] span)
                    where T4 : struct
                    where T6 : struct
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (rowBufSize.GetType(), "rowBufSize", rowBufSize),
                    (row.GetType(), "row", row),
                    (columnBufSize.GetType(), "columnBufSize", columnBufSize),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnSeparableFilter<T4, T6, T7>(Version45 target, Version45 format, Version45 type, int rowBufSize, T4[,,] row, int columnBufSize, T6[,,] column, T7[,,] span)
                    where T4 : struct
                    where T6 : struct
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnSeparableFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (rowBufSize.GetType(), "rowBufSize", rowBufSize),
                    (row.GetType(), "row", row),
                    (columnBufSize.GetType(), "columnBufSize", columnBufSize),
                    (column.GetType(), "column", column),
                    (span.GetType(), "span", span),
                }
            });

            GL.GetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnTexImage(Version45 target, int level, Version45 format, Version45 type, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnTexImage(target, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnTexImage<T5>(Version45 target, int level, Version45 format, Version45 type, int bufSize, T5[] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnTexImage(target, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnTexImage<T5>(Version45 target, int level, Version45 format, Version45 type, int bufSize, T5[,] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnTexImage(target, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnTexImage<T5>(Version45 target, int level, Version45 format, Version45 type, int bufSize, T5[,,] pixels)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetnTexImage(target, level, format, type, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetnUniform(int program, int location, int bufSize, Double[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetnUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (location.GetType(), "location", location),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetnUniform(program, location, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFramebufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetFramebufferParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public ResetStatus GetGraphicsResetStatus()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetGraphicsResetStatus",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GetGraphicsResetStatus();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, IntPtr values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetHistogram(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, T4[] values)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetHistogram(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, T4[,] values)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetHistogram(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, T4[,,] values)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetHistogram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetHistogram(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetHistogramParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetHistogramParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetHistogramParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetHistogramParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetInteger64(GetIndexedPName target, int index, Int64[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger64",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetInteger64(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetInteger64(GetIndexedPName target, uint index, Int64[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger64",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetInteger64(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public long GetInteger64(GetPName pname)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger64",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                }
            });

            var result = GL.GetInteger64(pname);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetInteger64(GetPName pname, Int64[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger64",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetInteger64(pname, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetInteger(GetIndexedPName target, int index, Int32[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetInteger(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetInteger(GetIndexedPName target, uint index, Int32[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetInteger(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GetInteger(GetPName pname)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                }
            });

            var result = GL.GetInteger(pname);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetInteger(GetPName pname, Int32[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInteger",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetInteger(pname, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, Int64[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInternalformat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (pname.GetType(), "pname", pname),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetInternalformat(target, internalformat, pname, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetInternalformat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (pname.GetType(), "pname", pname),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetInternalformat(target, internalformat, pname, bufSize, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetLight(LightName light, LightParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetLight",
                CallParams = new(Type type, string name, object value)[]
                {
                    (light.GetType(), "light", light),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetLight(light, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetLight(LightName light, LightParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetLight",
                CallParams = new(Type type, string name, object value)[]
                {
                    (light.GetType(), "light", light),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetLight(light, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMap(MapTarget target, GetMapQuery query, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (query.GetType(), "query", query),
                    (v.GetType(), "v", v),
                }
            });

            GL.GetMap(target, query, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMap(MapTarget target, GetMapQuery query, Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (query.GetType(), "query", query),
                    (v.GetType(), "v", v),
                }
            });

            GL.GetMap(target, query, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMap(MapTarget target, GetMapQuery query, Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (query.GetType(), "query", query),
                    (v.GetType(), "v", v),
                }
            });

            GL.GetMap(target, query, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMaterial(MaterialFace face, MaterialParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMaterial",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetMaterial(face, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMaterial(MaterialFace face, MaterialParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMaterial",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetMaterial(face, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, IntPtr values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetMinmax(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, T4[] values)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetMinmax(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, T4[,] values)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetMinmax(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, T4[,,] values)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMinmax",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (reset.GetType(), "reset", reset),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetMinmax(target, reset, format, type, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMinmaxParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetMinmaxParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMinmaxParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetMinmaxParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMultisample(GetMultisamplePName pname, int index, Single[] val)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (index.GetType(), "index", index),
                    (val.GetType(), "val", val),
                }
            });

            GL.GetMultisample(pname, index, val);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetMultisample(GetMultisamplePName pname, uint index, Single[] val)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetMultisample",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (index.GetType(), "index", index),
                    (val.GetType(), "val", val),
                }
            });

            GL.GetMultisample(pname, index, val);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferParameter(int buffer, BufferParameterName pname, Int64[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferParameter(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferParameter(uint buffer, BufferParameterName pname, Int64[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferParameter(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferParameter(int buffer, BufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferParameter(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferParameter(uint buffer, BufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferParameter(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer(int buffer, BufferPointer pname, IntPtr @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer<T2>(int buffer, BufferPointer pname, T2[] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer<T2>(int buffer, BufferPointer pname, T2[,] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer<T2>(int buffer, BufferPointer pname, T2[,,] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer(uint buffer, BufferPointer pname, IntPtr @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer<T2>(uint buffer, BufferPointer pname, T2[] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer<T2>(uint buffer, BufferPointer pname, T2[,] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetNamedBufferPointer<T2>(uint buffer, BufferPointer pname, T2[,,] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetNamedBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetNamedBufferPointer(buffer, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetClipPlane(ClipPlaneName plane, Double[] equation)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetClipPlane",
                CallParams = new(Type type, string name, object value)[]
                {
                    (plane.GetType(), "plane", plane),
                    (equation.GetType(), "equation", equation),
                }
            });

            GL.GetClipPlane(plane, equation);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr table)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetColorTable(target, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, T3[] table)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetColorTable(target, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, T3[,] table)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetColorTable(target, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, T3[,,] table)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.GetColorTable(target, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetColorTableParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetColorTableParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetColorTableParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetColorTableParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTexImage(TextureTarget target, int level, IntPtr img)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (img.GetType(), "img", img),
                }
            });

            GL.GetCompressedTexImage(target, level, img);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTexImage<T2>(TextureTarget target, int level, T2[] img)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (img.GetType(), "img", img),
                }
            });

            GL.GetCompressedTexImage(target, level, img);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTexImage<T2>(TextureTarget target, int level, T2[,] img)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (img.GetType(), "img", img),
                }
            });

            GL.GetCompressedTexImage(target, level, img);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTexImage<T2>(TextureTarget target, int level, T2[,,] img)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (img.GetType(), "img", img),
                }
            });

            GL.GetCompressedTexImage(target, level, img);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage<T3>(int texture, int level, int bufSize, T3[] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage<T3>(int texture, int level, int bufSize, T3[,] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage<T3>(int texture, int level, int bufSize, T3[,,] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, T3[] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, T3[,] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, T3[,,] pixels)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureImage(texture, level, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage<T9>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage<T9>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage<T9>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,,] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,,] pixels)
                    where T9 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetCompressedTextureSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, IntPtr image)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetConvolutionFilter(target, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, T3[] image)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetConvolutionFilter(target, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, T3[,] image)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetConvolutionFilter(target, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, T3[,,] image)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetConvolutionFilter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.GetConvolutionFilter(target, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetConvolutionParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetConvolutionParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetConvolutionParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetConvolutionParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GetDebugMessageLog(int count, int bufSize, DebugSource[] sources, DebugType[] types, Int32[] ids, DebugSeverity[] severities, Int32[] lengths, StringBuilder messageLog)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetDebugMessageLog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (sources.GetType(), "sources", sources),
                    (types.GetType(), "types", types),
                    (ids.GetType(), "ids", ids),
                    (severities.GetType(), "severities", severities),
                    (lengths.GetType(), "lengths", lengths),
                    (messageLog.GetType(), "messageLog", messageLog),
                }
            });

            var result = GL.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, UInt32[] ids, DebugSeverity[] severities, Int32[] lengths, StringBuilder messageLog)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetDebugMessageLog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (bufSize.GetType(), "bufSize", bufSize),
                    (sources.GetType(), "sources", sources),
                    (types.GetType(), "types", types),
                    (ids.GetType(), "ids", ids),
                    (severities.GetType(), "severities", severities),
                    (lengths.GetType(), "lengths", lengths),
                    (messageLog.GetType(), "messageLog", messageLog),
                }
            });

            var result = GL.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetDouble(GetIndexedPName target, int index, Double[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetDouble",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetDouble(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetDouble(GetIndexedPName target, uint index, Double[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetDouble",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetDouble(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public double GetDouble(GetPName pname)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetDouble",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                }
            });

            var result = GL.GetDouble(pname);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetDouble(GetPName pname, Double[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetDouble",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetDouble(pname, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public ErrorCode GetError()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetError",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GetError();

            return result;
        }

        public void GetFloat(GetIndexedPName target, int index, Single[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFloat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetFloat(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetFloat(GetIndexedPName target, uint index, Single[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFloat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetFloat(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public float GetFloat(GetPName pname)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFloat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                }
            });

            var result = GL.GetFloat(pname);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetFloat(GetPName pname, Single[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFloat",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetFloat(pname, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GetFragDataIndex(int program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFragDataIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetFragDataIndex(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetFragDataIndex(uint program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFragDataIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetFragDataIndex(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetFragDataLocation(int program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFragDataLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetFragDataLocation(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetFragDataLocation(uint program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFragDataLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetFragDataLocation(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetFramebufferAttachmentParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetFramebufferAttachmentParameter(target, attachment, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenProgramPipelines(int n, UInt32[] pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenProgramPipelines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.GenProgramPipelines(n, pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenQuery()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenQuery();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenQueries(int n, Int32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenQueries",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.GenQueries(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenQueries(int n, UInt32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenQueries",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.GenQueries(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenRenderbuffer()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenRenderbuffer();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenRenderbuffers(int n, Int32[] renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenRenderbuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.GenRenderbuffers(n, renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenRenderbuffers(int n, UInt32[] renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenRenderbuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.GenRenderbuffers(n, renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenSampler()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenSampler",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenSampler();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenSamplers(int count, Int32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.GenSamplers(count, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenSamplers(int count, UInt32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.GenSamplers(count, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenTexture()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenTexture();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenTextures(int n, Int32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.GenTextures(n, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenTextures(int n, UInt32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.GenTextures(n, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenTransformFeedback()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenTransformFeedback();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenTransformFeedbacks(int n, Int32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenTransformFeedbacks",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.GenTransformFeedbacks(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenTransformFeedbacks(int n, UInt32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenTransformFeedbacks",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.GenTransformFeedbacks(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenVertexArray()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenVertexArray();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenVertexArrays(int n, Int32[] arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenVertexArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.GenVertexArrays(n, arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenVertexArrays(int n, UInt32[] arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenVertexArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.GenVertexArrays(n, arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveAtomicCounterBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (bufferIndex.GetType(), "bufferIndex", bufferIndex),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveAtomicCounterBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (bufferIndex.GetType(), "bufferIndex", bufferIndex),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, Int32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveSubroutineUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shadertype.GetType(), "shadertype", shadertype),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetActiveSubroutineUniform(program, shadertype, index, pname, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, Int32[] values)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveSubroutineUniform",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shadertype.GetType(), "shadertype", shadertype),
                    (index.GetType(), "index", index),
                    (pname.GetType(), "pname", pname),
                    (values.GetType(), "values", values),
                }
            });

            GL.GetActiveSubroutineUniform(program, shadertype, index, pname, values);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveUniformBlock",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformBlockIndex.GetType(), "uniformBlockIndex", uniformBlockIndex),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetActiveUniformBlock(program, uniformBlockIndex, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveUniformBlock",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformBlockIndex.GetType(), "uniformBlockIndex", uniformBlockIndex),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetActiveUniformBlock(program, uniformBlockIndex, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveUniforms(int program, int uniformCount, Int32[] uniformIndices, ActiveUniformParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveUniforms",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformCount.GetType(), "uniformCount", uniformCount),
                    (uniformIndices.GetType(), "uniformIndices", uniformIndices),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetActiveUniforms(program, uniformCount, uniformIndices, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetActiveUniforms(uint program, int uniformCount, UInt32[] uniformIndices, ActiveUniformParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetActiveUniforms",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (uniformCount.GetType(), "uniformCount", uniformCount),
                    (uniformIndices.GetType(), "uniformIndices", uniformIndices),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetActiveUniforms(program, uniformCount, uniformIndices, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GetAttribLocation(int program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetAttribLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetAttribLocation(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GetAttribLocation(uint program, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetAttribLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (name.GetType(), "name", name),
                }
            });

            var result = GL.GetAttribLocation(program, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetBoolean(GetIndexedPName target, int index, bool[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBoolean",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBoolean(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBoolean(GetIndexedPName target, uint index, bool[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBoolean",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBoolean(target, index, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public bool GetBoolean(GetPName pname)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBoolean",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                }
            });

            var result = GL.GetBoolean(pname);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GetBoolean(GetPName pname, bool[] data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBoolean",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBoolean(pname, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferParameter(BufferTarget target, BufferParameterName pname, Int64[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetBufferParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferParameter(BufferTarget target, BufferParameterName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetBufferParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferPointer(BufferTarget target, BufferPointer pname, IntPtr @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetBufferPointer(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, T2[] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetBufferPointer(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, T2[,] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetBufferPointer(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, T2[,,] @params)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.GetBufferPointer(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GetBufferSubData(BufferTarget target, IntPtr offset, int size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GetBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.GetBufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,] indices, int basevertex)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,,] indices, int basevertex)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedback(PrimitiveType mode, int id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                }
            });

            GL.DrawTransformFeedback(mode, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedback(PrimitiveType mode, uint id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                }
            });

            GL.DrawTransformFeedback(mode, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedbackInstanced(PrimitiveType mode, int id, int instancecount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedbackInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawTransformFeedbackInstanced(mode, id, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedbackInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawTransformFeedbackInstanced(mode, id, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedbackStream(PrimitiveType mode, int id, int stream)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedbackStream",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                    (stream.GetType(), "stream", stream),
                }
            });

            GL.DrawTransformFeedbackStream(mode, id, stream);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedbackStream",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                    (stream.GetType(), "stream", stream),
                }
            });

            GL.DrawTransformFeedbackStream(mode, id, stream);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, int id, int stream, int instancecount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedbackStreamInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                    (stream.GetType(), "stream", stream),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawTransformFeedbackStreamInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (id.GetType(), "id", id),
                    (stream.GetType(), "stream", stream),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EdgeFlag(bool flag)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EdgeFlag",
                CallParams = new(Type type, string name, object value)[]
                {
                    (flag.GetType(), "flag", flag),
                }
            });

            GL.EdgeFlag(flag);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EdgeFlagPointer(int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EdgeFlagPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.EdgeFlagPointer(stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EdgeFlagPointer<T1>(int stride, T1[] pointer)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EdgeFlagPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.EdgeFlagPointer(stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EdgeFlagPointer<T1>(int stride, T1[,] pointer)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EdgeFlagPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.EdgeFlagPointer(stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EdgeFlagPointer<T1>(int stride, T1[,,] pointer)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EdgeFlagPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.EdgeFlagPointer(stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Enable(EnableCap cap)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Enable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (cap.GetType(), "cap", cap),
                }
            });

            GL.Enable(cap);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EnableClientState(ArrayCap array)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EnableClientState",
                CallParams = new(Type type, string name, object value)[]
                {
                    (array.GetType(), "array", array),
                }
            });

            GL.EnableClientState(array);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Enable(IndexedEnableCap target, int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Enable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            GL.Enable(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Enable(IndexedEnableCap target, uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Enable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            GL.Enable(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EnableVertexArrayAttrib(int vaobj, int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EnableVertexArrayAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                }
            });

            GL.EnableVertexArrayAttrib(vaobj, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EnableVertexArrayAttrib(uint vaobj, uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EnableVertexArrayAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                }
            });

            GL.EnableVertexArrayAttrib(vaobj, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EnableVertexAttribArray(int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EnableVertexAttribArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                }
            });

            GL.EnableVertexAttribArray(index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EnableVertexAttribArray(uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EnableVertexAttribArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                }
            });

            GL.EnableVertexAttribArray(index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void End()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "End",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.End();

            //if ((_error = GL.GetError()) != ErrorCode.NoError)
            //    throw new InvalidOperationException(_error.ToString());
        }

        public void EndConditionalRender()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EndConditionalRender",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.EndConditionalRender();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EndList()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EndList",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.EndList();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EndQuery(QueryTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EndQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                }
            });

            GL.EndQuery(target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EndQueryIndexed(QueryTarget target, int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EndQueryIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            GL.EndQueryIndexed(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EndQueryIndexed(QueryTarget target, uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EndQueryIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            GL.EndQueryIndexed(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EndTransformFeedback()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EndTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.EndTransformFeedback();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalCoord1(double u)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (u.GetType(), "u", u),
                }
            });

            GL.EvalCoord1(u);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalCoord1(float u)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalCoord1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (u.GetType(), "u", u),
                }
            });

            GL.EvalCoord1(u);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalCoord2(double u, double v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (u.GetType(), "u", u),
                    (v.GetType(), "v", v),
                }
            });

            GL.EvalCoord2(u, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalCoord2(Double[] u)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (u.GetType(), "u", u),
                }
            });

            GL.EvalCoord2(u);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalCoord2(float u, float v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (u.GetType(), "u", u),
                    (v.GetType(), "v", v),
                }
            });

            GL.EvalCoord2(u, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalCoord2(Single[] u)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalCoord2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (u.GetType(), "u", u),
                }
            });

            GL.EvalCoord2(u);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalMesh1(MeshMode1 mode, int i1, int i2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalMesh1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (i1.GetType(), "i1", i1),
                    (i2.GetType(), "i2", i2),
                }
            });

            GL.EvalMesh1(mode, i1, i2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalMesh2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (i1.GetType(), "i1", i1),
                    (i2.GetType(), "i2", i2),
                    (j1.GetType(), "j1", j1),
                    (j2.GetType(), "j2", j2),
                }
            });

            GL.EvalMesh2(mode, i1, i2, j1, j2);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalPoint1(int i)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalPoint1",
                CallParams = new(Type type, string name, object value)[]
                {
                    (i.GetType(), "i", i),
                }
            });

            GL.EvalPoint1(i);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void EvalPoint2(int i, int j)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "EvalPoint2",
                CallParams = new(Type type, string name, object value)[]
                {
                    (i.GetType(), "i", i),
                    (j.GetType(), "j", j),
                }
            });

            GL.EvalPoint2(i, j);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FeedbackBuffer(int size, FeedbackType type, Single[] buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FeedbackBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.FeedbackBuffer(size, type, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public IntPtr FenceSync(SyncCondition condition, WaitSyncFlags flags)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FenceSync",
                CallParams = new(Type type, string name, object value)[]
                {
                    (condition.GetType(), "condition", condition),
                    (flags.GetType(), "flags", flags),
                }
            });

            var result = GL.FenceSync(condition, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void Finish()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Finish",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.Finish();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Flush()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Flush",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            GL.Flush();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FlushMappedBufferRange(BufferTarget target, IntPtr offset, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FlushMappedBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.FlushMappedBufferRange(target, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FlushMappedBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.FlushMappedBufferRange(target, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FlushMappedNamedBufferRange(int buffer, IntPtr offset, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FlushMappedNamedBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.FlushMappedNamedBufferRange(buffer, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, int length)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FlushMappedNamedBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (length.GetType(), "length", length),
                }
            });

            GL.FlushMappedNamedBufferRange(buffer, offset, length);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FogCoord(double coord)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FogCoord",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                }
            });

            GL.FogCoord(coord);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FogCoord(float coord)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FogCoord",
                CallParams = new(Type type, string name, object value)[]
                {
                    (coord.GetType(), "coord", coord),
                }
            });

            GL.FogCoord(coord);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FogCoordPointer(FogPointerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FogCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.FogCoordPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FogCoordPointer<T2>(FogPointerType type, int stride, T2[] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FogCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.FogCoordPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FogCoordPointer<T2>(FogPointerType type, int stride, T2[,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FogCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.FogCoordPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FogCoordPointer<T2>(FogPointerType type, int stride, T2[,,] pointer)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FogCoordPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.FogCoordPointer(type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Fog(FogParameter pname, float param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Fog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.Fog(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Fog(FogParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Fog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Fog(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Fog(FogParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Fog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.Fog(pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Fog(FogParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Fog",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.Fog(pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, int param)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (param.GetType(), "param", param),
                }
            });

            GL.FramebufferParameter(target, pname, param);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (renderbuffertarget.GetType(), "renderbuffertarget", renderbuffertarget),
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            GL.FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (renderbuffertarget.GetType(), "renderbuffertarget", renderbuffertarget),
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            GL.FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.FramebufferTexture(target, attachment, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.FramebufferTexture(target, attachment, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (textarget.GetType(), "textarget", textarget),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.FramebufferTexture1D(target, attachment, textarget, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (textarget.GetType(), "textarget", textarget),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.FramebufferTexture1D(target, attachment, textarget, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (textarget.GetType(), "textarget", textarget),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.FramebufferTexture2D(target, attachment, textarget, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (textarget.GetType(), "textarget", textarget),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                }
            });

            GL.FramebufferTexture2D(target, attachment, textarget, texture, level);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (textarget.GetType(), "textarget", textarget),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (zoffset.GetType(), "zoffset", zoffset),
                }
            });

            GL.FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTexture3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (textarget.GetType(), "textarget", textarget),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (zoffset.GetType(), "zoffset", zoffset),
                }
            });

            GL.FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTextureLayer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (layer.GetType(), "layer", layer),
                }
            });

            GL.FramebufferTextureLayer(target, attachment, texture, level, layer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FramebufferTextureLayer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (attachment.GetType(), "attachment", attachment),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (layer.GetType(), "layer", layer),
                }
            });

            GL.FramebufferTextureLayer(target, attachment, texture, level, layer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void FrontFace(FrontFaceDirection mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "FrontFace",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.FrontFace(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Frustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Frustum",
                CallParams = new(Type type, string name, object value)[]
                {
                    (left.GetType(), "left", left),
                    (right.GetType(), "right", right),
                    (bottom.GetType(), "bottom", bottom),
                    (top.GetType(), "top", top),
                    (zNear.GetType(), "zNear", zNear),
                    (zFar.GetType(), "zFar", zFar),
                }
            });

            GL.Frustum(left, right, bottom, top, zNear, zFar);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenBuffer()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenBuffer();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenBuffers(int n, Int32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.GenBuffers(n, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenBuffers(int n, UInt32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.GenBuffers(n, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenerateMipmap(GenerateMipmapTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenerateMipmap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                }
            });

            GL.GenerateMipmap(target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenerateTextureMipmap(int texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenerateTextureMipmap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.GenerateTextureMipmap(texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenerateTextureMipmap(uint texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenerateTextureMipmap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.GenerateTextureMipmap(texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenFramebuffer()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenFramebuffer();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenFramebuffers(int n, Int32[] framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenFramebuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.GenFramebuffers(n, framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void GenFramebuffers(int n, UInt32[] framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenFramebuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.GenFramebuffers(n, framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int GenLists(int range)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenLists",
                CallParams = new(Type type, string name, object value)[]
                {
                    (range.GetType(), "range", range),
                }
            });

            var result = GL.GenLists(range);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int GenProgramPipeline()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.GenProgramPipeline();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void GenProgramPipelines(int n, Int32[] pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "GenProgramPipelines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.GenProgramPipelines(n, pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, uint baseinstance)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, uint baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, uint baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, uint baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, int baseinstance)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int basevertex, int baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int basevertex, uint baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int basevertex, int baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int basevertex, uint baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int basevertex, int baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int basevertex, uint baseinstance)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseVertexBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (basevertex.GetType(), "basevertex", basevertex),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.DrawPixels(width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, T4[] pixels)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.DrawPixels(width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, T4[,] pixels)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.DrawPixels(width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, T4[,,] pixels)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (pixels.GetType(), "pixels", pixels),
                }
            });

            GL.DrawPixels(width, height, format, type, pixels);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[] indices)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,] indices)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,,] indices)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[] indices)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,] indices)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,,] indices)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawRangeElements(mode, start, end, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[] indices, int basevertex)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,] indices, int basevertex)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,,] indices, int basevertex)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[] indices, int basevertex)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawRangeElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (start.GetType(), "start", start),
                    (end.GetType(), "end", end),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthFunc(DepthFunction func)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthFunc",
                CallParams = new(Type type, string name, object value)[]
                {
                    (func.GetType(), "func", func),
                }
            });

            GL.DepthFunc(func);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthMask(bool flag)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (flag.GetType(), "flag", flag),
                }
            });

            GL.DepthMask(flag);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthRange(double near, double far)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (near.GetType(), "near", near),
                    (far.GetType(), "far", far),
                }
            });

            GL.DepthRange(near, far);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthRangeArray(int first, int count, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthRangeArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (v.GetType(), "v", v),
                }
            });

            GL.DepthRangeArray(first, count, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthRangeArray(uint first, int count, Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthRangeArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (v.GetType(), "v", v),
                }
            });

            GL.DepthRangeArray(first, count, v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthRange(float n, float f)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (f.GetType(), "f", f),
                }
            });

            GL.DepthRange(n, f);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthRangeIndexed(int index, double n, double f)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthRangeIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (n.GetType(), "n", n),
                    (f.GetType(), "f", f),
                }
            });

            GL.DepthRangeIndexed(index, n, f);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DepthRangeIndexed(uint index, double n, double f)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DepthRangeIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (n.GetType(), "n", n),
                    (f.GetType(), "f", f),
                }
            });

            GL.DepthRangeIndexed(index, n, f);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DetachShader(int program, int shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DetachShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.DetachShader(program, shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DetachShader(uint program, uint shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DetachShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.DetachShader(program, shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Disable(EnableCap cap)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Disable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (cap.GetType(), "cap", cap),
                }
            });

            GL.Disable(cap);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DisableClientState(ArrayCap array)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DisableClientState",
                CallParams = new(Type type, string name, object value)[]
                {
                    (array.GetType(), "array", array),
                }
            });

            GL.DisableClientState(array);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Disable(IndexedEnableCap target, int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Disable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            GL.Disable(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Disable(IndexedEnableCap target, uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Disable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                }
            });

            GL.Disable(target, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DisableVertexArrayAttrib(int vaobj, int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DisableVertexArrayAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                }
            });

            GL.DisableVertexArrayAttrib(vaobj, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DisableVertexArrayAttrib(uint vaobj, uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DisableVertexArrayAttrib",
                CallParams = new(Type type, string name, object value)[]
                {
                    (vaobj.GetType(), "vaobj", vaobj),
                    (index.GetType(), "index", index),
                }
            });

            GL.DisableVertexArrayAttrib(vaobj, index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DisableVertexAttribArray(int index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DisableVertexAttribArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                }
            });

            GL.DisableVertexAttribArray(index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DisableVertexAttribArray(uint index)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DisableVertexAttribArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                }
            });

            GL.DisableVertexAttribArray(index);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DispatchCompute",
                CallParams = new(Type type, string name, object value)[]
                {
                    (num_groups_x.GetType(), "num_groups_x", num_groups_x),
                    (num_groups_y.GetType(), "num_groups_y", num_groups_y),
                    (num_groups_z.GetType(), "num_groups_z", num_groups_z),
                }
            });

            GL.DispatchCompute(num_groups_x, num_groups_y, num_groups_z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DispatchCompute",
                CallParams = new(Type type, string name, object value)[]
                {
                    (num_groups_x.GetType(), "num_groups_x", num_groups_x),
                    (num_groups_y.GetType(), "num_groups_y", num_groups_y),
                    (num_groups_z.GetType(), "num_groups_z", num_groups_z),
                }
            });

            GL.DispatchCompute(num_groups_x, num_groups_y, num_groups_z);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DispatchComputeIndirect(IntPtr indirect)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DispatchComputeIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DispatchComputeIndirect(indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArrays(PrimitiveType mode, int first, int count)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                }
            });

            GL.DrawArrays(mode, first, count);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawArraysIndirect(mode, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawArraysIndirect(mode, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArraysIndirect<T1>(PrimitiveType mode, T1[,] indirect)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawArraysIndirect(mode, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArraysIndirect<T1>(PrimitiveType mode, T1[,,] indirect)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArraysIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawArraysIndirect(mode, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArraysInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawArraysInstanced(mode, first, count, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, int baseinstance)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArraysInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawArraysInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawBuffer(DrawBufferMode buf)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                }
            });

            GL.DrawBuffer(buf);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawBuffers(int n, DrawBuffersEnum[] bufs)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (bufs.GetType(), "bufs", bufs),
                }
            });

            GL.DrawBuffers(n, bufs);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElements(BeginMode mode, int count, DrawElementsType type, int indices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawElements(mode, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElements(PrimitiveType mode, int count, DrawElementsType type, int indices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawElements(mode, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawElements(mode, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawElements(mode, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawElements(mode, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElements",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                }
            });

            GL.DrawElements(mode, count, type, indices);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsBaseVertex(mode, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsBaseVertex(mode, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsBaseVertex(mode, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int basevertex)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsBaseVertex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (basevertex.GetType(), "basevertex", basevertex),
                }
            });

            GL.DrawElementsBaseVertex(mode, count, type, indices, basevertex);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsIndirect(PrimitiveType mode, All type, IntPtr indirect)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawElementsIndirect(mode, type, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsIndirect<T2>(PrimitiveType mode, All type, T2[] indirect)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawElementsIndirect(mode, type, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsIndirect<T2>(PrimitiveType mode, All type, T2[,] indirect)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawElementsIndirect(mode, type, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsIndirect<T2>(PrimitiveType mode, All type, T2[,,] indirect)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsIndirect",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (type.GetType(), "type", type),
                    (indirect.GetType(), "indirect", indirect),
                }
            });

            GL.DrawElementsIndirect(mode, type, indirect);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawElementsInstanced(mode, count, type, indices, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawElementsInstanced(mode, count, type, indices, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawElementsInstanced(mode, count, type, indices, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstanced",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                }
            });

            GL.DrawElementsInstanced(mode, count, type, indices, instancecount);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int baseinstance)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DrawElementsInstancedBaseInstance",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                    (count.GetType(), "count", count),
                    (type.GetType(), "type", type),
                    (indices.GetType(), "indices", indices),
                    (instancecount.GetType(), "instancecount", instancecount),
                    (baseinstance.GetType(), "baseinstance", baseinstance),
                }
            });

            GL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateRenderbuffers(int n, UInt32[] renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateRenderbuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.CreateRenderbuffers(n, renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateSamplers(int n, Int32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.CreateSamplers(n, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateSamplers(int n, UInt32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.CreateSamplers(n, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int CreateShader(ShaderType type)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                }
            });

            var result = GL.CreateShader(type);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public int CreateShaderProgram(ShaderType type, int count, String[] strings)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateShaderProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (count.GetType(), "count", count),
                    (strings.GetType(), "strings", strings),
                }
            });

            var result = GL.CreateShaderProgram(type, count, strings);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void CreateTextures(TextureTarget target, int n, Int32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.CreateTextures(target, n, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateTextures(TextureTarget target, int n, UInt32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.CreateTextures(target, n, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateTransformFeedbacks(int n, Int32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateTransformFeedbacks",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.CreateTransformFeedbacks(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateTransformFeedbacks(int n, UInt32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateTransformFeedbacks",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.CreateTransformFeedbacks(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateVertexArrays(int n, Int32[] arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateVertexArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.CreateVertexArrays(n, arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateVertexArrays(int n, UInt32[] arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateVertexArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.CreateVertexArrays(n, arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CullFace(CullFaceMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CullFace",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.CullFace(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageCallback(DebugProc callback, IntPtr userParam)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageCallback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (callback.GetType(), "callback", callback),
                    (userParam.GetType(), "userParam", userParam),
                }
            });

            GL.DebugMessageCallback(callback, userParam);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageCallback<T1>(DebugProc callback, T1[] userParam)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageCallback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (callback.GetType(), "callback", callback),
                    (userParam.GetType(), "userParam", userParam),
                }
            });

            GL.DebugMessageCallback(callback, userParam);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageCallback<T1>(DebugProc callback, T1[,] userParam)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageCallback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (callback.GetType(), "callback", callback),
                    (userParam.GetType(), "userParam", userParam),
                }
            });

            GL.DebugMessageCallback(callback, userParam);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageCallback<T1>(DebugProc callback, T1[,,] userParam)
                    where T1 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageCallback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (callback.GetType(), "callback", callback),
                    (userParam.GetType(), "userParam", userParam),
                }
            });

            GL.DebugMessageCallback(callback, userParam);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, Int32[] ids, bool enabled)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageControl",
                CallParams = new(Type type, string name, object value)[]
                {
                    (source.GetType(), "source", source),
                    (type.GetType(), "type", type),
                    (severity.GetType(), "severity", severity),
                    (count.GetType(), "count", count),
                    (ids.GetType(), "ids", ids),
                    (enabled.GetType(), "enabled", enabled),
                }
            });

            GL.DebugMessageControl(source, type, severity, count, ids, enabled);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, UInt32[] ids, bool enabled)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageControl",
                CallParams = new(Type type, string name, object value)[]
                {
                    (source.GetType(), "source", source),
                    (type.GetType(), "type", type),
                    (severity.GetType(), "severity", severity),
                    (count.GetType(), "count", count),
                    (ids.GetType(), "ids", ids),
                    (enabled.GetType(), "enabled", enabled),
                }
            });

            GL.DebugMessageControl(source, type, severity, count, ids, enabled);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageInsert(DebugSourceExternal source, DebugType type, int id, DebugSeverity severity, int length, string buf)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageInsert",
                CallParams = new(Type type, string name, object value)[]
                {
                    (source.GetType(), "source", source),
                    (type.GetType(), "type", type),
                    (id.GetType(), "id", id),
                    (severity.GetType(), "severity", severity),
                    (length.GetType(), "length", length),
                    (buf.GetType(), "buf", buf),
                }
            });

            GL.DebugMessageInsert(source, type, id, severity, length, buf);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DebugMessageInsert(DebugSourceExternal source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DebugMessageInsert",
                CallParams = new(Type type, string name, object value)[]
                {
                    (source.GetType(), "source", source),
                    (type.GetType(), "type", type),
                    (id.GetType(), "id", id),
                    (severity.GetType(), "severity", severity),
                    (length.GetType(), "length", length),
                    (buf.GetType(), "buf", buf),
                }
            });

            GL.DebugMessageInsert(source, type, id, severity, length, buf);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteBuffer(int buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.DeleteBuffer(buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteBuffer(uint buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.DeleteBuffer(buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteBuffers(int n, Int32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.DeleteBuffers(n, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteBuffers(int n, UInt32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.DeleteBuffers(n, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteFramebuffer(int framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.DeleteFramebuffer(framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteFramebuffer(uint framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.DeleteFramebuffer(framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteFramebuffers(int n, Int32[] framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteFramebuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.DeleteFramebuffers(n, framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteFramebuffers(int n, UInt32[] framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteFramebuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.DeleteFramebuffers(n, framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteLists(int list, int range)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteLists",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                    (range.GetType(), "range", range),
                }
            });

            GL.DeleteLists(list, range);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteLists(uint list, int range)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteLists",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                    (range.GetType(), "range", range),
                }
            });

            GL.DeleteLists(list, range);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteProgram(int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.DeleteProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteProgram(uint program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                }
            });

            GL.DeleteProgram(program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteProgramPipeline(int pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.DeleteProgramPipeline(pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteProgramPipeline(uint pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.DeleteProgramPipeline(pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteProgramPipelines(int n, Int32[] pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteProgramPipelines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.DeleteProgramPipelines(n, pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteProgramPipelines(int n, UInt32[] pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteProgramPipelines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.DeleteProgramPipelines(n, pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteQuery(int ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteQuery(ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteQuery(uint ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteQuery(ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteQueries(int n, Int32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteQueries",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteQueries(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteQueries(int n, UInt32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteQueries",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteQueries(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteRenderbuffer(int renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.DeleteRenderbuffer(renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteRenderbuffer(uint renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.DeleteRenderbuffer(renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteRenderbuffers(int n, Int32[] renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteRenderbuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.DeleteRenderbuffers(n, renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteRenderbuffers(int n, UInt32[] renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteRenderbuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.DeleteRenderbuffers(n, renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteSampler(int samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteSampler",
                CallParams = new(Type type, string name, object value)[]
                {
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.DeleteSampler(samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteSampler(uint samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteSampler",
                CallParams = new(Type type, string name, object value)[]
                {
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.DeleteSampler(samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteSamplers(int count, Int32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.DeleteSamplers(count, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteSamplers(int count, UInt32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (count.GetType(), "count", count),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.DeleteSamplers(count, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteShader(int shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.DeleteShader(shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteShader(uint shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.DeleteShader(shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteSync(IntPtr sync)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteSync",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sync.GetType(), "sync", sync),
                }
            });

            GL.DeleteSync(sync);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTexture(int textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.DeleteTexture(textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTexture(uint textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.DeleteTexture(textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTextures(int n, Int32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.DeleteTextures(n, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTextures(int n, UInt32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.DeleteTextures(n, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTransformFeedback(int ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteTransformFeedback(ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTransformFeedback(uint ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteTransformFeedback(ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTransformFeedbacks(int n, Int32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTransformFeedbacks",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteTransformFeedbacks(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteTransformFeedbacks(int n, UInt32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteTransformFeedbacks",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.DeleteTransformFeedbacks(n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteVertexArray(int arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.DeleteVertexArray(arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteVertexArray(uint arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.DeleteVertexArray(arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteVertexArrays(int n, Int32[] arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteVertexArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.DeleteVertexArrays(n, arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void DeleteVertexArrays(int n, UInt32[] arrays)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "DeleteVertexArrays",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (arrays.GetType(), "arrays", arrays),
                }
            });

            GL.DeleteVertexArrays(n, arrays);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter1D(target, internalformat, width, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[] image)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter1D(target, internalformat, width, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,] image)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter1D(target, internalformat, width, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,,] image)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter1D(target, internalformat, width, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter2D(target, internalformat, width, height, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[] image)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter2D(target, internalformat, width, height, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,] image)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter2D(target, internalformat, width, height, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,,] image)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (image.GetType(), "image", image),
                }
            });

            GL.ConvolutionFilter2D(target, internalformat, width, height, format, type, image);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.ConvolutionParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.ConvolutionParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.ConvolutionParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ConvolutionParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.ConvolutionParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (readTarget.GetType(), "readTarget", readTarget),
                    (writeTarget.GetType(), "writeTarget", writeTarget),
                    (readOffset.GetType(), "readOffset", readOffset),
                    (writeOffset.GetType(), "writeOffset", writeOffset),
                    (size.GetType(), "size", size),
                }
            });

            GL.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (readTarget.GetType(), "readTarget", readTarget),
                    (writeTarget.GetType(), "writeTarget", writeTarget),
                    (readOffset.GetType(), "readOffset", readOffset),
                    (writeOffset.GetType(), "writeOffset", writeOffset),
                    (size.GetType(), "size", size),
                }
            });

            GL.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyColorSubTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (start.GetType(), "start", start),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                }
            });

            GL.CopyColorSubTable(target, start, x, y, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int x, int y, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                }
            });

            GL.CopyColorTable(target, internalformat, x, y, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyConvolutionFilter1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                }
            });

            GL.CopyConvolutionFilter1D(target, internalformat, x, y, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyConvolutionFilter2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.CopyConvolutionFilter2D(target, internalformat, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyImageSubData(int srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyImageSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (srcName.GetType(), "srcName", srcName),
                    (srcTarget.GetType(), "srcTarget", srcTarget),
                    (srcLevel.GetType(), "srcLevel", srcLevel),
                    (srcX.GetType(), "srcX", srcX),
                    (srcY.GetType(), "srcY", srcY),
                    (srcZ.GetType(), "srcZ", srcZ),
                    (dstName.GetType(), "dstName", dstName),
                    (dstTarget.GetType(), "dstTarget", dstTarget),
                    (dstLevel.GetType(), "dstLevel", dstLevel),
                    (dstX.GetType(), "dstX", dstX),
                    (dstY.GetType(), "dstY", dstY),
                    (dstZ.GetType(), "dstZ", dstZ),
                    (srcWidth.GetType(), "srcWidth", srcWidth),
                    (srcHeight.GetType(), "srcHeight", srcHeight),
                    (srcDepth.GetType(), "srcDepth", srcDepth),
                }
            });

            GL.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyImageSubData(uint srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyImageSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (srcName.GetType(), "srcName", srcName),
                    (srcTarget.GetType(), "srcTarget", srcTarget),
                    (srcLevel.GetType(), "srcLevel", srcLevel),
                    (srcX.GetType(), "srcX", srcX),
                    (srcY.GetType(), "srcY", srcY),
                    (srcZ.GetType(), "srcZ", srcZ),
                    (dstName.GetType(), "dstName", dstName),
                    (dstTarget.GetType(), "dstTarget", dstTarget),
                    (dstLevel.GetType(), "dstLevel", dstLevel),
                    (dstX.GetType(), "dstX", dstX),
                    (dstY.GetType(), "dstY", dstY),
                    (dstZ.GetType(), "dstZ", dstZ),
                    (srcWidth.GetType(), "srcWidth", srcWidth),
                    (srcHeight.GetType(), "srcHeight", srcHeight),
                    (srcDepth.GetType(), "srcDepth", srcDepth),
                }
            });

            GL.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyNamedBufferSubData(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (readBuffer.GetType(), "readBuffer", readBuffer),
                    (writeBuffer.GetType(), "writeBuffer", writeBuffer),
                    (readOffset.GetType(), "readOffset", readOffset),
                    (writeOffset.GetType(), "writeOffset", writeOffset),
                    (size.GetType(), "size", size),
                }
            });

            GL.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (readBuffer.GetType(), "readBuffer", readBuffer),
                    (writeBuffer.GetType(), "writeBuffer", writeBuffer),
                    (readOffset.GetType(), "readOffset", readOffset),
                    (writeOffset.GetType(), "writeOffset", writeOffset),
                    (size.GetType(), "size", size),
                }
            });

            GL.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyPixels(int x, int y, int width, int height, PixelCopyType type)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyPixels",
                CallParams = new(Type type, string name, object value)[]
                {
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (type.GetType(), "type", type),
                }
            });

            GL.CopyPixels(x, y, width, height, type);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                }
            });

            GL.CopyTexImage1D(target, level, internalformat, x, y, width, border);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                }
            });

            GL.CopyTexImage2D(target, level, internalformat, x, y, width, height, border);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                }
            });

            GL.CopyTexSubImage1D(target, level, xoffset, x, y, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTextureSubImage1D(int texture, int level, int xoffset, int x, int y, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                }
            });

            GL.CopyTextureSubImage1D(texture, level, xoffset, x, y, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTextureSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                }
            });

            GL.CopyTextureSubImage1D(texture, level, xoffset, x, y, width);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTextureSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CopyTextureSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (x.GetType(), "x", x),
                    (y.GetType(), "y", y),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                }
            });

            GL.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateBuffers(int n, Int32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.CreateBuffers(n, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateBuffers(int n, UInt32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.CreateBuffers(n, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateFramebuffers(int n, Int32[] framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateFramebuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.CreateFramebuffers(n, framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateFramebuffers(int n, UInt32[] framebuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateFramebuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (framebuffers.GetType(), "framebuffers", framebuffers),
                }
            });

            GL.CreateFramebuffers(n, framebuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public int CreateProgram()
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                }
            });

            var result = GL.CreateProgram();

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void CreateProgramPipelines(int n, Int32[] pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateProgramPipelines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.CreateProgramPipelines(n, pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateProgramPipelines(int n, UInt32[] pipelines)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateProgramPipelines",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (pipelines.GetType(), "pipelines", pipelines),
                }
            });

            GL.CreateProgramPipelines(n, pipelines);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateQueries(QueryTarget target, int n, Int32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateQueries",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.CreateQueries(target, n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateQueries(QueryTarget target, int n, UInt32[] ids)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateQueries",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (n.GetType(), "n", n),
                    (ids.GetType(), "ids", ids),
                }
            });

            GL.CreateQueries(target, n, ids);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CreateRenderbuffers(int n, Int32[] renderbuffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CreateRenderbuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (renderbuffers.GetType(), "renderbuffers", renderbuffers),
                }
            });

            GL.CreateRenderbuffers(n, renderbuffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(double red, double green, double blue, double alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(float red, float green, float blue, float alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(int red, int green, int blue, int alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(short red, short green, short blue, short alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(byte red, byte green, byte blue, byte alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(uint red, uint green, uint blue, uint alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(ushort red, ushort green, ushort blue, ushort alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(UInt16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.ColorMask(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorMask(int index, bool r, bool g, bool b, bool a)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (r.GetType(), "r", r),
                    (g.GetType(), "g", g),
                    (b.GetType(), "b", b),
                    (a.GetType(), "a", a),
                }
            });

            GL.ColorMask(index, r, g, b, a);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorMask(uint index, bool r, bool g, bool b, bool a)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorMask",
                CallParams = new(Type type, string name, object value)[]
                {
                    (index.GetType(), "index", index),
                    (r.GetType(), "r", r),
                    (g.GetType(), "g", g),
                    (b.GetType(), "b", b),
                    (a.GetType(), "a", a),
                }
            });

            GL.ColorMask(index, r, g, b, a);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorMaterial(MaterialFace face, ColorMaterialParameter mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorMaterial",
                CallParams = new(Type type, string name, object value)[]
                {
                    (face.GetType(), "face", face),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.ColorMaterial(face, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorP3(PackedPointerType type, int color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (color.GetType(), "color", color),
                }
            });

            GL.ColorP3(type, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorP3(PackedPointerType type, uint color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorP3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (color.GetType(), "color", color),
                }
            });

            GL.ColorP3(type, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorP4(PackedPointerType type, int color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (color.GetType(), "color", color),
                }
            });

            GL.ColorP4(type, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorP4(PackedPointerType type, uint color)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorP4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (type.GetType(), "type", type),
                    (color.GetType(), "color", color),
                }
            });

            GL.ColorP4(type, color);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.ColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorPointer<T3>(int size, ColorPointerType type, int stride, T3[] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.ColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.ColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,,] pointer)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorPointer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (size.GetType(), "size", size),
                    (type.GetType(), "type", type),
                    (stride.GetType(), "stride", stride),
                    (pointer.GetType(), "pointer", pointer),
                }
            });

            GL.ColorPointer(size, type, stride, pointer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorSubTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (start.GetType(), "start", start),
                    (count.GetType(), "count", count),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ColorSubTable(target, start, count, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T5[] data)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorSubTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (start.GetType(), "start", start),
                    (count.GetType(), "count", count),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ColorSubTable(target, start, count, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T5[,] data)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorSubTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (start.GetType(), "start", start),
                    (count.GetType(), "count", count),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ColorSubTable(target, start, count, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T5[,,] data)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorSubTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (start.GetType(), "start", start),
                    (count.GetType(), "count", count),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ColorSubTable(target, start, count, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.ColorTable(target, internalformat, width, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[] table)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.ColorTable(target, internalformat, width, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,] table)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.ColorTable(target, internalformat, width, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,,] table)
                    where T5 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorTable",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (table.GetType(), "table", table),
                }
            });

            GL.ColorTable(target, internalformat, width, format, type, table);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, Single[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorTableParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.ColorTableParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, Int32[] @params)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ColorTableParameter",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (pname.GetType(), "pname", pname),
                    (@params.GetType(), "@params", @params),
                }
            });

            GL.ColorTableParameter(target, pname, @params);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompileShader(int shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompileShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.CompileShader(shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompileShader(uint shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompileShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.CompileShader(shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, T7[] data)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, T7[,] data)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, T7[,,] data)
                    where T7 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T8[] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T8[,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T8[,,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (border.GetType(), "border", border),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage1D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (width.GetType(), "width", width),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,,] data)
                    where T8 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage2D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CompressedTexSubImage3D",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (imageSize.GetType(), "imageSize", imageSize),
                    (data.GetType(), "data", data),
                }
            });

            GL.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData<T4>(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData<T4>(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData<T4>(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData<T6>(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData<T6>(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData<T6>(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData<T6>(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData<T6>(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferSubData<T6>(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedFramebuffer(int framebuffer, ClearBufferCombined buffer, float depth, int stencil)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buffer.GetType(), "buffer", buffer),
                    (depth.GetType(), "depth", depth),
                    (stencil.GetType(), "stencil", stencil),
                }
            });

            GL.ClearNamedFramebuffer(framebuffer, buffer, depth, stencil);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedFramebuffer(uint framebuffer, ClearBufferCombined buffer, float depth, int stencil)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buffer.GetType(), "buffer", buffer),
                    (depth.GetType(), "depth", depth),
                    (stencil.GetType(), "stencil", stencil),
                }
            });

            GL.ClearNamedFramebuffer(framebuffer, buffer, depth, stencil);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedFramebuffer(int framebuffer, ClearBuffer buffer, int drawbuffer, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedFramebuffer(uint framebuffer, ClearBuffer buffer, int drawbuffer, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedFramebuffer(int framebuffer, ClearBuffer buffer, int drawbuffer, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedFramebuffer(uint framebuffer, ClearBuffer buffer, int drawbuffer, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedFramebuffer(uint framebuffer, ClearBuffer buffer, int drawbuffer, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearStencil(int s)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearStencil",
                CallParams = new(Type type, string name, object value)[]
                {
                    (s.GetType(), "s", s),
                }
            });

            GL.ClearStencil(s);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, T4[] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, T4[,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, T4[,,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, T4[] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, T4[,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, T4[,,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexImage(texture, level, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] data)
                    where T10 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearTexSubImage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (xoffset.GetType(), "xoffset", xoffset),
                    (yoffset.GetType(), "yoffset", yoffset),
                    (zoffset.GetType(), "zoffset", zoffset),
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (depth.GetType(), "depth", depth),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClientActiveTexture(TextureUnit texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClientActiveTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.ClientActiveTexture(texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, long timeout)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClientWaitSync",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sync.GetType(), "sync", sync),
                    (flags.GetType(), "flags", flags),
                    (timeout.GetType(), "timeout", timeout),
                }
            });

            var result = GL.ClientWaitSync(sync, flags, timeout);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, ulong timeout)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClientWaitSync",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sync.GetType(), "sync", sync),
                    (flags.GetType(), "flags", flags),
                    (timeout.GetType(), "timeout", timeout),
                }
            });

            var result = GL.ClientWaitSync(sync, flags, timeout);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void ClipControl(ClipOrigin origin, ClipDepthMode depth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClipControl",
                CallParams = new(Type type, string name, object value)[]
                {
                    (origin.GetType(), "origin", origin),
                    (depth.GetType(), "depth", depth),
                }
            });

            GL.ClipControl(origin, depth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClipPlane(ClipPlaneName plane, Double[] equation)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClipPlane",
                CallParams = new(Type type, string name, object value)[]
                {
                    (plane.GetType(), "plane", plane),
                    (equation.GetType(), "equation", equation),
                }
            });

            GL.ClipPlane(plane, equation);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(sbyte red, sbyte green, sbyte blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(SByte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(double red, double green, double blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(Double[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(float red, float green, float blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(Single[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(int red, int green, int blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(Int32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(short red, short green, short blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(Int16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(byte red, byte green, byte blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(Byte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(uint red, uint green, uint blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(UInt32[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(ushort red, ushort green, ushort blue)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                }
            });

            GL.Color3(red, green, blue);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color3(UInt16[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color3",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color3(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.Color4(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Color4(SByte[] v)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Color4",
                CallParams = new(Type type, string name, object value)[]
                {
                    (v.GetType(), "v", v),
                }
            });

            GL.Color4(v);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendFuncSeparate(int buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendFuncSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (srcRGB.GetType(), "srcRGB", srcRGB),
                    (dstRGB.GetType(), "dstRGB", dstRGB),
                    (srcAlpha.GetType(), "srcAlpha", srcAlpha),
                    (dstAlpha.GetType(), "dstAlpha", dstAlpha),
                }
            });

            GL.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendFuncSeparate(uint buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendFuncSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (srcRGB.GetType(), "srcRGB", srcRGB),
                    (dstRGB.GetType(), "dstRGB", dstRGB),
                    (srcAlpha.GetType(), "srcAlpha", srcAlpha),
                    (dstAlpha.GetType(), "dstAlpha", dstAlpha),
                }
            });

            GL.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlitFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (srcX0.GetType(), "srcX0", srcX0),
                    (srcY0.GetType(), "srcY0", srcY0),
                    (srcX1.GetType(), "srcX1", srcX1),
                    (srcY1.GetType(), "srcY1", srcY1),
                    (dstX0.GetType(), "dstX0", dstX0),
                    (dstY0.GetType(), "dstY0", dstY0),
                    (dstX1.GetType(), "dstX1", dstX1),
                    (dstY1.GetType(), "dstY1", dstY1),
                    (mask.GetType(), "mask", mask),
                    (filter.GetType(), "filter", filter),
                }
            });

            GL.BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlitNamedFramebuffer(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlitNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (readFramebuffer.GetType(), "readFramebuffer", readFramebuffer),
                    (drawFramebuffer.GetType(), "drawFramebuffer", drawFramebuffer),
                    (srcX0.GetType(), "srcX0", srcX0),
                    (srcY0.GetType(), "srcY0", srcY0),
                    (srcX1.GetType(), "srcX1", srcX1),
                    (srcY1.GetType(), "srcY1", srcY1),
                    (dstX0.GetType(), "dstX0", dstX0),
                    (dstY0.GetType(), "dstY0", dstY0),
                    (dstX1.GetType(), "dstX1", dstX1),
                    (dstY1.GetType(), "dstY1", dstY1),
                    (mask.GetType(), "mask", mask),
                    (filter.GetType(), "filter", filter),
                }
            });

            GL.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlitNamedFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (readFramebuffer.GetType(), "readFramebuffer", readFramebuffer),
                    (drawFramebuffer.GetType(), "drawFramebuffer", drawFramebuffer),
                    (srcX0.GetType(), "srcX0", srcX0),
                    (srcY0.GetType(), "srcY0", srcY0),
                    (srcX1.GetType(), "srcX1", srcX1),
                    (srcY1.GetType(), "srcY1", srcY1),
                    (dstX0.GetType(), "dstX0", dstX0),
                    (dstY0.GetType(), "dstY0", dstY0),
                    (dstX1.GetType(), "dstX1", dstX1),
                    (dstY1.GetType(), "dstY1", dstY1),
                    (mask.GetType(), "mask", mask),
                    (filter.GetType(), "filter", filter),
                }
            });

            GL.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData(BufferTarget target, int size, IntPtr data, BufferUsageHint usage)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData<T2>(BufferTarget target, int size, T2[] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData<T2>(BufferTarget target, int size, T2[,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData<T2>(BufferTarget target, int size, T2[,,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData<T2>(BufferTarget target, IntPtr size, T2[] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData<T2>(BufferTarget target, IntPtr size, T2[,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferData<T2>(BufferTarget target, IntPtr size, T2[,,] data, BufferUsageHint usage)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (usage.GetType(), "usage", usage),
                }
            });

            GL.BufferData(target, size, data, usage);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage(BufferTarget target, int size, IntPtr data, BufferStorageFlags flags)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage<T2>(BufferTarget target, int size, T2[] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage<T2>(BufferTarget target, int size, T2[,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage<T2>(BufferTarget target, int size, T2[,,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage(BufferTarget target, IntPtr size, IntPtr data, BufferStorageFlags flags)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage<T2>(BufferTarget target, IntPtr size, T2[] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage<T2>(BufferTarget target, IntPtr size, T2[,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferStorage<T2>(BufferTarget target, IntPtr size, T2[,,] data, BufferStorageFlags flags)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferStorage",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                    (flags.GetType(), "flags", flags),
                }
            });

            GL.BufferStorage(target, size, data, flags);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData(BufferTarget target, IntPtr offset, int size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,,] data)
                    where T3 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (data.GetType(), "data", data),
                }
            });

            GL.BufferSubData(target, offset, size, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CallList(int list)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CallList",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                }
            });

            GL.CallList(list);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CallList(uint list)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CallList",
                CallParams = new(Type type, string name, object value)[]
                {
                    (list.GetType(), "list", list),
                }
            });

            GL.CallList(list);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CallLists(int n, ListNameType type, IntPtr lists)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CallLists",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (type.GetType(), "type", type),
                    (lists.GetType(), "lists", lists),
                }
            });

            GL.CallLists(n, type, lists);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CallLists<T2>(int n, ListNameType type, T2[] lists)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CallLists",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (type.GetType(), "type", type),
                    (lists.GetType(), "lists", lists),
                }
            });

            GL.CallLists(n, type, lists);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CallLists<T2>(int n, ListNameType type, T2[,] lists)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CallLists",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (type.GetType(), "type", type),
                    (lists.GetType(), "lists", lists),
                }
            });

            GL.CallLists(n, type, lists);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void CallLists<T2>(int n, ListNameType type, T2[,,] lists)
                    where T2 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CallLists",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (type.GetType(), "type", type),
                    (lists.GetType(), "lists", lists),
                }
            });

            GL.CallLists(n, type, lists);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CheckFramebufferStatus",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                }
            });

            var result = GL.CheckFramebufferStatus(target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public All CheckNamedFramebufferStatus(int framebuffer, FramebufferTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CheckNamedFramebufferStatus",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (target.GetType(), "target", target),
                }
            });

            var result = GL.CheckNamedFramebufferStatus(framebuffer, target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public All CheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "CheckNamedFramebufferStatus",
                CallParams = new(Type type, string name, object value)[]
                {
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                    (target.GetType(), "target", target),
                }
            });

            var result = GL.CheckNamedFramebufferStatus(framebuffer, target);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void ClampColor(ClampColorTarget target, ClampColorMode clamp)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClampColor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (clamp.GetType(), "clamp", clamp),
                }
            });

            GL.ClampColor(target, clamp);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Clear(ClearBufferMask mask)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Clear",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mask.GetType(), "mask", mask),
                }
            });

            GL.Clear(mask);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearAccum(float red, float green, float blue, float alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearAccum",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.ClearAccum(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferData(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferData(target, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, T4[] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferData(target, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferData(target, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferData(target, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBuffer(ClearBufferCombined buffer, int drawbuffer, float depth, int stencil)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (depth.GetType(), "depth", depth),
                    (stencil.GetType(), "stencil", stencil),
                }
            });

            GL.ClearBuffer(buffer, drawbuffer, depth, stencil);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBuffer(ClearBuffer buffer, int drawbuffer, Single[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearBuffer(buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBuffer(ClearBuffer buffer, int drawbuffer, Int32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearBuffer(buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, T6[] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, T6[,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, T6[,,] data)
                    where T6 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBufferSubData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearBuffer(ClearBuffer buffer, int drawbuffer, UInt32[] value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (drawbuffer.GetType(), "drawbuffer", drawbuffer),
                    (value.GetType(), "value", value),
                }
            });

            GL.ClearBuffer(buffer, drawbuffer, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearColor(float red, float green, float blue, float alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearColor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.ClearColor(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearDepth(double depth)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearDepth",
                CallParams = new(Type type, string name, object value)[]
                {
                    (depth.GetType(), "depth", depth),
                }
            });

            GL.ClearDepth(depth);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearDepth(float d)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearDepth",
                CallParams = new(Type type, string name, object value)[]
                {
                    (d.GetType(), "d", d),
                }
            });

            GL.ClearDepth(d);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearIndex(float c)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearIndex",
                CallParams = new(Type type, string name, object value)[]
                {
                    (c.GetType(), "c", c),
                }
            });

            GL.ClearIndex(c);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData<T4>(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData<T4>(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ClearNamedBufferData<T4>(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,,] data)
                    where T4 : struct
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ClearNamedBufferData",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buffer.GetType(), "buffer", buffer),
                    (internalformat.GetType(), "internalformat", internalformat),
                    (format.GetType(), "format", format),
                    (type.GetType(), "type", type),
                    (data.GetType(), "data", data),
                }
            });

            GL.ClearNamedBufferData(buffer, internalformat, format, type, data);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Accum(AccumOp op, float value)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Accum",
                CallParams = new(Type type, string name, object value)[]
                {
                    (op.GetType(), "op", op),
                    (value.GetType(), "value", value),
                }
            });

            GL.Accum(op, value);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ActiveShaderProgram(int pipeline, int program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ActiveShaderProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                    (program.GetType(), "program", program),
                }
            });

            GL.ActiveShaderProgram(pipeline, program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ActiveShaderProgram(uint pipeline, uint program)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ActiveShaderProgram",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                    (program.GetType(), "program", program),
                }
            });

            GL.ActiveShaderProgram(pipeline, program);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void ActiveTexture(TextureUnit texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ActiveTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.ActiveTexture(texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void AlphaFunc(AlphaFunction func, float @ref)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "AlphaFunc",
                CallParams = new(Type type, string name, object value)[]
                {
                    (func.GetType(), "func", func),
                    (@ref.GetType(), "@ref", @ref),
                }
            });

            GL.AlphaFunc(func, @ref);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public bool AreTexturesResident(int n, Int32[] textures, bool[] residences)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "AreTexturesResident",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                    (residences.GetType(), "residences", residences),
                }
            });

            var result = GL.AreTexturesResident(n, textures, residences);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public bool AreTexturesResident(int n, UInt32[] textures, bool[] residences)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "AreTexturesResident",
                CallParams = new(Type type, string name, object value)[]
                {
                    (n.GetType(), "n", n),
                    (textures.GetType(), "textures", textures),
                    (residences.GetType(), "residences", residences),
                }
            });

            var result = GL.AreTexturesResident(n, textures, residences);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
            return result;
        }

        public void ArrayElement(int i)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "ArrayElement",
                CallParams = new(Type type, string name, object value)[]
                {
                    (i.GetType(), "i", i),
                }
            });

            GL.ArrayElement(i);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void AttachShader(int program, int shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "AttachShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.AttachShader(program, shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void AttachShader(uint program, uint shader)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "AttachShader",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (shader.GetType(), "shader", shader),
                }
            });

            GL.AttachShader(program, shader);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Begin(PrimitiveType mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Begin",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.Begin(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BeginConditionalRender(int id, ConditionalRenderType mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BeginConditionalRender",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.BeginConditionalRender(id, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BeginConditionalRender(uint id, ConditionalRenderType mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BeginConditionalRender",
                CallParams = new(Type type, string name, object value)[]
                {
                    (id.GetType(), "id", id),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.BeginConditionalRender(id, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BeginQuery(QueryTarget target, int id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BeginQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (id.GetType(), "id", id),
                }
            });

            GL.BeginQuery(target, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BeginQuery(QueryTarget target, uint id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BeginQuery",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (id.GetType(), "id", id),
                }
            });

            GL.BeginQuery(target, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BeginQueryIndexed(QueryTarget target, int index, int id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BeginQueryIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (id.GetType(), "id", id),
                }
            });

            GL.BeginQueryIndexed(target, index, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BeginQueryIndexed(QueryTarget target, uint index, uint id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BeginQueryIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (id.GetType(), "id", id),
                }
            });

            GL.BeginQueryIndexed(target, index, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BeginTransformFeedback(TransformFeedbackPrimitiveType primitiveMode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BeginTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (primitiveMode.GetType(), "primitiveMode", primitiveMode),
                }
            });

            GL.BeginTransformFeedback(primitiveMode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindAttribLocation(int program, int index, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindAttribLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (index.GetType(), "index", index),
                    (name.GetType(), "name", name),
                }
            });

            GL.BindAttribLocation(program, index, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindAttribLocation(uint program, uint index, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindAttribLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (index.GetType(), "index", index),
                    (name.GetType(), "name", name),
                }
            });

            GL.BindAttribLocation(program, index, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBuffer(BufferTarget target, int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.BindBuffer(target, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBuffer(BufferTarget target, uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.BindBuffer(target, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBufferBase(BufferRangeTarget target, int index, int buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBufferBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.BindBufferBase(target, index, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBufferBase(BufferRangeTarget target, uint index, uint buffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBufferBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                }
            });

            GL.BindBufferBase(target, index, buffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBufferRange(BufferRangeTarget target, int index, int buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.BindBufferRange(target, index, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBufferRange(BufferRangeTarget target, int index, int buffer, IntPtr offset, IntPtr size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.BindBufferRange(target, index, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBufferRange(BufferRangeTarget target, uint index, uint buffer, IntPtr offset, int size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.BindBufferRange(target, index, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBufferRange(BufferRangeTarget target, uint index, uint buffer, IntPtr offset, IntPtr size)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBufferRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (index.GetType(), "index", index),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (size.GetType(), "size", size),
                }
            });

            GL.BindBufferRange(target, index, buffer, offset, size);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBuffersBase(BufferRangeTarget target, int first, int count, Int32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBuffersBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.BindBuffersBase(target, first, count, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBuffersBase(BufferRangeTarget target, uint first, int count, UInt32[] buffers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBuffersBase",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                }
            });

            GL.BindBuffersBase(target, first, count, buffers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBuffersRange(BufferRangeTarget target, int first, int count, Int32[] buffers, IntPtr[] offsets, IntPtr[] sizes)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBuffersRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                    (offsets.GetType(), "offsets", offsets),
                    (sizes.GetType(), "sizes", sizes),
                }
            });

            GL.BindBuffersRange(target, first, count, buffers, offsets, sizes);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindBuffersRange(BufferRangeTarget target, uint first, int count, UInt32[] buffers, IntPtr[] offsets, IntPtr[] sizes)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindBuffersRange",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                    (offsets.GetType(), "offsets", offsets),
                    (sizes.GetType(), "sizes", sizes),
                }
            });

            GL.BindBuffersRange(target, first, count, buffers, offsets, sizes);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindFragDataLocation(int program, int color, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindFragDataLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (color.GetType(), "color", color),
                    (name.GetType(), "name", name),
                }
            });

            GL.BindFragDataLocation(program, color, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindFragDataLocation(uint program, uint color, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindFragDataLocation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (color.GetType(), "color", color),
                    (name.GetType(), "name", name),
                }
            });

            GL.BindFragDataLocation(program, color, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindFragDataLocationIndexed(int program, int colorNumber, int index, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindFragDataLocationIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (colorNumber.GetType(), "colorNumber", colorNumber),
                    (index.GetType(), "index", index),
                    (name.GetType(), "name", name),
                }
            });

            GL.BindFragDataLocationIndexed(program, colorNumber, index, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindFragDataLocationIndexed",
                CallParams = new(Type type, string name, object value)[]
                {
                    (program.GetType(), "program", program),
                    (colorNumber.GetType(), "colorNumber", colorNumber),
                    (index.GetType(), "index", index),
                    (name.GetType(), "name", name),
                }
            });

            GL.BindFragDataLocationIndexed(program, colorNumber, index, name);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindFramebuffer(FramebufferTarget target, int framebuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                }
            });

            GL.BindFramebuffer(target, framebuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindFramebuffer(FramebufferTarget target, uint framebuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindFramebuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (framebuffer.GetType(), "framebuffer", framebuffer),
                }
            });

            GL.BindFramebuffer(target, framebuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindImageTexture(int unit, int texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindImageTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (unit.GetType(), "unit", unit),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (layered.GetType(), "layered", layered),
                    (layer.GetType(), "layer", layer),
                    (access.GetType(), "access", access),
                    (format.GetType(), "format", format),
                }
            });

            GL.BindImageTexture(unit, texture, level, layered, layer, access, format);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindImageTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (unit.GetType(), "unit", unit),
                    (texture.GetType(), "texture", texture),
                    (level.GetType(), "level", level),
                    (layered.GetType(), "layered", layered),
                    (layer.GetType(), "layer", layer),
                    (access.GetType(), "access", access),
                    (format.GetType(), "format", format),
                }
            });

            GL.BindImageTexture(unit, texture, level, layered, layer, access, format);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindImageTextures(int first, int count, Int32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindImageTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.BindImageTextures(first, count, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindImageTextures(uint first, int count, UInt32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindImageTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.BindImageTextures(first, count, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindProgramPipeline(int pipeline)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                }
            });

            GL.BindProgramPipeline(pipeline);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindProgramPipeline(uint pipeline)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindProgramPipeline",
                CallParams = new(Type type, string name, object value)[]
                {
                    (pipeline.GetType(), "pipeline", pipeline),
                }
            });

            GL.BindProgramPipeline(pipeline);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            GL.BindRenderbuffer(target, renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindRenderbuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (renderbuffer.GetType(), "renderbuffer", renderbuffer),
                }
            });

            GL.BindRenderbuffer(target, renderbuffer);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindSampler(int unit, int sampler)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindSampler",
                CallParams = new(Type type, string name, object value)[]
                {
                    (unit.GetType(), "unit", unit),
                    (sampler.GetType(), "sampler", sampler),
                }
            });

            GL.BindSampler(unit, sampler);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindSampler(uint unit, uint sampler)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindSampler",
                CallParams = new(Type type, string name, object value)[]
                {
                    (unit.GetType(), "unit", unit),
                    (sampler.GetType(), "sampler", sampler),
                }
            });

            GL.BindSampler(unit, sampler);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindSamplers(int first, int count, Int32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.BindSamplers(first, count, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindSamplers(uint first, int count, UInt32[] samplers)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindSamplers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (samplers.GetType(), "samplers", samplers),
                }
            });

            GL.BindSamplers(first, count, samplers);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTexture(TextureTarget target, int texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.BindTexture(target, texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTexture(TextureTarget target, uint texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTexture",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.BindTexture(target, texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTextures(int first, int count, Int32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.BindTextures(first, count, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTextures(uint first, int count, UInt32[] textures)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTextures",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (textures.GetType(), "textures", textures),
                }
            });

            GL.BindTextures(first, count, textures);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTextureUnit(int unit, int texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTextureUnit",
                CallParams = new(Type type, string name, object value)[]
                {
                    (unit.GetType(), "unit", unit),
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.BindTextureUnit(unit, texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTextureUnit(uint unit, uint texture)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTextureUnit",
                CallParams = new(Type type, string name, object value)[]
                {
                    (unit.GetType(), "unit", unit),
                    (texture.GetType(), "texture", texture),
                }
            });

            GL.BindTextureUnit(unit, texture);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTransformFeedback(TransformFeedbackTarget target, int id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (id.GetType(), "id", id),
                }
            });

            GL.BindTransformFeedback(target, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindTransformFeedback(TransformFeedbackTarget target, uint id)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindTransformFeedback",
                CallParams = new(Type type, string name, object value)[]
                {
                    (target.GetType(), "target", target),
                    (id.GetType(), "id", id),
                }
            });

            GL.BindTransformFeedback(target, id);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindVertexArray(int array)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (array.GetType(), "array", array),
                }
            });

            GL.BindVertexArray(array);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindVertexArray(uint array)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindVertexArray",
                CallParams = new(Type type, string name, object value)[]
                {
                    (array.GetType(), "array", array),
                }
            });

            GL.BindVertexArray(array);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindVertexBuffer(int bindingindex, int buffer, IntPtr offset, int stride)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindVertexBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.BindVertexBuffer(bindingindex, buffer, offset, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindVertexBuffer",
                CallParams = new(Type type, string name, object value)[]
                {
                    (bindingindex.GetType(), "bindingindex", bindingindex),
                    (buffer.GetType(), "buffer", buffer),
                    (offset.GetType(), "offset", offset),
                    (stride.GetType(), "stride", stride),
                }
            });

            GL.BindVertexBuffer(bindingindex, buffer, offset, stride);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindVertexBuffers(int first, int count, Int32[] buffers, IntPtr[] offsets, Int32[] strides)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindVertexBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                    (offsets.GetType(), "offsets", offsets),
                    (strides.GetType(), "strides", strides),
                }
            });

            GL.BindVertexBuffers(first, count, buffers, offsets, strides);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BindVertexBuffers(uint first, int count, UInt32[] buffers, IntPtr[] offsets, Int32[] strides)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BindVertexBuffers",
                CallParams = new(Type type, string name, object value)[]
                {
                    (first.GetType(), "first", first),
                    (count.GetType(), "count", count),
                    (buffers.GetType(), "buffers", buffers),
                    (offsets.GetType(), "offsets", offsets),
                    (strides.GetType(), "strides", strides),
                }
            });

            GL.BindVertexBuffers(first, count, buffers, offsets, strides);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, Byte[] bitmap)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "Bitmap",
                CallParams = new(Type type, string name, object value)[]
                {
                    (width.GetType(), "width", width),
                    (height.GetType(), "height", height),
                    (xorig.GetType(), "xorig", xorig),
                    (yorig.GetType(), "yorig", yorig),
                    (xmove.GetType(), "xmove", xmove),
                    (ymove.GetType(), "ymove", ymove),
                    (bitmap.GetType(), "bitmap", bitmap),
                }
            });

            GL.Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendColor(float red, float green, float blue, float alpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendColor",
                CallParams = new(Type type, string name, object value)[]
                {
                    (red.GetType(), "red", red),
                    (green.GetType(), "green", green),
                    (blue.GetType(), "blue", blue),
                    (alpha.GetType(), "alpha", alpha),
                }
            });

            GL.BlendColor(red, green, blue, alpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendEquation(BlendEquationMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendEquation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.BlendEquation(mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendEquation(int buf, BlendEquationMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendEquation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.BlendEquation(buf, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendEquation(uint buf, BlendEquationMode mode)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendEquation",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (mode.GetType(), "mode", mode),
                }
            });

            GL.BlendEquation(buf, mode);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendEquationSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (modeRGB.GetType(), "modeRGB", modeRGB),
                    (modeAlpha.GetType(), "modeAlpha", modeAlpha),
                }
            });

            GL.BlendEquationSeparate(modeRGB, modeAlpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendEquationSeparate(int buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendEquationSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (modeRGB.GetType(), "modeRGB", modeRGB),
                    (modeAlpha.GetType(), "modeAlpha", modeAlpha),
                }
            });

            GL.BlendEquationSeparate(buf, modeRGB, modeAlpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendEquationSeparate(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendEquationSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (modeRGB.GetType(), "modeRGB", modeRGB),
                    (modeAlpha.GetType(), "modeAlpha", modeAlpha),
                }
            });

            GL.BlendEquationSeparate(buf, modeRGB, modeAlpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendFunc",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sfactor.GetType(), "sfactor", sfactor),
                    (dfactor.GetType(), "dfactor", dfactor),
                }
            });

            GL.BlendFunc(sfactor, dfactor);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendFunc(int buf, BlendingFactorSrc src, BlendingFactorDest dst)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendFunc",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (src.GetType(), "src", src),
                    (dst.GetType(), "dst", dst),
                }
            });

            GL.BlendFunc(buf, src, dst);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendFunc(uint buf, BlendingFactorSrc src, BlendingFactorDest dst)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendFunc",
                CallParams = new(Type type, string name, object value)[]
                {
                    (buf.GetType(), "buf", buf),
                    (src.GetType(), "src", src),
                    (dst.GetType(), "dst", dst),
                }
            });

            GL.BlendFunc(buf, src, dst);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

        public void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha)
        {
            EnqueueCallRecord(new GlCallRecord
            {
                Tick = DateTime.Now.Ticks,
                Method = "BlendFuncSeparate",
                CallParams = new(Type type, string name, object value)[]
                {
                    (sfactorRGB.GetType(), "sfactorRGB", sfactorRGB),
                    (dfactorRGB.GetType(), "dfactorRGB", dfactorRGB),
                    (sfactorAlpha.GetType(), "sfactorAlpha", sfactorAlpha),
                    (dfactorAlpha.GetType(), "dfactorAlpha", dfactorAlpha),
                }
            });

            GL.BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

            if ((_error = GL.GetError()) != ErrorCode.NoError)
                throw new InvalidOperationException(_error.ToString());
        }

    }
}
