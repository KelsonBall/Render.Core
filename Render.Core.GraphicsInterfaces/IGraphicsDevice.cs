using System;
using System.Text;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;

namespace Render.Core.GraphicsInterface
{
    public interface IGraphicsInterface
    {
        void Accum(AccumOp op, float value);
        void ActiveShaderProgram(int pipeline, int program);
        void ActiveShaderProgram(uint pipeline, uint program);
        void ActiveTexture(TextureUnit texture);
        void AlphaFunc(AlphaFunction func, float @ref);
        bool AreTexturesResident(int n, int[] textures, bool[] residences);
        bool AreTexturesResident(int n, uint[] textures, bool[] residences);
        void ArrayElement(int i);
        void AttachShader(int program, int shader);
        void AttachShader(uint program, uint shader);
        void Begin(PrimitiveType mode);
        void BeginConditionalRender(int id, ConditionalRenderType mode);
        void BeginConditionalRender(uint id, ConditionalRenderType mode);
        void BeginQuery(QueryTarget target, int id);
        void BeginQuery(QueryTarget target, uint id);
        void BeginQueryIndexed(QueryTarget target, int index, int id);
        void BeginQueryIndexed(QueryTarget target, uint index, uint id);
        void BeginTransformFeedback(TransformFeedbackPrimitiveType primitiveMode);
        void BindAttribLocation(int program, int index, string name);
        void BindAttribLocation(uint program, uint index, string name);
        void BindBuffer(BufferTarget target, int buffer);
        void BindBuffer(BufferTarget target, uint buffer);
        void BindBufferBase(BufferRangeTarget target, int index, int buffer);
        void BindBufferBase(BufferRangeTarget target, uint index, uint buffer);
        void BindBufferRange(BufferRangeTarget target, int index, int buffer, IntPtr offset, int size);
        void BindBufferRange(BufferRangeTarget target, int index, int buffer, IntPtr offset, IntPtr size);
        void BindBufferRange(BufferRangeTarget target, uint index, uint buffer, IntPtr offset, int size);
        void BindBufferRange(BufferRangeTarget target, uint index, uint buffer, IntPtr offset, IntPtr size);
        void BindBuffersBase(BufferRangeTarget target, int first, int count, int[] buffers);
        void BindBuffersBase(BufferRangeTarget target, uint first, int count, uint[] buffers);
        void BindBuffersRange(BufferRangeTarget target, int first, int count, int[] buffers, IntPtr[] offsets, IntPtr[] sizes);
        void BindBuffersRange(BufferRangeTarget target, uint first, int count, uint[] buffers, IntPtr[] offsets, IntPtr[] sizes);
        void BindFragDataLocation(int program, int color, string name);
        void BindFragDataLocation(uint program, uint color, string name);
        void BindFragDataLocationIndexed(int program, int colorNumber, int index, string name);
        void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name);
        void BindFramebuffer(FramebufferTarget target, int framebuffer);
        void BindFramebuffer(FramebufferTarget target, uint framebuffer);
        void BindImageTexture(int unit, int texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format);
        void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format);
        void BindImageTextures(int first, int count, int[] textures);
        void BindImageTextures(uint first, int count, uint[] textures);
        void BindProgramPipeline(int pipeline);
        void BindProgramPipeline(uint pipeline);
        void BindRenderbuffer(RenderbufferTarget target, int renderbuffer);
        void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer);
        void BindSampler(int unit, int sampler);
        void BindSampler(uint unit, uint sampler);
        void BindSamplers(int first, int count, int[] samplers);
        void BindSamplers(uint first, int count, uint[] samplers);
        void BindTexture(TextureTarget target, int texture);
        void BindTexture(TextureTarget target, uint texture);
        void BindTextures(int first, int count, int[] textures);
        void BindTextures(uint first, int count, uint[] textures);
        void BindTextureUnit(int unit, int texture);
        void BindTextureUnit(uint unit, uint texture);
        void BindTransformFeedback(TransformFeedbackTarget target, int id);
        void BindTransformFeedback(TransformFeedbackTarget target, uint id);
        void BindVertexArray(int array);
        void BindVertexArray(uint array);
        void BindVertexBuffer(int bindingindex, int buffer, IntPtr offset, int stride);
        void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride);
        void BindVertexBuffers(int first, int count, int[] buffers, IntPtr[] offsets, int[] strides);
        void BindVertexBuffers(uint first, int count, uint[] buffers, IntPtr[] offsets, int[] strides);
        void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap);
        void BlendColor(Color color);
        void BlendColor(Color4 color);
        void BlendColor(float red, float green, float blue, float alpha);
        void BlendEquation(BlendEquationMode mode);
        void BlendEquation(int buf, BlendEquationMode mode);
        void BlendEquation(uint buf, BlendEquationMode mode);
        void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha);
        void BlendEquationSeparate(int buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha);
        void BlendEquationSeparate(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha);
        void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);
        void BlendFunc(int buf, BlendingFactorSrc src, BlendingFactorDest dst);
        void BlendFunc(uint buf, BlendingFactorSrc src, BlendingFactorDest dst);
        void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha);
        void BlendFuncSeparate(int buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha);
        void BlendFuncSeparate(uint buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha);
        void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        void BlitNamedFramebuffer(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        void BufferData(BufferTarget target, int size, IntPtr data, BufferUsageHint usage);
        void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage);
        void BufferData<T2>(BufferTarget target, int size, T2[,,] data, BufferUsageHint usage) where T2 : struct;
        void BufferData<T2>(BufferTarget target, int size, T2[,] data, BufferUsageHint usage) where T2 : struct;
        void BufferData<T2>(BufferTarget target, int size, T2[] data, BufferUsageHint usage) where T2 : struct;
        void BufferData<T2>(BufferTarget target, IntPtr size, T2[,,] data, BufferUsageHint usage) where T2 : struct;
        void BufferData<T2>(BufferTarget target, IntPtr size, T2[,] data, BufferUsageHint usage) where T2 : struct;
        void BufferData<T2>(BufferTarget target, IntPtr size, T2[] data, BufferUsageHint usage) where T2 : struct;
        void BufferStorage(BufferTarget target, int size, IntPtr data, BufferStorageFlags flags);
        void BufferStorage(BufferTarget target, IntPtr size, IntPtr data, BufferStorageFlags flags);
        void BufferStorage<T2>(BufferTarget target, int size, T2[,,] data, BufferStorageFlags flags) where T2 : struct;
        void BufferStorage<T2>(BufferTarget target, int size, T2[,] data, BufferStorageFlags flags) where T2 : struct;
        void BufferStorage<T2>(BufferTarget target, int size, T2[] data, BufferStorageFlags flags) where T2 : struct;
        void BufferStorage<T2>(BufferTarget target, IntPtr size, T2[,,] data, BufferStorageFlags flags) where T2 : struct;
        void BufferStorage<T2>(BufferTarget target, IntPtr size, T2[,] data, BufferStorageFlags flags) where T2 : struct;
        void BufferStorage<T2>(BufferTarget target, IntPtr size, T2[] data, BufferStorageFlags flags) where T2 : struct;
        void BufferSubData(BufferTarget target, IntPtr offset, int size, IntPtr data);
        void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data);
        void BufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,,] data) where T3 : struct;
        void BufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,] data) where T3 : struct;
        void BufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[] data) where T3 : struct;
        void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,,] data) where T3 : struct;
        void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,] data) where T3 : struct;
        void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[] data) where T3 : struct;
        void CallList(int list);
        void CallList(uint list);
        void CallLists(int n, ListNameType type, IntPtr lists);
        void CallLists<T2>(int n, ListNameType type, T2[,,] lists) where T2 : struct;
        void CallLists<T2>(int n, ListNameType type, T2[,] lists) where T2 : struct;
        void CallLists<T2>(int n, ListNameType type, T2[] lists) where T2 : struct;
        FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target);
        All CheckNamedFramebufferStatus(int framebuffer, FramebufferTarget target);
        All CheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target);
        void ClampColor(ClampColorTarget target, ClampColorMode clamp);
        void Clear(ClearBufferMask mask);
        void ClearAccum(float red, float green, float blue, float alpha);
        void ClearBuffer(ClearBuffer buffer, int drawbuffer, float[] value);
        void ClearBuffer(ClearBuffer buffer, int drawbuffer, int[] value);
        void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint[] value);
        void ClearBuffer(ClearBufferCombined buffer, int drawbuffer, float depth, int stencil);
        void ClearBufferData(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data);
        void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,,] data) where T4 : struct;
        void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,] data) where T4 : struct;
        void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, T4[] data) where T4 : struct;
        void ClearBufferSubData(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, IntPtr data);
        void ClearBufferSubData(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, IntPtr data);
        void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,,] data) where T6 : struct;
        void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,] data) where T6 : struct;
        void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[] data) where T6 : struct;
        void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, T6[,,] data) where T6 : struct;
        void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, T6[,] data) where T6 : struct;
        void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, T6[] data) where T6 : struct;
        void ClearColor(Color color);
        void ClearColor(Color4 color);
        void ClearColor(float red, float green, float blue, float alpha);
        void ClearDepth(double depth);
        void ClearDepth(float d);
        void ClearIndex(float c);
        void ClearNamedBufferData(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data);
        void ClearNamedBufferData(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data);
        void ClearNamedBufferData<T4>(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,,] data) where T4 : struct;
        void ClearNamedBufferData<T4>(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,] data) where T4 : struct;
        void ClearNamedBufferData<T4>(int buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[] data) where T4 : struct;
        void ClearNamedBufferData<T4>(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,,] data) where T4 : struct;
        void ClearNamedBufferData<T4>(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[,] data) where T4 : struct;
        void ClearNamedBufferData<T4>(uint buffer, PixelInternalFormat internalformat, PixelFormat format, All type, T4[] data) where T4 : struct;
        void ClearNamedBufferSubData(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, IntPtr data);
        void ClearNamedBufferSubData(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, IntPtr data);
        void ClearNamedBufferSubData<T6>(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,,] data) where T6 : struct;
        void ClearNamedBufferSubData<T6>(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,] data) where T6 : struct;
        void ClearNamedBufferSubData<T6>(int buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[] data) where T6 : struct;
        void ClearNamedBufferSubData<T6>(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,,] data) where T6 : struct;
        void ClearNamedBufferSubData<T6>(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[,] data) where T6 : struct;
        void ClearNamedBufferSubData<T6>(uint buffer, PixelInternalFormat internalformat, IntPtr offset, int size, PixelFormat format, All type, T6[] data) where T6 : struct;
        void ClearNamedFramebuffer(int framebuffer, ClearBuffer buffer, int drawbuffer, float[] value);
        void ClearNamedFramebuffer(int framebuffer, ClearBuffer buffer, int drawbuffer, int[] value);
        void ClearNamedFramebuffer(int framebuffer, ClearBufferCombined buffer, float depth, int stencil);
        void ClearNamedFramebuffer(uint framebuffer, ClearBuffer buffer, int drawbuffer, float[] value);
        void ClearNamedFramebuffer(uint framebuffer, ClearBuffer buffer, int drawbuffer, int[] value);
        void ClearNamedFramebuffer(uint framebuffer, ClearBuffer buffer, int drawbuffer, uint[] value);
        void ClearNamedFramebuffer(uint framebuffer, ClearBufferCombined buffer, float depth, int stencil);
        void ClearStencil(int s);
        void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data);
        void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, IntPtr data);
        void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, T4[,,] data) where T4 : struct;
        void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, T4[,] data) where T4 : struct;
        void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, T4[] data) where T4 : struct;
        void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, T4[,,] data) where T4 : struct;
        void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, T4[,] data) where T4 : struct;
        void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, T4[] data) where T4 : struct;
        void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data);
        void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data);
        void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] data) where T10 : struct;
        void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] data) where T10 : struct;
        void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] data) where T10 : struct;
        void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] data) where T10 : struct;
        void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] data) where T10 : struct;
        void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] data) where T10 : struct;
        void ClientActiveTexture(TextureUnit texture);
        WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, long timeout);
        WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, ulong timeout);
        void ClipControl(ClipOrigin origin, ClipDepthMode depth);
        void ClipPlane(ClipPlaneName plane, double[] equation);
        void Color3(byte red, byte green, byte blue);
        void Color3(byte[] v);
        void Color3(Color color);
        void Color3(double red, double green, double blue);
        void Color3(double[] v);
        void Color3(float red, float green, float blue);
        void Color3(float[] v);
        void Color3(int red, int green, int blue);
        void Color3(int[] v);
        void Color3(sbyte red, sbyte green, sbyte blue);
        void Color3(sbyte[] v);
        void Color3(short red, short green, short blue);
        void Color3(short[] v);
        void Color3(uint red, uint green, uint blue);
        void Color3(uint[] v);
        void Color3(ushort red, ushort green, ushort blue);
        void Color3(ushort[] v);
        void Color3(Vector3 color);
        void Color4(byte red, byte green, byte blue, byte alpha);
        void Color4(byte[] v);
        void Color4(Color color);
        void Color4(Color4 color);
        void Color4(double red, double green, double blue, double alpha);
        void Color4(double[] v);
        void Color4(float red, float green, float blue, float alpha);
        void Color4(float[] v);
        void Color4(int red, int green, int blue, int alpha);
        void Color4(int[] v);
        void Color4(sbyte red, sbyte green, sbyte blue, sbyte alpha);
        void Color4(sbyte[] v);
        void Color4(short red, short green, short blue, short alpha);
        void Color4(short[] v);
        void Color4(uint red, uint green, uint blue, uint alpha);
        void Color4(uint[] v);
        void Color4(ushort red, ushort green, ushort blue, ushort alpha);
        void Color4(ushort[] v);
        void Color4(Vector4 color);
        void ColorMask(bool red, bool green, bool blue, bool alpha);
        void ColorMask(int index, bool r, bool g, bool b, bool a);
        void ColorMask(uint index, bool r, bool g, bool b, bool a);
        void ColorMaterial(MaterialFace face, ColorMaterialParameter mode);
        void ColorP3(PackedPointerType type, int color);
        void ColorP3(PackedPointerType type, uint color);
        void ColorP4(PackedPointerType type, int color);
        void ColorP4(PackedPointerType type, uint color);
        void ColorPointer(int size, ColorPointerType type, int stride, int offset);
        void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer);
        void ColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,,] pointer) where T3 : struct;
        void ColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,] pointer) where T3 : struct;
        void ColorPointer<T3>(int size, ColorPointerType type, int stride, T3[] pointer) where T3 : struct;
        void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data);
        void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T5[,,] data) where T5 : struct;
        void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T5[,] data) where T5 : struct;
        void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T5[] data) where T5 : struct;
        void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table);
        void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,,] table) where T5 : struct;
        void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,] table) where T5 : struct;
        void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[] table) where T5 : struct;
        void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float[] @params);
        void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int[] @params);
        void CompileShader(int shader);
        void CompileShader(uint shader);
        void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data);
        void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, T6[,,] data) where T6 : struct;
        void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, T6[,] data) where T6 : struct;
        void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, T6[] data) where T6 : struct;
        void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);
        void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, T7[,,] data) where T7 : struct;
        void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, T7[,] data) where T7 : struct;
        void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, T7[] data) where T7 : struct;
        void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T8[,,] data) where T8 : struct;
        void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T8[,] data) where T8 : struct;
        void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T8[] data) where T8 : struct;
        void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,,] data) where T6 : struct;
        void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,] data) where T6 : struct;
        void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[] data) where T6 : struct;
        void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,,] data) where T8 : struct;
        void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,] data) where T8 : struct;
        void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[] data) where T8 : struct;
        void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,,] data) where T10 : struct;
        void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,] data) where T10 : struct;
        void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[] data) where T10 : struct;
        void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,,] data) where T6 : struct;
        void CompressedTextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,] data) where T6 : struct;
        void CompressedTextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[] data) where T6 : struct;
        void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,,] data) where T6 : struct;
        void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[,] data) where T6 : struct;
        void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, int imageSize, T6[] data) where T6 : struct;
        void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,,] data) where T8 : struct;
        void CompressedTextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,] data) where T8 : struct;
        void CompressedTextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[] data) where T8 : struct;
        void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,,] data) where T8 : struct;
        void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[,] data) where T8 : struct;
        void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, T8[] data) where T8 : struct;
        void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,,] data) where T10 : struct;
        void CompressedTextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,] data) where T10 : struct;
        void CompressedTextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[] data) where T10 : struct;
        void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,,] data) where T10 : struct;
        void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[,] data) where T10 : struct;
        void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, T10[] data) where T10 : struct;
        void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image);
        void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,,] image) where T5 : struct;
        void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[,] image) where T5 : struct;
        void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, T5[] image) where T5 : struct;
        void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image);
        void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,,] image) where T6 : struct;
        void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,] image) where T6 : struct;
        void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[] image) where T6 : struct;
        void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float @params);
        void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float[] @params);
        void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int @params);
        void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int[] @params);
        void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, int size);
        void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width);
        void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int x, int y, int width);
        void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width);
        void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width, int height);
        void CopyImageSubData(int srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        void CopyImageSubData(uint srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        void CopyNamedBufferSubData(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, int size);
        void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, int size);
        void CopyPixels(int x, int y, int width, int height, PixelCopyType type);
        void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border);
        void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border);
        void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width);
        void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        void CopyTextureSubImage1D(int texture, int level, int xoffset, int x, int y, int width);
        void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width);
        void CopyTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        void CopyTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        void CreateBuffers(int n, int[] buffers);
        void CreateBuffers(int n, uint[] buffers);
        void CreateFramebuffers(int n, int[] framebuffers);
        void CreateFramebuffers(int n, uint[] framebuffers);
        int CreateProgram();
        void CreateProgramPipelines(int n, int[] pipelines);
        void CreateProgramPipelines(int n, uint[] pipelines);
        void CreateQueries(QueryTarget target, int n, int[] ids);
        void CreateQueries(QueryTarget target, int n, uint[] ids);
        void CreateRenderbuffers(int n, int[] renderbuffers);
        void CreateRenderbuffers(int n, uint[] renderbuffers);
        void CreateSamplers(int n, int[] samplers);
        void CreateSamplers(int n, uint[] samplers);
        int CreateShader(ShaderType type);
        int CreateShaderProgram(ShaderType type, int count, string[] strings);
        void CreateTextures(TextureTarget target, int n, int[] textures);
        void CreateTextures(TextureTarget target, int n, uint[] textures);
        void CreateTransformFeedbacks(int n, int[] ids);
        void CreateTransformFeedbacks(int n, uint[] ids);
        void CreateVertexArrays(int n, int[] arrays);
        void CreateVertexArrays(int n, uint[] arrays);
        void CullFace(CullFaceMode mode);
        void DebugMessageCallback(DebugProc callback, IntPtr userParam);
        void DebugMessageCallback<T1>(DebugProc callback, T1[,,] userParam) where T1 : struct;
        void DebugMessageCallback<T1>(DebugProc callback, T1[,] userParam) where T1 : struct;
        void DebugMessageCallback<T1>(DebugProc callback, T1[] userParam) where T1 : struct;
        void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int[] ids, bool enabled);
        void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint[] ids, bool enabled);
        void DebugMessageInsert(DebugSourceExternal source, DebugType type, int id, DebugSeverity severity, int length, string buf);
        void DebugMessageInsert(DebugSourceExternal source, DebugType type, uint id, DebugSeverity severity, int length, string buf);
        void DeleteBuffer(int buffers);
        void DeleteBuffer(uint buffers);
        void DeleteBuffers(int n, int[] buffers);
        void DeleteBuffers(int n, uint[] buffers);
        void DeleteFramebuffer(int framebuffers);
        void DeleteFramebuffer(uint framebuffers);
        void DeleteFramebuffers(int n, int[] framebuffers);
        void DeleteFramebuffers(int n, uint[] framebuffers);
        void DeleteLists(int list, int range);
        void DeleteLists(uint list, int range);
        void DeleteProgram(int program);
        void DeleteProgram(uint program);
        void DeleteProgramPipeline(int pipelines);
        void DeleteProgramPipeline(uint pipelines);
        void DeleteProgramPipelines(int n, int[] pipelines);
        void DeleteProgramPipelines(int n, uint[] pipelines);
        void DeleteQueries(int n, int[] ids);
        void DeleteQueries(int n, uint[] ids);
        void DeleteQuery(int ids);
        void DeleteQuery(uint ids);
        void DeleteRenderbuffer(int renderbuffers);
        void DeleteRenderbuffer(uint renderbuffers);
        void DeleteRenderbuffers(int n, int[] renderbuffers);
        void DeleteRenderbuffers(int n, uint[] renderbuffers);
        void DeleteSampler(int samplers);
        void DeleteSampler(uint samplers);
        void DeleteSamplers(int count, int[] samplers);
        void DeleteSamplers(int count, uint[] samplers);
        void DeleteShader(int shader);
        void DeleteShader(uint shader);
        void DeleteSync(IntPtr sync);
        void DeleteTexture(int textures);
        void DeleteTexture(uint textures);
        void DeleteTextures(int n, int[] textures);
        void DeleteTextures(int n, uint[] textures);
        void DeleteTransformFeedback(int ids);
        void DeleteTransformFeedback(uint ids);
        void DeleteTransformFeedbacks(int n, int[] ids);
        void DeleteTransformFeedbacks(int n, uint[] ids);
        void DeleteVertexArray(int arrays);
        void DeleteVertexArray(uint arrays);
        void DeleteVertexArrays(int n, int[] arrays);
        void DeleteVertexArrays(int n, uint[] arrays);
        void DepthFunc(DepthFunction func);
        void DepthMask(bool flag);
        void DepthRange(double near, double far);
        void DepthRange(float n, float f);
        void DepthRangeArray(int first, int count, double[] v);
        void DepthRangeArray(uint first, int count, double[] v);
        void DepthRangeIndexed(int index, double n, double f);
        void DepthRangeIndexed(uint index, double n, double f);
        void DetachShader(int program, int shader);
        void DetachShader(uint program, uint shader);
        void Disable(EnableCap cap);
        void Disable(IndexedEnableCap target, int index);
        void Disable(IndexedEnableCap target, uint index);
        void DisableClientState(ArrayCap array);
        void DisableVertexArrayAttrib(int vaobj, int index);
        void DisableVertexArrayAttrib(uint vaobj, uint index);
        void DisableVertexAttribArray(int index);
        void DisableVertexAttribArray(uint index);
        void DispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z);
        void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);
        void DispatchComputeIndirect(IntPtr indirect);
        void DrawArrays(PrimitiveType mode, int first, int count);
        void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect);
        void DrawArraysIndirect<T1>(PrimitiveType mode, T1[,,] indirect) where T1 : struct;
        void DrawArraysIndirect<T1>(PrimitiveType mode, T1[,] indirect) where T1 : struct;
        void DrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect) where T1 : struct;
        void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount);
        void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, int baseinstance);
        void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance);
        void DrawBuffer(DrawBufferMode buf);
        void DrawBuffers(int n, DrawBuffersEnum[] bufs);
        void DrawElements(BeginMode mode, int count, DrawElementsType type, int indices);
        void DrawElements(PrimitiveType mode, int count, DrawElementsType type, int indices);
        void DrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices);
        void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices) where T3 : struct;
        void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices) where T3 : struct;
        void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices) where T3 : struct;
        void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex);
        void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int basevertex) where T3 : struct;
        void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int basevertex) where T3 : struct;
        void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int basevertex) where T3 : struct;
        void DrawElementsIndirect(PrimitiveType mode, All type, IntPtr indirect);
        void DrawElementsIndirect<T2>(PrimitiveType mode, All type, T2[,,] indirect) where T2 : struct;
        void DrawElementsIndirect<T2>(PrimitiveType mode, All type, T2[,] indirect) where T2 : struct;
        void DrawElementsIndirect<T2>(PrimitiveType mode, All type, T2[] indirect) where T2 : struct;
        void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount);
        void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount) where T3 : struct;
        void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount) where T3 : struct;
        void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount) where T3 : struct;
        void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int baseinstance);
        void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, uint baseinstance);
        void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, uint baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, uint baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, uint baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex);
        void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int basevertex) where T3 : struct;
        void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int basevertex) where T3 : struct;
        void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int basevertex) where T3 : struct;
        void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, int baseinstance);
        void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, uint baseinstance);
        void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,,] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[,] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct;
        void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, T3[] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct;
        void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, T4[,,] pixels) where T4 : struct;
        void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, T4[,] pixels) where T4 : struct;
        void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, T4[] pixels) where T4 : struct;
        void DrawRangeElements(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices);
        void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices);
        void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,,] indices) where T5 : struct;
        void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,] indices) where T5 : struct;
        void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[] indices) where T5 : struct;
        void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,,] indices) where T5 : struct;
        void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,] indices) where T5 : struct;
        void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[] indices) where T5 : struct;
        void DrawRangeElementsBaseVertex(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices, int basevertex);
        void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex);
        void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,,] indices, int basevertex) where T5 : struct;
        void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[,] indices, int basevertex) where T5 : struct;
        void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, T5[] indices, int basevertex) where T5 : struct;
        void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,,] indices, int basevertex) where T5 : struct;
        void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[,] indices, int basevertex) where T5 : struct;
        void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, T5[] indices, int basevertex) where T5 : struct;
        void DrawTransformFeedback(PrimitiveType mode, int id);
        void DrawTransformFeedback(PrimitiveType mode, uint id);
        void DrawTransformFeedbackInstanced(PrimitiveType mode, int id, int instancecount);
        void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount);
        void DrawTransformFeedbackStream(PrimitiveType mode, int id, int stream);
        void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream);
        void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, int id, int stream, int instancecount);
        void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount);
        void EdgeFlag(bool flag);
        void EdgeFlagPointer(int stride, int offset);
        void EdgeFlagPointer(int stride, IntPtr pointer);
        void EdgeFlagPointer<T1>(int stride, T1[,,] pointer) where T1 : struct;
        void EdgeFlagPointer<T1>(int stride, T1[,] pointer) where T1 : struct;
        void EdgeFlagPointer<T1>(int stride, T1[] pointer) where T1 : struct;
        void Enable(EnableCap cap);
        void Enable(IndexedEnableCap target, int index);
        void Enable(IndexedEnableCap target, uint index);
        void EnableClientState(ArrayCap array);
        void EnableVertexArrayAttrib(int vaobj, int index);
        void EnableVertexArrayAttrib(uint vaobj, uint index);
        void EnableVertexAttribArray(int index);
        void EnableVertexAttribArray(uint index);
        void End();
        void EndConditionalRender();
        void EndList();
        void EndQuery(QueryTarget target);
        void EndQueryIndexed(QueryTarget target, int index);
        void EndQueryIndexed(QueryTarget target, uint index);
        void EndTransformFeedback();
        void EvalCoord1(double u);
        void EvalCoord1(float u);
        void EvalCoord2(double u, double v);
        void EvalCoord2(double[] u);
        void EvalCoord2(float u, float v);
        void EvalCoord2(float[] u);
        void EvalMesh1(MeshMode1 mode, int i1, int i2);
        void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2);
        void EvalPoint1(int i);
        void EvalPoint2(int i, int j);
        void FeedbackBuffer(int size, FeedbackType type, float[] buffer);
        IntPtr FenceSync(SyncCondition condition, WaitSyncFlags flags);
        void Finish();
        void Flush();
        void FlushMappedBufferRange(BufferTarget target, IntPtr offset, int length);
        void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length);
        void FlushMappedNamedBufferRange(int buffer, IntPtr offset, int length);
        void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, int length);
        void Fog(FogParameter pname, float param);
        void Fog(FogParameter pname, float[] @params);
        void Fog(FogParameter pname, int param);
        void Fog(FogParameter pname, int[] @params);
        void FogCoord(double coord);
        void FogCoord(float coord);
        void FogCoordPointer(FogPointerType type, int stride, int offset);
        void FogCoordPointer(FogPointerType type, int stride, IntPtr pointer);
        void FogCoordPointer<T2>(FogPointerType type, int stride, T2[,,] pointer) where T2 : struct;
        void FogCoordPointer<T2>(FogPointerType type, int stride, T2[,] pointer) where T2 : struct;
        void FogCoordPointer<T2>(FogPointerType type, int stride, T2[] pointer) where T2 : struct;
        void FramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, int param);
        void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer);
        void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level);
        void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);
        void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level);
        void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level);
        void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset);
        void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);
        void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer);
        void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);
        void FrontFace(FrontFaceDirection mode);
        void Frustum(double left, double right, double bottom, double top, double zNear, double zFar);
        int GenBuffer();
        void GenBuffers(int n, int[] buffers);
        void GenBuffers(int n, uint[] buffers);
        void GenerateMipmap(GenerateMipmapTarget target);
        void GenerateTextureMipmap(int texture);
        void GenerateTextureMipmap(uint texture);
        int GenFramebuffer();
        void GenFramebuffers(int n, int[] framebuffers);
        void GenFramebuffers(int n, uint[] framebuffers);
        int GenLists(int range);
        int GenProgramPipeline();
        void GenProgramPipelines(int n, int[] pipelines);
        void GenProgramPipelines(int n, uint[] pipelines);
        void GenQueries(int n, int[] ids);
        void GenQueries(int n, uint[] ids);
        int GenQuery();
        int GenRenderbuffer();
        void GenRenderbuffers(int n, int[] renderbuffers);
        void GenRenderbuffers(int n, uint[] renderbuffers);
        int GenSampler();
        void GenSamplers(int count, int[] samplers);
        void GenSamplers(int count, uint[] samplers);
        int GenTexture();
        void GenTextures(int n, int[] textures);
        void GenTextures(int n, uint[] textures);
        int GenTransformFeedback();
        void GenTransformFeedbacks(int n, int[] ids);
        void GenTransformFeedbacks(int n, uint[] ids);
        int GenVertexArray();
        void GenVertexArrays(int n, int[] arrays);
        void GenVertexArrays(int n, uint[] arrays);
        void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, int[] @params);
        void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, int[] @params);
        void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, int[] values);
        void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, int[] values);
        void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, int[] @params);
        void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, int[] @params);
        string GetActiveUniformBlockName(int program, int uniformIndex);
        string GetActiveUniformName(int program, int uniformIndex);
        void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, ActiveUniformParameter pname, int[] @params);
        void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, ActiveUniformParameter pname, int[] @params);
        int GetAttribLocation(int program, string name);
        int GetAttribLocation(uint program, string name);
        void GetBoolean(GetIndexedPName target, int index, bool[] data);
        void GetBoolean(GetIndexedPName target, uint index, bool[] data);
        bool GetBoolean(GetPName pname);
        void GetBoolean(GetPName pname, bool[] data);
        void GetBufferParameter(BufferTarget target, BufferParameterName pname, int[] @params);
        void GetBufferParameter(BufferTarget target, BufferParameterName pname, long[] @params);
        void GetBufferPointer(BufferTarget target, BufferPointer pname, IntPtr @params);
        void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, T2[,,] @params) where T2 : struct;
        void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, T2[,] @params) where T2 : struct;
        void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, T2[] @params) where T2 : struct;
        void GetBufferSubData(BufferTarget target, IntPtr offset, int size, IntPtr data);
        void GetBufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data);
        void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,,] data) where T3 : struct;
        void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[,] data) where T3 : struct;
        void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, int size, T3[] data) where T3 : struct;
        void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,,] data) where T3 : struct;
        void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[,] data) where T3 : struct;
        void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, T3[] data) where T3 : struct;
        void GetClipPlane(ClipPlaneName plane, double[] equation);
        void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr table);
        void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, T3[,,] table) where T3 : struct;
        void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, T3[,] table) where T3 : struct;
        void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, T3[] table) where T3 : struct;
        void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, float[] @params);
        void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, int[] @params);
        void GetCompressedTexImage(TextureTarget target, int level, IntPtr img);
        void GetCompressedTexImage<T2>(TextureTarget target, int level, T2[,,] img) where T2 : struct;
        void GetCompressedTexImage<T2>(TextureTarget target, int level, T2[,] img) where T2 : struct;
        void GetCompressedTexImage<T2>(TextureTarget target, int level, T2[] img) where T2 : struct;
        void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels);
        void GetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels);
        void GetCompressedTextureImage<T3>(int texture, int level, int bufSize, T3[,,] pixels) where T3 : struct;
        void GetCompressedTextureImage<T3>(int texture, int level, int bufSize, T3[,] pixels) where T3 : struct;
        void GetCompressedTextureImage<T3>(int texture, int level, int bufSize, T3[] pixels) where T3 : struct;
        void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, T3[,,] pixels) where T3 : struct;
        void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, T3[,] pixels) where T3 : struct;
        void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, T3[] pixels) where T3 : struct;
        void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels);
        void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels);
        void GetCompressedTextureSubImage<T9>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,,] pixels) where T9 : struct;
        void GetCompressedTextureSubImage<T9>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,] pixels) where T9 : struct;
        void GetCompressedTextureSubImage<T9>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[] pixels) where T9 : struct;
        void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,,] pixels) where T9 : struct;
        void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[,] pixels) where T9 : struct;
        void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T9[] pixels) where T9 : struct;
        void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, IntPtr image);
        void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, T3[,,] image) where T3 : struct;
        void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, T3[,] image) where T3 : struct;
        void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, T3[] image) where T3 : struct;
        void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, float[] @params);
        void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, int[] @params);
        int GetDebugMessageLog(int count, int bufSize, DebugSource[] sources, DebugType[] types, int[] ids, DebugSeverity[] severities, int[] lengths, StringBuilder messageLog);
        int GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, StringBuilder messageLog);
        void GetDouble(GetIndexedPName target, int index, double[] data);
        void GetDouble(GetIndexedPName target, uint index, double[] data);
        double GetDouble(GetPName pname);
        void GetDouble(GetPName pname, double[] data);
        ErrorCode GetError();
        void GetFloat(GetIndexedPName target, int index, float[] data);
        void GetFloat(GetIndexedPName target, uint index, float[] data);
        float GetFloat(GetPName pname);
        void GetFloat(GetPName pname, float[] data);
        int GetFragDataIndex(int program, string name);
        int GetFragDataIndex(uint program, string name);
        int GetFragDataLocation(int program, string name);
        int GetFragDataLocation(uint program, string name);
        void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, int[] @params);
        void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, int[] @params);
        ResetStatus GetGraphicsResetStatus();
        void GetHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, IntPtr values);
        void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, T4[,,] values) where T4 : struct;
        void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, T4[,] values) where T4 : struct;
        void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, T4[] values) where T4 : struct;
        void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, float[] @params);
        void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, int[] @params);
        void GetInteger(GetIndexedPName target, int index, int[] data);
        void GetInteger(GetIndexedPName target, uint index, int[] data);
        int GetInteger(GetPName pname);
        void GetInteger(GetPName pname, int[] data);
        void GetInteger64(GetIndexedPName target, int index, long[] data);
        void GetInteger64(GetIndexedPName target, uint index, long[] data);
        long GetInteger64(GetPName pname);
        void GetInteger64(GetPName pname, long[] data);
        void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, int[] @params);
        void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, long[] @params);
        void GetLight(LightName light, LightParameter pname, float[] @params);
        void GetLight(LightName light, LightParameter pname, int[] @params);
        void GetMap(MapTarget target, GetMapQuery query, double[] v);
        void GetMap(MapTarget target, GetMapQuery query, float[] v);
        void GetMap(MapTarget target, GetMapQuery query, int[] v);
        void GetMaterial(MaterialFace face, MaterialParameter pname, float[] @params);
        void GetMaterial(MaterialFace face, MaterialParameter pname, int[] @params);
        void GetMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, IntPtr values);
        void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, T4[,,] values) where T4 : struct;
        void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, T4[,] values) where T4 : struct;
        void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, T4[] values) where T4 : struct;
        void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, float[] @params);
        void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, int[] @params);
        void GetMultisample(GetMultisamplePName pname, int index, float[] val);
        void GetMultisample(GetMultisamplePName pname, uint index, float[] val);
        void GetNamedBufferParameter(int buffer, BufferParameterName pname, int[] @params);
        void GetNamedBufferParameter(int buffer, BufferParameterName pname, long[] @params);
        void GetNamedBufferParameter(uint buffer, BufferParameterName pname, int[] @params);
        void GetNamedBufferParameter(uint buffer, BufferParameterName pname, long[] @params);
        void GetNamedBufferPointer(int buffer, BufferPointer pname, IntPtr @params);
        void GetNamedBufferPointer(uint buffer, BufferPointer pname, IntPtr @params);
        void GetNamedBufferPointer<T2>(int buffer, BufferPointer pname, T2[,,] @params) where T2 : struct;
        void GetNamedBufferPointer<T2>(int buffer, BufferPointer pname, T2[,] @params) where T2 : struct;
        void GetNamedBufferPointer<T2>(int buffer, BufferPointer pname, T2[] @params) where T2 : struct;
        void GetNamedBufferPointer<T2>(uint buffer, BufferPointer pname, T2[,,] @params) where T2 : struct;
        void GetNamedBufferPointer<T2>(uint buffer, BufferPointer pname, T2[,] @params) where T2 : struct;
        void GetNamedBufferPointer<T2>(uint buffer, BufferPointer pname, T2[] @params) where T2 : struct;
        void GetNamedBufferSubData(int buffer, IntPtr offset, int size, IntPtr data);
        void GetNamedBufferSubData(uint buffer, IntPtr offset, int size, IntPtr data);
        void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,,] data) where T3 : struct;
        void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,] data) where T3 : struct;
        void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[] data) where T3 : struct;
        void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,,] data) where T3 : struct;
        void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,] data) where T3 : struct;
        void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[] data) where T3 : struct;
        void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, FramebufferParameterName pname, int[] @params);
        void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, FramebufferParameterName pname, int[] @params);
        void GetNamedFramebufferParameter(int framebuffer, FramebufferDefaultParameter pname, int[] param);
        void GetNamedFramebufferParameter(uint framebuffer, FramebufferDefaultParameter pname, int[] param);
        void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, int[] @params);
        void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, int[] @params);
        void GetnColorTable(Version45 target, Version45 format, Version45 type, int bufSize, IntPtr table);
        void GetnColorTable<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,,] table) where T4 : struct;
        void GetnColorTable<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,] table) where T4 : struct;
        void GetnColorTable<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[] table) where T4 : struct;
        void GetnCompressedTexImage(Version45 target, int lod, int bufSize, IntPtr pixels);
        void GetnCompressedTexImage<T3>(Version45 target, int lod, int bufSize, T3[,,] pixels) where T3 : struct;
        void GetnCompressedTexImage<T3>(Version45 target, int lod, int bufSize, T3[,] pixels) where T3 : struct;
        void GetnCompressedTexImage<T3>(Version45 target, int lod, int bufSize, T3[] pixels) where T3 : struct;
        void GetnConvolutionFilter(Version45 target, Version45 format, Version45 type, int bufSize, IntPtr image);
        void GetnConvolutionFilter<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,,] image) where T4 : struct;
        void GetnConvolutionFilter<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[,] image) where T4 : struct;
        void GetnConvolutionFilter<T4>(Version45 target, Version45 format, Version45 type, int bufSize, T4[] image) where T4 : struct;
        void GetnHistogram(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, IntPtr values);
        void GetnHistogram<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,,] values) where T5 : struct;
        void GetnHistogram<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,] values) where T5 : struct;
        void GetnHistogram<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[] values) where T5 : struct;
        void GetnMap(Version45 target, Version45 query, int bufSize, double[] v);
        void GetnMap(Version45 target, Version45 query, int bufSize, float[] v);
        void GetnMap(Version45 target, Version45 query, int bufSize, int[] v);
        void GetnMinmax(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, IntPtr values);
        void GetnMinmax<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,,] values) where T5 : struct;
        void GetnMinmax<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[,] values) where T5 : struct;
        void GetnMinmax<T5>(Version45 target, bool reset, Version45 format, Version45 type, int bufSize, T5[] values) where T5 : struct;
        void GetnPixelMap(Version45 map, int bufSize, float[] values);
        void GetnPixelMap(Version45 map, int bufSize, int[] values);
        void GetnPixelMap(Version45 map, int bufSize, short[] values);
        void GetnPixelMap(Version45 map, int bufSize, uint[] values);
        void GetnPixelMap(Version45 map, int bufSize, ushort[] values);
        byte GetnPolygonStipple();
        void GetnPolygonStipple(int bufSize, byte[] pattern);
        void GetnSeparableFilter(Version45 target, Version45 format, Version45 type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span);
        void GetnSeparableFilter<T4, T6, T7>(Version45 target, Version45 format, Version45 type, int rowBufSize, T4[,,] row, int columnBufSize, T6[,,] column, T7[,,] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct;
        void GetnSeparableFilter<T4, T6, T7>(Version45 target, Version45 format, Version45 type, int rowBufSize, T4[,] row, int columnBufSize, T6[,] column, T7[,] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct;
        void GetnSeparableFilter<T4, T6, T7>(Version45 target, Version45 format, Version45 type, int rowBufSize, T4[] row, int columnBufSize, T6[] column, T7[] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct;
        void GetnTexImage(Version45 target, int level, Version45 format, Version45 type, int bufSize, IntPtr pixels);
        void GetnTexImage<T5>(Version45 target, int level, Version45 format, Version45 type, int bufSize, T5[,,] pixels) where T5 : struct;
        void GetnTexImage<T5>(Version45 target, int level, Version45 format, Version45 type, int bufSize, T5[,] pixels) where T5 : struct;
        void GetnTexImage<T5>(Version45 target, int level, Version45 format, Version45 type, int bufSize, T5[] pixels) where T5 : struct;
        void GetnUniform(int program, int location, int bufSize, double[] @params);
        void GetnUniform(int program, int location, int bufSize, float[] @params);
        void GetnUniform(int program, int location, int bufSize, int[] @params);
        void GetnUniform(uint program, int location, int bufSize, double[] @params);
        void GetnUniform(uint program, int location, int bufSize, float[] @params);
        void GetnUniform(uint program, int location, int bufSize, int[] @params);
        void GetnUniform(uint program, int location, int bufSize, uint[] @params);
        void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, int[] length, StringBuilder label);
        void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, int[] length, StringBuilder label);
        float GetPixelMap(PixelMap map);
        void GetPixelMap(PixelMap map, float[] values);
        void GetPixelMap(PixelMap map, int[] values);
        void GetPixelMap(PixelMap map, short[] values);
        void GetPixelMap(PixelMap map, uint[] values);
        void GetPixelMap(PixelMap map, ushort[] values);
        void GetPixelMapx(OesFixedPoint map, int size, int[] values);
        void GetPointer(GetPointervPName pname, IntPtr @params);
        void GetPointer<T1>(GetPointervPName pname, T1[,,] @params) where T1 : struct;
        void GetPointer<T1>(GetPointervPName pname, T1[,] @params) where T1 : struct;
        void GetPointer<T1>(GetPointervPName pname, T1[] @params) where T1 : struct;
        byte GetPolygonStipple();
        void GetPolygonStipple(byte[] mask);
        void GetProgram(int program, GetProgramParameterName pname, int[] @params);
        void GetProgram(uint program, GetProgramParameterName pname, int[] @params);
        string GetProgramInfoLog(int program);
        void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, int[] @params);
        void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, int[] @params);
        void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, int[] @params);
        void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, int[] @params);
        int GetProgramResourceIndex(int program, ProgramInterface programInterface, string name);
        int GetProgramResourceIndex(uint program, ProgramInterface programInterface, string name);
        int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name);
        int GetProgramResourceLocation(uint program, ProgramInterface programInterface, string name);
        int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name);
        int GetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, string name);
        void GetQuery(QueryTarget target, GetQueryParam pname, int[] @params);
        void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, int[] @params);
        void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, int[] @params);
        void GetQueryObject(int id, GetQueryObjectParam pname, int[] @params);
        void GetQueryObject(int id, GetQueryObjectParam pname, long[] @params);
        void GetQueryObject(uint id, GetQueryObjectParam pname, int[] @params);
        void GetQueryObject(uint id, GetQueryObjectParam pname, long[] @params);
        void GetQueryObject(uint id, GetQueryObjectParam pname, uint[] @params);
        void GetQueryObject(uint id, GetQueryObjectParam pname, ulong[] @params);
        void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, int[] @params);
        void GetSamplerParameter(int sampler, SamplerParameterName pname, float[] @params);
        void GetSamplerParameter(int sampler, SamplerParameterName pname, int[] @params);
        void GetSamplerParameter(uint sampler, SamplerParameterName pname, float[] @params);
        void GetSamplerParameter(uint sampler, SamplerParameterName pname, int[] @params);
        void GetSamplerParameterI(int sampler, All pname, int[] @params);
        void GetSamplerParameterI(uint sampler, All pname, int[] @params);
        void GetSamplerParameterI(uint sampler, All pname, uint[] @params);
        void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span);
        void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, T3[,,] row, T4[,,] column, T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct;
        void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, T3[,] row, T4[,] column, T5[,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct;
        void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, T3[] row, T4[] column, T5[] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct;
        void GetShader(int shader, ShaderParameter pname, int[] @params);
        void GetShader(uint shader, ShaderParameter pname, int[] @params);
        string GetShaderInfoLog(int shader);
        void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, int[] range, int[] precision);
        string GetString(StringName name);
        string GetString(StringNameIndexed name, int index);
        string GetString(StringNameIndexed name, uint index);
        int GetSubroutineIndex(int program, ShaderType shadertype, string name);
        int GetSubroutineIndex(uint program, ShaderType shadertype, string name);
        int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name);
        int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name);
        void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, float[] @params);
        void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, int[] @params);
        void GetTexGen(TextureCoordName coord, TextureGenParameter pname, double[] @params);
        void GetTexGen(TextureCoordName coord, TextureGenParameter pname, float[] @params);
        void GetTexGen(TextureCoordName coord, TextureGenParameter pname, int[] @params);
        void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels);
        void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, T4[,,] pixels) where T4 : struct;
        void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, T4[,] pixels) where T4 : struct;
        void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, T4[] pixels) where T4 : struct;
        void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, float[] @params);
        void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, int[] @params);
        void GetTexParameter(TextureTarget target, GetTextureParameter pname, float[] @params);
        void GetTexParameter(TextureTarget target, GetTextureParameter pname, int[] @params);
        void GetTexParameterI(TextureTarget target, GetTextureParameter pname, int[] @params);
        void GetTexParameterI(TextureTarget target, GetTextureParameter pname, uint[] @params);
        void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels);
        void GetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels);
        void GetTextureImage<T5>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,,] pixels) where T5 : struct;
        void GetTextureImage<T5>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,] pixels) where T5 : struct;
        void GetTextureImage<T5>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T5[] pixels) where T5 : struct;
        void GetTextureImage<T5>(uint texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,,] pixels) where T5 : struct;
        void GetTextureImage<T5>(uint texture, int level, PixelFormat format, PixelType type, int bufSize, T5[,] pixels) where T5 : struct;
        void GetTextureImage<T5>(uint texture, int level, PixelFormat format, PixelType type, int bufSize, T5[] pixels) where T5 : struct;
        void GetTextureLevelParameter(int texture, int level, GetTextureParameter pname, float[] @params);
        void GetTextureLevelParameter(int texture, int level, GetTextureParameter pname, int[] @params);
        void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, float[] @params);
        void GetTextureLevelParameter(uint texture, int level, GetTextureParameter pname, int[] @params);
        void GetTextureParameter(int texture, GetTextureParameter pname, float[] @params);
        void GetTextureParameter(int texture, GetTextureParameter pname, int[] @params);
        void GetTextureParameter(uint texture, GetTextureParameter pname, float[] @params);
        void GetTextureParameter(uint texture, GetTextureParameter pname, int[] @params);
        void GetTextureParameterI(int texture, All pname, int[] @params);
        void GetTextureParameterI(uint texture, All pname, int[] @params);
        void GetTextureParameterI(uint texture, All pname, uint[] @params);
        void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels);
        void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels);
        void GetTextureSubImage<T11>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,,] pixels) where T11 : struct;
        void GetTextureSubImage<T11>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,] pixels) where T11 : struct;
        void GetTextureSubImage<T11>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[] pixels) where T11 : struct;
        void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,,] pixels) where T11 : struct;
        void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[,] pixels) where T11 : struct;
        void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T11[] pixels) where T11 : struct;
        void GetTransformFeedback(int xfb, TransformFeedbackIndexedParameter pname, int index, int[] param);
        void GetTransformFeedback(int xfb, TransformFeedbackParameter pname, int[] param);
        void GetTransformFeedback(uint xfb, TransformFeedbackIndexedParameter pname, uint index, int[] param);
        void GetTransformFeedback(uint xfb, TransformFeedbackParameter pname, int[] param);
        void GetTransformFeedbacki64_(int xfb, TransformFeedbackIndexedParameter pname, int index, long[] param);
        void GetTransformFeedbacki64_(uint xfb, TransformFeedbackIndexedParameter pname, uint index, long[] param);
        void GetUniform(int program, int location, double[] @params);
        void GetUniform(int program, int location, float[] @params);
        void GetUniform(int program, int location, int[] @params);
        void GetUniform(uint program, int location, double[] @params);
        void GetUniform(uint program, int location, float[] @params);
        void GetUniform(uint program, int location, int[] @params);
        void GetUniform(uint program, int location, uint[] @params);
        int GetUniformBlockIndex(int program, string uniformBlockName);
        int GetUniformBlockIndex(uint program, string uniformBlockName);
        void GetUniformIndices(int program, int uniformCount, string[] uniformNames, int[] uniformIndices);
        void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, uint[] uniformIndices);
        int GetUniformLocation(int program, string name);
        int GetUniformLocation(uint program, string name);
        void GetVertexArray(int vaobj, VertexArrayParameter pname, int[] param);
        void GetVertexArray(uint vaobj, VertexArrayParameter pname, int[] param);
        void GetVertexArrayIndexed(int vaobj, int index, VertexArrayIndexedParameter pname, int[] param);
        void GetVertexArrayIndexed(uint vaobj, uint index, VertexArrayIndexedParameter pname, int[] param);
        void GetVertexArrayIndexed64(int vaobj, int index, VertexArrayIndexed64Parameter pname, long[] param);
        void GetVertexArrayIndexed64(uint vaobj, uint index, VertexArrayIndexed64Parameter pname, long[] param);
        void GetVertexAttrib(int index, VertexAttribParameter pname, double[] @params);
        void GetVertexAttrib(int index, VertexAttribParameter pname, float[] @params);
        void GetVertexAttrib(int index, VertexAttribParameter pname, int[] @params);
        void GetVertexAttrib(uint index, VertexAttribParameter pname, double[] @params);
        void GetVertexAttrib(uint index, VertexAttribParameter pname, float[] @params);
        void GetVertexAttrib(uint index, VertexAttribParameter pname, int[] @params);
        void GetVertexAttribL(int index, VertexAttribParameter pname, double[] @params);
        void GetVertexAttribL(uint index, VertexAttribParameter pname, double[] @params);
        void GetVertexAttribPointer(int index, VertexAttribPointerParameter pname, IntPtr pointer);
        void GetVertexAttribPointer(uint index, VertexAttribPointerParameter pname, IntPtr pointer);
        void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, T2[,,] pointer) where T2 : struct;
        void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, T2[,] pointer) where T2 : struct;
        void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, T2[] pointer) where T2 : struct;
        void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, T2[,,] pointer) where T2 : struct;
        void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, T2[,] pointer) where T2 : struct;
        void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, T2[] pointer) where T2 : struct;
        void Hint(HintTarget target, HintMode mode);
        void Histogram(HistogramTarget target, int width, PixelInternalFormat internalformat, bool sink);
        void Index(byte c);
        void Index(double c);
        void Index(float c);
        void Index(int c);
        void Index(short c);
        void IndexMask(int mask);
        void IndexMask(uint mask);
        void IndexPointer(IndexPointerType type, int stride, int offset);
        void IndexPointer(IndexPointerType type, int stride, IntPtr pointer);
        void IndexPointer<T2>(IndexPointerType type, int stride, T2[,,] pointer) where T2 : struct;
        void IndexPointer<T2>(IndexPointerType type, int stride, T2[,] pointer) where T2 : struct;
        void IndexPointer<T2>(IndexPointerType type, int stride, T2[] pointer) where T2 : struct;
        void InitNames();
        void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer);
        void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, T2[,,] pointer) where T2 : struct;
        void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, T2[,] pointer) where T2 : struct;
        void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, T2[] pointer) where T2 : struct;
        void InvalidateBufferData(int buffer);
        void InvalidateBufferData(uint buffer);
        void InvalidateBufferSubData(int buffer, IntPtr offset, int length);
        void InvalidateBufferSubData(int buffer, IntPtr offset, IntPtr length);
        void InvalidateBufferSubData(uint buffer, IntPtr offset, int length);
        void InvalidateBufferSubData(uint buffer, IntPtr offset, IntPtr length);
        void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments);
        void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments);
        void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments);
        void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height);
        void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height);
        void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height);
        void InvalidateTexImage(int texture, int level);
        void InvalidateTexImage(uint texture, int level);
        void InvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
        void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
        bool IsBuffer(int buffer);
        bool IsBuffer(uint buffer);
        bool IsEnabled(EnableCap cap);
        bool IsEnabled(IndexedEnableCap target, int index);
        bool IsEnabled(IndexedEnableCap target, uint index);
        bool IsFramebuffer(int framebuffer);
        bool IsFramebuffer(uint framebuffer);
        bool IsList(int list);
        bool IsList(uint list);
        bool IsProgram(int program);
        bool IsProgram(uint program);
        bool IsProgramPipeline(int pipeline);
        bool IsProgramPipeline(uint pipeline);
        bool IsQuery(int id);
        bool IsQuery(uint id);
        bool IsRenderbuffer(int renderbuffer);
        bool IsRenderbuffer(uint renderbuffer);
        bool IsSampler(int sampler);
        bool IsSampler(uint sampler);
        bool IsShader(int shader);
        bool IsShader(uint shader);
        bool IsSync(IntPtr sync);
        bool IsTexture(int texture);
        bool IsTexture(uint texture);
        bool IsTransformFeedback(int id);
        bool IsTransformFeedback(uint id);
        bool IsVertexArray(int array);
        bool IsVertexArray(uint array);
        void Light(LightName name, LightParameter pname, Color4 @params);
        void Light(LightName light, LightParameter pname, float param);
        void Light(LightName light, LightParameter pname, float[] @params);
        void Light(LightName light, LightParameter pname, int param);
        void Light(LightName light, LightParameter pname, int[] @params);
        void Light(LightName name, LightParameter pname, Vector4 @params);
        void LightModel(LightModelParameter pname, float param);
        void LightModel(LightModelParameter pname, float[] @params);
        void LightModel(LightModelParameter pname, int param);
        void LightModel(LightModelParameter pname, int[] @params);
        void LineStipple(int factor, short pattern);
        void LineStipple(int factor, ushort pattern);
        void LineWidth(float width);
        void LinkProgram(int program);
        void LinkProgram(uint program);
        void ListBase(int @base);
        void ListBase(uint @base);
        void LoadIdentity();
        void LoadMatrix(double[] m);
        void LoadMatrix(float[] m);
        void LoadName(int name);
        void LoadName(uint name);
        void LoadTransposeMatrix(double[] m);
        void LoadTransposeMatrix(float[] m);
        void LogicOp(LogicOp opcode);
        void Map1(MapTarget target, double u1, double u2, int stride, int order, double[] points);
        void Map1(MapTarget target, float u1, float u2, int stride, int order, float[] points);
        void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points);
        void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points);
        IntPtr MapBuffer(BufferTarget target, BufferAccess access);
        IntPtr MapBufferRange(BufferTarget target, IntPtr offset, int length, BufferAccessMask access);
        IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access);
        void MapGrid1(int un, double u1, double u2);
        void MapGrid1(int un, float u1, float u2);
        void MapGrid2(int un, double u1, double u2, int vn, double v1, double v2);
        void MapGrid2(int un, float u1, float u2, int vn, float v1, float v2);
        IntPtr MapNamedBuffer(int buffer, BufferAccess access);
        IntPtr MapNamedBuffer(uint buffer, BufferAccess access);
        IntPtr MapNamedBufferRange(int buffer, IntPtr offset, int length, BufferAccessMask access);
        IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, int length, BufferAccessMask access);
        void Material(MaterialFace face, MaterialParameter pname, Color4 @params);
        void Material(MaterialFace face, MaterialParameter pname, float param);
        void Material(MaterialFace face, MaterialParameter pname, float[] @params);
        void Material(MaterialFace face, MaterialParameter pname, int param);
        void Material(MaterialFace face, MaterialParameter pname, int[] @params);
        void Material(MaterialFace face, MaterialParameter pname, Vector4 @params);
        void MatrixMode(MatrixMode mode);
        void MemoryBarrier(MemoryBarrierFlags barriers);
        void MemoryBarrierByRegion(MemoryBarrierRegionFlags barriers);
        void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, bool sink);
        void MinSampleShading(float value);
        void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount);
        void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride);
        void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[,,] indirect, int drawcount, int stride) where T1 : struct;
        void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[,] indirect, int drawcount, int stride) where T1 : struct;
        void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride) where T1 : struct;
        void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount);
        void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, T3[,,] indices, int drawcount) where T3 : struct;
        void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, T3[,] indices, int drawcount) where T3 : struct;
        void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, T3[] indices, int drawcount) where T3 : struct;
        void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount, int[] basevertex);
        void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, T3[,,] indices, int drawcount, int[] basevertex) where T3 : struct;
        void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, T3[,] indices, int drawcount, int[] basevertex) where T3 : struct;
        void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, T3[] indices, int drawcount, int[] basevertex) where T3 : struct;
        void MultiDrawElementsIndirect(All mode, All type, IntPtr indirect, int drawcount, int stride);
        void MultiDrawElementsIndirect<T2>(All mode, All type, T2[,,] indirect, int drawcount, int stride) where T2 : struct;
        void MultiDrawElementsIndirect<T2>(All mode, All type, T2[,] indirect, int drawcount, int stride) where T2 : struct;
        void MultiDrawElementsIndirect<T2>(All mode, All type, T2[] indirect, int drawcount, int stride) where T2 : struct;
        void MultiTexCoord1(TextureUnit target, double s);
        void MultiTexCoord1(TextureUnit target, float s);
        void MultiTexCoord1(TextureUnit target, int s);
        void MultiTexCoord1(TextureUnit target, short s);
        void MultiTexCoord2(TextureUnit target, double s, double t);
        void MultiTexCoord2(TextureUnit target, double[] v);
        void MultiTexCoord2(TextureUnit target, float s, float t);
        void MultiTexCoord2(TextureUnit target, float[] v);
        void MultiTexCoord2(TextureUnit target, int s, int t);
        void MultiTexCoord2(TextureUnit target, int[] v);
        void MultiTexCoord2(TextureUnit target, short s, short t);
        void MultiTexCoord2(TextureUnit target, short[] v);
        void MultiTexCoord3(TextureUnit target, double s, double t, double r);
        void MultiTexCoord3(TextureUnit target, double[] v);
        void MultiTexCoord3(TextureUnit target, float s, float t, float r);
        void MultiTexCoord3(TextureUnit target, float[] v);
        void MultiTexCoord3(TextureUnit target, int s, int t, int r);
        void MultiTexCoord3(TextureUnit target, int[] v);
        void MultiTexCoord3(TextureUnit target, short s, short t, short r);
        void MultiTexCoord3(TextureUnit target, short[] v);
        void MultiTexCoord4(TextureUnit target, double s, double t, double r, double q);
        void MultiTexCoord4(TextureUnit target, double[] v);
        void MultiTexCoord4(TextureUnit target, float s, float t, float r, float q);
        void MultiTexCoord4(TextureUnit target, float[] v);
        void MultiTexCoord4(TextureUnit target, int s, int t, int r, int q);
        void MultiTexCoord4(TextureUnit target, int[] v);
        void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q);
        void MultiTexCoord4(TextureUnit target, short[] v);
        void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int coords);
        void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint coords);
        void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int coords);
        void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint coords);
        void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int coords);
        void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint coords);
        void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int coords);
        void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint coords);
        void MultMatrix(double[] m);
        void MultMatrix(float[] m);
        void MultTransposeMatrix(double[] m);
        void MultTransposeMatrix(float[] m);
        void NamedBufferData(int buffer, int size, IntPtr data, BufferUsageHint usage);
        void NamedBufferData(uint buffer, int size, IntPtr data, BufferUsageHint usage);
        void NamedBufferData<T2>(int buffer, int size, T2[,,] data, BufferUsageHint usage) where T2 : struct;
        void NamedBufferData<T2>(int buffer, int size, T2[,] data, BufferUsageHint usage) where T2 : struct;
        void NamedBufferData<T2>(int buffer, int size, T2[] data, BufferUsageHint usage) where T2 : struct;
        void NamedBufferData<T2>(uint buffer, int size, T2[,,] data, BufferUsageHint usage) where T2 : struct;
        void NamedBufferData<T2>(uint buffer, int size, T2[,] data, BufferUsageHint usage) where T2 : struct;
        void NamedBufferData<T2>(uint buffer, int size, T2[] data, BufferUsageHint usage) where T2 : struct;
        void NamedBufferStorage(int buffer, int size, IntPtr data, BufferStorageFlags flags);
        void NamedBufferStorage(uint buffer, int size, IntPtr data, BufferStorageFlags flags);
        void NamedBufferStorage<T2>(int buffer, int size, T2[,,] data, BufferStorageFlags flags) where T2 : struct;
        void NamedBufferStorage<T2>(int buffer, int size, T2[,] data, BufferStorageFlags flags) where T2 : struct;
        void NamedBufferStorage<T2>(int buffer, int size, T2[] data, BufferStorageFlags flags) where T2 : struct;
        void NamedBufferStorage<T2>(uint buffer, int size, T2[,,] data, BufferStorageFlags flags) where T2 : struct;
        void NamedBufferStorage<T2>(uint buffer, int size, T2[,] data, BufferStorageFlags flags) where T2 : struct;
        void NamedBufferStorage<T2>(uint buffer, int size, T2[] data, BufferStorageFlags flags) where T2 : struct;
        void NamedBufferSubData(int buffer, IntPtr offset, int size, IntPtr data);
        void NamedBufferSubData(uint buffer, IntPtr offset, int size, IntPtr data);
        void NamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,,] data) where T3 : struct;
        void NamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[,] data) where T3 : struct;
        void NamedBufferSubData<T3>(int buffer, IntPtr offset, int size, T3[] data) where T3 : struct;
        void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,,] data) where T3 : struct;
        void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[,] data) where T3 : struct;
        void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, T3[] data) where T3 : struct;
        void NamedFramebufferDrawBuffer(int framebuffer, DrawBufferMode buf);
        void NamedFramebufferDrawBuffer(uint framebuffer, DrawBufferMode buf);
        void NamedFramebufferDrawBuffers(int framebuffer, int n, DrawBuffersEnum[] bufs);
        void NamedFramebufferDrawBuffers(uint framebuffer, int n, DrawBuffersEnum[] bufs);
        void NamedFramebufferParameter(int framebuffer, FramebufferDefaultParameter pname, int param);
        void NamedFramebufferParameter(uint framebuffer, FramebufferDefaultParameter pname, int param);
        void NamedFramebufferReadBuffer(int framebuffer, ReadBufferMode src);
        void NamedFramebufferReadBuffer(uint framebuffer, ReadBufferMode src);
        void NamedFramebufferRenderbuffer(int framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer);
        void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        void NamedFramebufferTexture(int framebuffer, FramebufferAttachment attachment, int texture, int level);
        void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level);
        void NamedFramebufferTextureLayer(int framebuffer, FramebufferAttachment attachment, int texture, int level, int layer);
        void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer);
        void NamedRenderbufferStorage(int renderbuffer, RenderbufferStorage internalformat, int width, int height);
        void NamedRenderbufferStorage(uint renderbuffer, RenderbufferStorage internalformat, int width, int height);
        void NamedRenderbufferStorageMultisample(int renderbuffer, int samples, RenderbufferStorage internalformat, int width, int height);
        void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, RenderbufferStorage internalformat, int width, int height);
        void NewList(int list, ListMode mode);
        void NewList(uint list, ListMode mode);
        void Normal3(byte nx, byte ny, byte nz);
        void Normal3(byte[] v);
        void Normal3(double nx, double ny, double nz);
        void Normal3(double[] v);
        void Normal3(float nx, float ny, float nz);
        void Normal3(float[] v);
        void Normal3(int nx, int ny, int nz);
        void Normal3(int[] v);
        void Normal3(sbyte nx, sbyte ny, sbyte nz);
        void Normal3(sbyte[] v);
        void Normal3(short nx, short ny, short nz);
        void Normal3(short[] v);
        void Normal3(Vector3 normal);
        void Normal3(Vector3d normal);
        void NormalP3(PackedPointerType type, int coords);
        void NormalP3(PackedPointerType type, uint coords);
        void NormalPointer(NormalPointerType type, int stride, int offset);
        void NormalPointer(NormalPointerType type, int stride, IntPtr pointer);
        void NormalPointer<T2>(NormalPointerType type, int stride, T2[,,] pointer) where T2 : struct;
        void NormalPointer<T2>(NormalPointerType type, int stride, T2[,] pointer) where T2 : struct;
        void NormalPointer<T2>(NormalPointerType type, int stride, T2[] pointer) where T2 : struct;
        void ObjectLabel(ObjectLabelIdentifier identifier, int name, int length, string label);
        void ObjectLabel(ObjectLabelIdentifier identifier, uint name, int length, string label);
        void ObjectPtrLabel(IntPtr ptr, int length, string label);
        void ObjectPtrLabel<T0>(T0[,,] ptr, int length, string label) where T0 : struct;
        void ObjectPtrLabel<T0>(T0[,] ptr, int length, string label) where T0 : struct;
        void ObjectPtrLabel<T0>(T0[] ptr, int length, string label) where T0 : struct;
        void Ortho(double left, double right, double bottom, double top, double zNear, double zFar);
        void PassThrough(float token);
        void PatchParameter(PatchParameterFloat pname, float[] values);
        void PatchParameter(PatchParameterInt pname, int value);
        void PauseTransformFeedback();
        void PixelMap(PixelMap map, int mapsize, float[] values);
        void PixelMap(PixelMap map, int mapsize, int[] values);
        void PixelMap(PixelMap map, int mapsize, short[] values);
        void PixelMap(PixelMap map, int mapsize, uint[] values);
        void PixelMap(PixelMap map, int mapsize, ushort[] values);
        void PixelMapx(OesFixedPoint map, int size, int[] values);
        void PixelStore(PixelStoreParameter pname, float param);
        void PixelStore(PixelStoreParameter pname, int param);
        void PixelStorex(OesFixedPoint pname, int param);
        void PixelTransfer(PixelTransferParameter pname, float param);
        void PixelTransfer(PixelTransferParameter pname, int param);
        void PixelZoom(float xfactor, float yfactor);
        void PointParameter(PointParameterName pname, float param);
        void PointParameter(PointParameterName pname, float[] @params);
        void PointParameter(PointParameterName pname, int param);
        void PointParameter(PointParameterName pname, int[] @params);
        void PointParameter(PointSpriteCoordOriginParameter param);
        void PointSize(float size);
        void PolygonMode(MaterialFace face, PolygonMode mode);
        void PolygonOffset(float factor, float units);
        void PolygonStipple(byte[] mask);
        void PopAttrib();
        void PopClientAttrib();
        void PopDebugGroup();
        void PopMatrix();
        void PopName();
        void PrimitiveRestartIndex(int index);
        void PrimitiveRestartIndex(uint index);
        void PrioritizeTextures(int n, int[] textures, float[] priorities);
        void PrioritizeTextures(int n, uint[] textures, float[] priorities);
        void ProgramBinary(int program, BinaryFormat binaryFormat, IntPtr binary, int length);
        void ProgramBinary(uint program, BinaryFormat binaryFormat, IntPtr binary, int length);
        void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, T2[,,] binary, int length) where T2 : struct;
        void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, T2[,] binary, int length) where T2 : struct;
        void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, T2[] binary, int length) where T2 : struct;
        void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, T2[,,] binary, int length) where T2 : struct;
        void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, T2[,] binary, int length) where T2 : struct;
        void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, T2[] binary, int length) where T2 : struct;
        void ProgramParameter(int program, ProgramParameterName pname, int value);
        void ProgramParameter(uint program, ProgramParameterName pname, int value);
        void ProgramUniform1(int program, int location, double v0);
        void ProgramUniform1(int program, int location, float v0);
        void ProgramUniform1(int program, int location, int v0);
        void ProgramUniform1(uint program, int location, double v0);
        void ProgramUniform1(uint program, int location, float v0);
        void ProgramUniform1(uint program, int location, int v0);
        void ProgramUniform1(uint program, int location, uint v0);
        void ProgramUniform2(int program, int location, double v0, double v1);
        void ProgramUniform2(int program, int location, float v0, float v1);
        void ProgramUniform2(int program, int location, int count, double[] value);
        void ProgramUniform2(int program, int location, int count, float[] value);
        void ProgramUniform2(int program, int location, int v0, int v1);
        void ProgramUniform2(int program, int location, int count, int[] value);
        void ProgramUniform2(uint program, int location, double v0, double v1);
        void ProgramUniform2(uint program, int location, float v0, float v1);
        void ProgramUniform2(uint program, int location, int count, double[] value);
        void ProgramUniform2(uint program, int location, int count, float[] value);
        void ProgramUniform2(uint program, int location, int v0, int v1);
        void ProgramUniform2(uint program, int location, int count, int[] value);
        void ProgramUniform2(uint program, int location, int count, uint[] value);
        void ProgramUniform2(uint program, int location, uint v0, uint v1);
        void ProgramUniform3(int program, int location, double v0, double v1, double v2);
        void ProgramUniform3(int program, int location, float v0, float v1, float v2);
        void ProgramUniform3(int program, int location, int count, double[] value);
        void ProgramUniform3(int program, int location, int count, float[] value);
        void ProgramUniform3(int program, int location, int v0, int v1, int v2);
        void ProgramUniform3(int program, int location, int count, int[] value);
        void ProgramUniform3(uint program, int location, double v0, double v1, double v2);
        void ProgramUniform3(uint program, int location, float v0, float v1, float v2);
        void ProgramUniform3(uint program, int location, int count, double[] value);
        void ProgramUniform3(uint program, int location, int count, float[] value);
        void ProgramUniform3(uint program, int location, int v0, int v1, int v2);
        void ProgramUniform3(uint program, int location, int count, int[] value);
        void ProgramUniform3(uint program, int location, int count, uint[] value);
        void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2);
        void ProgramUniform4(int program, int location, double v0, double v1, double v2, double v3);
        void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3);
        void ProgramUniform4(int program, int location, int count, double[] value);
        void ProgramUniform4(int program, int location, int count, float[] value);
        void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3);
        void ProgramUniform4(int program, int location, int count, int[] value);
        void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3);
        void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3);
        void ProgramUniform4(uint program, int location, int count, double[] value);
        void ProgramUniform4(uint program, int location, int count, float[] value);
        void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3);
        void ProgramUniform4(uint program, int location, int count, int[] value);
        void ProgramUniform4(uint program, int location, int count, uint[] value);
        void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float[] value);
        void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double[] value);
        void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float[] value);
        void ProvokingVertex(ProvokingVertexMode mode);
        void PushAttrib(AttribMask mask);
        void PushClientAttrib(ClientAttribMask mask);
        void PushDebugGroup(DebugSourceExternal source, int id, int length, string message);
        void PushDebugGroup(DebugSourceExternal source, uint id, int length, string message);
        void PushMatrix();
        void PushName(int name);
        void PushName(uint name);
        void QueryCounter(int id, QueryCounterTarget target);
        void QueryCounter(uint id, QueryCounterTarget target);
        void RasterPos2(double x, double y);
        void RasterPos2(double[] v);
        void RasterPos2(float x, float y);
        void RasterPos2(float[] v);
        void RasterPos2(int x, int y);
        void RasterPos2(int[] v);
        void RasterPos2(short x, short y);
        void RasterPos2(short[] v);
        void RasterPos2(Vector2 pos);
        void RasterPos2(Vector2d pos);
        void RasterPos3(double x, double y, double z);
        void RasterPos3(double[] v);
        void RasterPos3(float x, float y, float z);
        void RasterPos3(float[] v);
        void RasterPos3(int x, int y, int z);
        void RasterPos3(int[] v);
        void RasterPos3(short x, short y, short z);
        void RasterPos3(short[] v);
        void RasterPos3(Vector3 pos);
        void RasterPos3(Vector3d pos);
        void RasterPos4(double x, double y, double z, double w);
        void RasterPos4(double[] v);
        void RasterPos4(float x, float y, float z, float w);
        void RasterPos4(float[] v);
        void RasterPos4(int x, int y, int z, int w);
        void RasterPos4(int[] v);
        void RasterPos4(short x, short y, short z, short w);
        void RasterPos4(short[] v);
        void RasterPos4(Vector4 pos);
        void RasterPos4(Vector4d pos);
        void ReadBuffer(ReadBufferMode src);
        void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data);
        void ReadnPixels<T7>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T7[,,] data) where T7 : struct;
        void ReadnPixels<T7>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T7[,] data) where T7 : struct;
        void ReadnPixels<T7>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T7[] data) where T7 : struct;
        void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, T6[,,] pixels) where T6 : struct;
        void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, T6[,] pixels) where T6 : struct;
        void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, T6[] pixels) where T6 : struct;
        void Rect(double x1, double y1, double x2, double y2);
        void Rect(double[] v1, double[] v2);
        void Rect(float x1, float y1, float x2, float y2);
        void Rect(float[] v1, float[] v2);
        void Rect(int x1, int y1, int x2, int y2);
        void Rect(int[] v1, int[] v2);
        void Rect(Rectangle rect);
        void Rect(RectangleF rect);
        void Rect(short[] v1, short[] v2);
        void Rects(short x1, short y1, short x2, short y2);
        void ReleaseShaderCompiler();
        void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height);
        void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height);
        int RenderMode(RenderingMode mode);
        void ResetHistogram(HistogramTarget target);
        void ResetMinmax(MinmaxTarget target);
        void ResumeTransformFeedback();
        void Rotate(double angle, double x, double y, double z);
        void Rotate(double angle, Vector3d axis);
        void Rotate(float angle, float x, float y, float z);
        void Rotate(float angle, Vector3 axis);
        void SampleCoverage(float value, bool invert);
        void SampleMask(int maskNumber, int mask);
        void SampleMask(uint maskNumber, uint mask);
        void SamplerParameter(int sampler, SamplerParameterName pname, float param);
        void SamplerParameter(int sampler, SamplerParameterName pname, float[] param);
        void SamplerParameter(int sampler, SamplerParameterName pname, int param);
        void SamplerParameter(int sampler, SamplerParameterName pname, int[] param);
        void SamplerParameter(uint sampler, SamplerParameterName pname, float param);
        void SamplerParameter(uint sampler, SamplerParameterName pname, float[] param);
        void SamplerParameter(uint sampler, SamplerParameterName pname, int param);
        void SamplerParameter(uint sampler, SamplerParameterName pname, int[] param);
        void SamplerParameterI(int sampler, SamplerParameterName pname, int[] param);
        void SamplerParameterI(uint sampler, SamplerParameterName pname, int[] param);
        void SamplerParameterI(uint sampler, SamplerParameterName pname, uint[] param);
        void Scale(double x, double y, double z);
        void Scale(float x, float y, float z);
        void Scale(Vector3 scale);
        void Scale(Vector3d scale);
        void Scissor(int x, int y, int width, int height);
        void ScissorArray(int first, int count, int[] v);
        void ScissorArray(uint first, int count, int[] v);
        void ScissorIndexed(int index, int left, int bottom, int width, int height);
        void ScissorIndexed(int index, int[] v);
        void ScissorIndexed(uint index, int left, int bottom, int width, int height);
        void ScissorIndexed(uint index, int[] v);
        void SecondaryColor3(byte red, byte green, byte blue);
        void SecondaryColor3(byte[] v);
        void SecondaryColor3(double red, double green, double blue);
        void SecondaryColor3(double[] v);
        void SecondaryColor3(float red, float green, float blue);
        void SecondaryColor3(float[] v);
        void SecondaryColor3(int red, int green, int blue);
        void SecondaryColor3(int[] v);
        void SecondaryColor3(sbyte red, sbyte green, sbyte blue);
        void SecondaryColor3(sbyte[] v);
        void SecondaryColor3(short red, short green, short blue);
        void SecondaryColor3(short[] v);
        void SecondaryColor3(uint red, uint green, uint blue);
        void SecondaryColor3(uint[] v);
        void SecondaryColor3(ushort red, ushort green, ushort blue);
        void SecondaryColor3(ushort[] v);
        void SecondaryColorP3(PackedPointerType type, int color);
        void SecondaryColorP3(PackedPointerType type, uint color);
        void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer);
        void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,,] pointer) where T3 : struct;
        void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, T3[,] pointer) where T3 : struct;
        void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, T3[] pointer) where T3 : struct;
        void SelectBuffer(int size, int[] buffer);
        void SelectBuffer(int size, uint[] buffer);
        void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column);
        void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,,] row, T7[,,] column)
            where T6 : struct
            where T7 : struct;
        void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[,] row, T7[,] column)
            where T6 : struct
            where T7 : struct;
        void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T6[] row, T7[] column)
            where T6 : struct
            where T7 : struct;
        void ShadeModel(ShadingModel mode);
        void ShaderBinary(int count, int[] shaders, BinaryFormat binaryformat, IntPtr binary, int length);
        void ShaderBinary(int count, uint[] shaders, BinaryFormat binaryformat, IntPtr binary, int length);
        void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, T3[,,] binary, int length) where T3 : struct;
        void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, T3[,] binary, int length) where T3 : struct;
        void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, T3[] binary, int length) where T3 : struct;
        void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, T3[,,] binary, int length) where T3 : struct;
        void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, T3[,] binary, int length) where T3 : struct;
        void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, T3[] binary, int length) where T3 : struct;
        void ShaderSource(int shader, int count, string[] @string, int[] length);
        void ShaderSource(int shader, string @string);
        void ShaderSource(uint shader, int count, string[] @string, int[] length);
        void ShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding);
        void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);
        void StencilFunc(StencilFunction func, int @ref, int mask);
        void StencilFunc(StencilFunction func, int @ref, uint mask);
        void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, int mask);
        void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, uint mask);
        void StencilMask(int mask);
        void StencilMask(uint mask);
        void StencilMaskSeparate(StencilFace face, int mask);
        void StencilMaskSeparate(StencilFace face, uint mask);
        void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
        void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer);
        void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer);
        void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer, IntPtr offset, int size);
        void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer, IntPtr offset, IntPtr size);
        void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size);
        void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size);
        void TexCoord1(double s);
        void TexCoord1(float s);
        void TexCoord1(int s);
        void TexCoord1(short s);
        void TexCoord2(double s, double t);
        void TexCoord2(double[] v);
        void TexCoord2(float s, float t);
        void TexCoord2(float[] v);
        void TexCoord2(int s, int t);
        void TexCoord2(int[] v);
        void TexCoord2(short s, short t);
        void TexCoord2(short[] v);
        void TexCoord2(Vector2 v);
        void TexCoord2(Vector2d v);
        void TexCoord3(double s, double t, double r);
        void TexCoord3(double[] v);
        void TexCoord3(float s, float t, float r);
        void TexCoord3(float[] v);
        void TexCoord3(int s, int t, int r);
        void TexCoord3(int[] v);
        void TexCoord3(short s, short t, short r);
        void TexCoord3(short[] v);
        void TexCoord3(Vector3 v);
        void TexCoord3(Vector3d v);
        void TexCoord4(double s, double t, double r, double q);
        void TexCoord4(double[] v);
        void TexCoord4(float s, float t, float r, float q);
        void TexCoord4(float[] v);
        void TexCoord4(int s, int t, int r, int q);
        void TexCoord4(int[] v);
        void TexCoord4(short s, short t, short r, short q);
        void TexCoord4(short[] v);
        void TexCoord4(Vector4 v);
        void TexCoord4(Vector4d v);
        void TexCoordP1(PackedPointerType type, int coords);
        void TexCoordP1(PackedPointerType type, uint coords);
        void TexCoordP2(PackedPointerType type, int coords);
        void TexCoordP2(PackedPointerType type, uint coords);
        void TexCoordP3(PackedPointerType type, int coords);
        void TexCoordP3(PackedPointerType type, uint coords);
        void TexCoordP4(PackedPointerType type, int coords);
        void TexCoordP4(PackedPointerType type, uint coords);
        void TexCoordPointer(int size, TexCoordPointerType type, int stride, int offset);
        void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer);
        void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, T3[,,] pointer) where T3 : struct;
        void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, T3[,] pointer) where T3 : struct;
        void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, T3[] pointer) where T3 : struct;
        void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color color);
        void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color4 color);
        void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float param);
        void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float[] @params);
        void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int param);
        void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int[] @params);
        void TexGen(TextureCoordName coord, TextureGenParameter pname, double[] @params);
        void TexGen(TextureCoordName coord, TextureGenParameter pname, float param);
        void TexGen(TextureCoordName coord, TextureGenParameter pname, float[] @params);
        void TexGen(TextureCoordName coord, TextureGenParameter pname, int param);
        void TexGen(TextureCoordName coord, TextureGenParameter pname, int[] @params);
        void TexGend(TextureCoordName coord, TextureGenParameter pname, double param);
        void TexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T7[,,] pixels) where T7 : struct;
        void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T7[,] pixels) where T7 : struct;
        void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T7[] pixels) where T7 : struct;
        void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T8[,,] pixels) where T8 : struct;
        void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T8[,] pixels) where T8 : struct;
        void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T8[] pixels) where T8 : struct;
        void TexImage2DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T9[,,] pixels) where T9 : struct;
        void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T9[,] pixels) where T9 : struct;
        void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T9[] pixels) where T9 : struct;
        void TexImage3DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        void TexParameter(TextureTarget target, TextureParameterName pname, float param);
        void TexParameter(TextureTarget target, TextureParameterName pname, float[] @params);
        void TexParameter(TextureTarget target, TextureParameterName pname, int param);
        void TexParameter(TextureTarget target, TextureParameterName pname, int[] @params);
        void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params);
        void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params);
        void TexStorage1D(TextureTarget1d target, int levels, SizedInternalFormat internalformat, int width);
        void TexStorage2D(TextureTarget2d target, int levels, SizedInternalFormat internalformat, int width, int height);
        void TexStorage2DMultisample(TextureTargetMultisample2d target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        void TexStorage3D(TextureTarget3d target, int levels, SizedInternalFormat internalformat, int width, int height, int depth);
        void TexStorage3DMultisample(TextureTargetMultisample3d target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);
        void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,,] pixels) where T6 : struct;
        void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,] pixels) where T6 : struct;
        void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[] pixels) where T6 : struct;
        void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,,] pixels) where T8 : struct;
        void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,] pixels) where T8 : struct;
        void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[] pixels) where T8 : struct;
        void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);
        void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] pixels) where T10 : struct;
        void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] pixels) where T10 : struct;
        void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] pixels) where T10 : struct;
        void TextureBarrier();
        void TextureBuffer(int texture, SizedInternalFormat internalformat, int buffer);
        void TextureBuffer(uint texture, SizedInternalFormat internalformat, uint buffer);
        void TextureBufferRange(int texture, SizedInternalFormat internalformat, int buffer, IntPtr offset, int size);
        void TextureBufferRange(uint texture, SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size);
        void TextureParameter(int texture, TextureParameterName pname, float param);
        void TextureParameter(int texture, TextureParameterName pname, float[] param);
        void TextureParameter(int texture, TextureParameterName pname, int param);
        void TextureParameter(int texture, TextureParameterName pname, int[] param);
        void TextureParameter(uint texture, TextureParameterName pname, float param);
        void TextureParameter(uint texture, TextureParameterName pname, float[] param);
        void TextureParameter(uint texture, TextureParameterName pname, int param);
        void TextureParameter(uint texture, TextureParameterName pname, int[] param);
        void TextureParameterI(int texture, All pname, int[] @params);
        void TextureParameterI(uint texture, All pname, int[] @params);
        void TextureParameterI(uint texture, All pname, uint[] @params);
        void TextureStorage1D(int texture, int levels, SizedInternalFormat internalformat, int width);
        void TextureStorage1D(uint texture, int levels, SizedInternalFormat internalformat, int width);
        void TextureStorage2D(int texture, int levels, SizedInternalFormat internalformat, int width, int height);
        void TextureStorage2D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height);
        void TextureStorage2DMultisample(int texture, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        void TextureStorage2DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        void TextureStorage3D(int texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth);
        void TextureStorage3D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth);
        void TextureStorage3DMultisample(int texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        void TextureStorage3DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);
        void TextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);
        void TextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,,] pixels) where T6 : struct;
        void TextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,] pixels) where T6 : struct;
        void TextureSubImage1D<T6>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[] pixels) where T6 : struct;
        void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,,] pixels) where T6 : struct;
        void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[,] pixels) where T6 : struct;
        void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T6[] pixels) where T6 : struct;
        void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void TextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,,] pixels) where T8 : struct;
        void TextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,] pixels) where T8 : struct;
        void TextureSubImage2D<T8>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[] pixels) where T8 : struct;
        void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,,] pixels) where T8 : struct;
        void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[,] pixels) where T8 : struct;
        void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T8[] pixels) where T8 : struct;
        void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);
        void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);
        void TextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] pixels) where T10 : struct;
        void TextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] pixels) where T10 : struct;
        void TextureSubImage3D<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] pixels) where T10 : struct;
        void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,,] pixels) where T10 : struct;
        void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[,] pixels) where T10 : struct;
        void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T10[] pixels) where T10 : struct;
        void TextureView(int texture, TextureTarget target, int origtexture, PixelInternalFormat internalformat, int minlevel, int numlevels, int minlayer, int numlayers);
        void TextureView(uint texture, TextureTarget target, uint origtexture, PixelInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        void TransformFeedbackBufferBase(int xfb, int index, int buffer);
        void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer);
        void TransformFeedbackBufferRange(int xfb, int index, int buffer, IntPtr offset, int size);
        void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, IntPtr offset, int size);
        void TransformFeedbackVaryings(int program, int count, string[] varyings, TransformFeedbackMode bufferMode);
        void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackMode bufferMode);
        void Translate(double x, double y, double z);
        void Translate(float x, float y, float z);
        void Translate(Vector3 trans);
        void Translate(Vector3d trans);
        void Uniform1(int location, double x);
        void Uniform1(int location, float v0);
        void Uniform1(int location, int v0);
        void Uniform1(int location, int count, double[] value);
        void Uniform1(int location, int count, float[] value);
        void Uniform1(int location, int count, int[] value);
        void Uniform1(int location, int count, uint[] value);
        void Uniform1(int location, uint v0);
        void Uniform2(int location, double x, double y);
        void Uniform2(int location, float v0, float v1);
        void Uniform2(int location, int count, double[] value);
        void Uniform2(int location, int count, float[] value);
        void Uniform2(int location, int v0, int v1);
        void Uniform2(int location, int count, int[] value);
        void Uniform2(int location, int count, uint[] value);
        void Uniform2(int location, uint v0, uint v1);
        void Uniform2(int location, Vector2 vector);
        void Uniform3(int location, double x, double y, double z);
        void Uniform3(int location, float v0, float v1, float v2);
        void Uniform3(int location, int count, double[] value);
        void Uniform3(int location, int count, float[] value);
        void Uniform3(int location, int v0, int v1, int v2);
        void Uniform3(int location, int count, int[] value);
        void Uniform3(int location, int count, uint[] value);
        void Uniform3(int location, uint v0, uint v1, uint v2);
        void Uniform3(int location, Vector3 vector);
        void Uniform4(int location, Color4 color);
        void Uniform4(int location, double x, double y, double z, double w);
        void Uniform4(int location, float v0, float v1, float v2, float v3);
        void Uniform4(int location, int count, double[] value);
        void Uniform4(int location, int count, float[] value);
        void Uniform4(int location, int v0, int v1, int v2, int v3);
        void Uniform4(int location, int count, int[] value);
        void Uniform4(int location, int count, uint[] value);
        void Uniform4(int location, Quaternion quaternion);
        void Uniform4(int location, uint v0, uint v1, uint v2, uint v3);
        void Uniform4(int location, Vector4 vector);
        void UniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding);
        void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        void UniformMatrix2(int location, int count, bool transpose, double[] value);
        void UniformMatrix2(int location, int count, bool transpose, float[] value);
        void UniformMatrix2x3(int location, int count, bool transpose, double[] value);
        void UniformMatrix2x3(int location, int count, bool transpose, float[] value);
        void UniformMatrix2x4(int location, int count, bool transpose, double[] value);
        void UniformMatrix2x4(int location, int count, bool transpose, float[] value);
        void UniformMatrix3(int location, int count, bool transpose, double[] value);
        void UniformMatrix3(int location, int count, bool transpose, float[] value);
        void UniformMatrix3x2(int location, int count, bool transpose, double[] value);
        void UniformMatrix3x2(int location, int count, bool transpose, float[] value);
        void UniformMatrix3x4(int location, int count, bool transpose, double[] value);
        void UniformMatrix3x4(int location, int count, bool transpose, float[] value);
        void UniformMatrix4(int location, int count, bool transpose, double[] value);
        void UniformMatrix4(int location, int count, bool transpose, float[] value);
        void UniformMatrix4x2(int location, int count, bool transpose, double[] value);
        void UniformMatrix4x2(int location, int count, bool transpose, float[] value);
        void UniformMatrix4x3(int location, int count, bool transpose, double[] value);
        void UniformMatrix4x3(int location, int count, bool transpose, float[] value);
        void UniformSubroutines(ShaderType shadertype, int count, int[] indices);
        void UniformSubroutines(ShaderType shadertype, int count, uint[] indices);
        bool UnmapBuffer(BufferTarget target);
        bool UnmapNamedBuffer(int buffer);
        bool UnmapNamedBuffer(uint buffer);
        void UseProgram(int program);
        void UseProgram(uint program);
        void UseProgramStages(int pipeline, ProgramStageMask stages, int program);
        void UseProgramStages(uint pipeline, ProgramStageMask stages, uint program);
        void ValidateProgram(int program);
        void ValidateProgram(uint program);
        void ValidateProgramPipeline(int pipeline);
        void ValidateProgramPipeline(uint pipeline);
        void Vertex2(double x, double y);
        void Vertex2(double[] v);
        void Vertex2(float x, float y);
        void Vertex2(float[] v);
        void Vertex2(int x, int y);
        void Vertex2(int[] v);
        void Vertex2(short x, short y);
        void Vertex2(short[] v);
        void Vertex2(Vector2 v);
        void Vertex2(Vector2d v);
        void Vertex3(double x, double y, double z);
        void Vertex3(double[] v);
        void Vertex3(float x, float y, float z);
        void Vertex3(float[] v);
        void Vertex3(int x, int y, int z);
        void Vertex3(int[] v);
        void Vertex3(short x, short y, short z);
        void Vertex3(short[] v);
        void Vertex3(Vector3 v);
        void Vertex3(Vector3d v);
        void Vertex4(double x, double y, double z, double w);
        void Vertex4(double[] v);
        void Vertex4(float x, float y, float z, float w);
        void Vertex4(float[] v);
        void Vertex4(int x, int y, int z, int w);
        void Vertex4(int[] v);
        void Vertex4(short x, short y, short z, short w);
        void Vertex4(short[] v);
        void Vertex4(Vector4 v);
        void Vertex4(Vector4d v);
        void VertexArrayAttribBinding(int vaobj, int attribindex, int bindingindex);
        void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex);
        void VertexArrayAttribFormat(int vaobj, int attribindex, int size, VertexAttribType type, bool normalized, int relativeoffset);
        void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset);
        void VertexArrayAttribIFormat(int vaobj, int attribindex, int size, VertexAttribType type, int relativeoffset);
        void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, uint relativeoffset);
        void VertexArrayAttribLFormat(int vaobj, int attribindex, int size, All type, int relativeoffset);
        void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, All type, uint relativeoffset);
        void VertexArrayBindingDivisor(int vaobj, int bindingindex, int divisor);
        void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor);
        void VertexArrayElementBuffer(int vaobj, int buffer);
        void VertexArrayElementBuffer(uint vaobj, uint buffer);
        void VertexArrayVertexBuffer(int vaobj, int bindingindex, int buffer, IntPtr offset, int stride);
        void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride);
        void VertexArrayVertexBuffers(int vaobj, int first, int count, int[] buffers, IntPtr[] offsets, int[] strides);
        void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, IntPtr[] offsets, int[] strides);
        void VertexAttrib1(int index, double x);
        void VertexAttrib1(int index, float x);
        void VertexAttrib1(int index, short x);
        void VertexAttrib1(uint index, double x);
        void VertexAttrib1(uint index, float x);
        void VertexAttrib1(uint index, short x);
        void VertexAttrib2(int index, double x, double y);
        void VertexAttrib2(int index, double[] v);
        void VertexAttrib2(int index, float x, float y);
        void VertexAttrib2(int index, float[] v);
        void VertexAttrib2(int index, short x, short y);
        void VertexAttrib2(int index, short[] v);
        void VertexAttrib2(int index, Vector2 v);
        void VertexAttrib2(int index, Vector2d v);
        void VertexAttrib2(uint index, double x, double y);
        void VertexAttrib2(uint index, double[] v);
        void VertexAttrib2(uint index, float x, float y);
        void VertexAttrib2(uint index, float[] v);
        void VertexAttrib2(uint index, short x, short y);
        void VertexAttrib2(uint index, short[] v);
        void VertexAttrib3(int index, double x, double y, double z);
        void VertexAttrib3(int index, double[] v);
        void VertexAttrib3(int index, float x, float y, float z);
        void VertexAttrib3(int index, float[] v);
        void VertexAttrib3(int index, short x, short y, short z);
        void VertexAttrib3(int index, short[] v);
        void VertexAttrib3(int index, Vector3 v);
        void VertexAttrib3(int index, Vector3d v);
        void VertexAttrib3(uint index, double x, double y, double z);
        void VertexAttrib3(uint index, double[] v);
        void VertexAttrib3(uint index, float x, float y, float z);
        void VertexAttrib3(uint index, float[] v);
        void VertexAttrib3(uint index, short x, short y, short z);
        void VertexAttrib3(uint index, short[] v);
        void VertexAttrib4(int index, byte[] v);
        void VertexAttrib4(int index, double x, double y, double z, double w);
        void VertexAttrib4(int index, double[] v);
        void VertexAttrib4(int index, float x, float y, float z, float w);
        void VertexAttrib4(int index, float[] v);
        void VertexAttrib4(int index, int[] v);
        void VertexAttrib4(int index, short x, short y, short z, short w);
        void VertexAttrib4(int index, short[] v);
        void VertexAttrib4(int index, Vector4 v);
        void VertexAttrib4(int index, Vector4d v);
        void VertexAttrib4(uint index, byte[] v);
        void VertexAttrib4(uint index, double x, double y, double z, double w);
        void VertexAttrib4(uint index, double[] v);
        void VertexAttrib4(uint index, float x, float y, float z, float w);
        void VertexAttrib4(uint index, float[] v);
        void VertexAttrib4(uint index, int[] v);
        void VertexAttrib4(uint index, sbyte[] v);
        void VertexAttrib4(uint index, short x, short y, short z, short w);
        void VertexAttrib4(uint index, short[] v);
        void VertexAttrib4(uint index, uint[] v);
        void VertexAttrib4(uint index, ushort[] v);
        void VertexAttrib4N(int index, byte x, byte y, byte z, byte w);
        void VertexAttrib4N(int index, byte[] v);
        void VertexAttrib4N(int index, int[] v);
        void VertexAttrib4N(int index, short[] v);
        void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w);
        void VertexAttrib4N(uint index, byte[] v);
        void VertexAttrib4N(uint index, int[] v);
        void VertexAttrib4N(uint index, sbyte[] v);
        void VertexAttrib4N(uint index, short[] v);
        void VertexAttrib4N(uint index, uint[] v);
        void VertexAttrib4N(uint index, ushort[] v);
        void VertexAttribBinding(int attribindex, int bindingindex);
        void VertexAttribBinding(uint attribindex, uint bindingindex);
        void VertexAttribDivisor(int index, int divisor);
        void VertexAttribDivisor(uint index, uint divisor);
        void VertexAttribFormat(int attribindex, int size, VertexAttribType type, bool normalized, int relativeoffset);
        void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset);
        void VertexAttribI1(int index, int x);
        void VertexAttribI1(uint index, int x);
        void VertexAttribI1(uint index, uint x);
        void VertexAttribI2(int index, int x, int y);
        void VertexAttribI2(int index, int[] v);
        void VertexAttribI2(uint index, int x, int y);
        void VertexAttribI2(uint index, int[] v);
        void VertexAttribI2(uint index, uint x, uint y);
        void VertexAttribI2(uint index, uint[] v);
        void VertexAttribI3(int index, int x, int y, int z);
        void VertexAttribI3(int index, int[] v);
        void VertexAttribI3(uint index, int x, int y, int z);
        void VertexAttribI3(uint index, int[] v);
        void VertexAttribI3(uint index, uint x, uint y, uint z);
        void VertexAttribI3(uint index, uint[] v);
        void VertexAttribI4(int index, byte[] v);
        void VertexAttribI4(int index, int x, int y, int z, int w);
        void VertexAttribI4(int index, int[] v);
        void VertexAttribI4(int index, short[] v);
        void VertexAttribI4(uint index, byte[] v);
        void VertexAttribI4(uint index, int x, int y, int z, int w);
        void VertexAttribI4(uint index, int[] v);
        void VertexAttribI4(uint index, sbyte[] v);
        void VertexAttribI4(uint index, short[] v);
        void VertexAttribI4(uint index, uint x, uint y, uint z, uint w);
        void VertexAttribI4(uint index, uint[] v);
        void VertexAttribI4(uint index, ushort[] v);
        void VertexAttribIFormat(int attribindex, int size, VertexAttribIntegerType type, int relativeoffset);
        void VertexAttribIFormat(uint attribindex, int size, VertexAttribIntegerType type, uint relativeoffset);
        void VertexAttribIPointer(int index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer);
        void VertexAttribIPointer(uint index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer);
        void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, T4[,,] pointer) where T4 : struct;
        void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, T4[,] pointer) where T4 : struct;
        void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, T4[] pointer) where T4 : struct;
        void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, T4[,,] pointer) where T4 : struct;
        void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, T4[,] pointer) where T4 : struct;
        void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, T4[] pointer) where T4 : struct;
        void VertexAttribL1(int index, double x);
        void VertexAttribL1(uint index, double x);
        void VertexAttribL2(int index, double x, double y);
        void VertexAttribL2(int index, double[] v);
        void VertexAttribL2(uint index, double x, double y);
        void VertexAttribL2(uint index, double[] v);
        void VertexAttribL3(int index, double x, double y, double z);
        void VertexAttribL3(int index, double[] v);
        void VertexAttribL3(uint index, double x, double y, double z);
        void VertexAttribL3(uint index, double[] v);
        void VertexAttribL4(int index, double x, double y, double z, double w);
        void VertexAttribL4(int index, double[] v);
        void VertexAttribL4(uint index, double x, double y, double z, double w);
        void VertexAttribL4(uint index, double[] v);
        void VertexAttribLFormat(int attribindex, int size, VertexAttribDoubleType type, int relativeoffset);
        void VertexAttribLFormat(uint attribindex, int size, VertexAttribDoubleType type, uint relativeoffset);
        void VertexAttribLPointer(int index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer);
        void VertexAttribLPointer(uint index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer);
        void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, T4[,,] pointer) where T4 : struct;
        void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, T4[,] pointer) where T4 : struct;
        void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, T4[] pointer) where T4 : struct;
        void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, T4[,,] pointer) where T4 : struct;
        void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, T4[,] pointer) where T4 : struct;
        void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, T4[] pointer) where T4 : struct;
        void VertexAttribP1(int index, PackedPointerType type, bool normalized, int value);
        void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint value);
        void VertexAttribP2(int index, PackedPointerType type, bool normalized, int value);
        void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint value);
        void VertexAttribP3(int index, PackedPointerType type, bool normalized, int value);
        void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint value);
        void VertexAttribP4(int index, PackedPointerType type, bool normalized, int value);
        void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint value);
        void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset);
        void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer);
        void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer);
        void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,,] pointer) where T5 : struct;
        void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,] pointer) where T5 : struct;
        void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[] pointer) where T5 : struct;
        void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,,] pointer) where T5 : struct;
        void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[,] pointer) where T5 : struct;
        void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T5[] pointer) where T5 : struct;
        void VertexBindingDivisor(int bindingindex, int divisor);
        void VertexBindingDivisor(uint bindingindex, uint divisor);
        void VertexP2(PackedPointerType type, int value);
        void VertexP2(PackedPointerType type, uint value);
        void VertexP3(PackedPointerType type, int value);
        void VertexP3(PackedPointerType type, uint value);
        void VertexP4(PackedPointerType type, int value);
        void VertexP4(PackedPointerType type, uint value);
        void VertexPointer(int size, VertexPointerType type, int stride, int offset);
        void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer);
        void VertexPointer<T3>(int size, VertexPointerType type, int stride, T3[,,] pointer) where T3 : struct;
        void VertexPointer<T3>(int size, VertexPointerType type, int stride, T3[,] pointer) where T3 : struct;
        void VertexPointer<T3>(int size, VertexPointerType type, int stride, T3[] pointer) where T3 : struct;
        void Viewport(int x, int y, int width, int height);
        void Viewport(Point location, Size size);
        void Viewport(Rectangle rectangle);
        void Viewport(Size size);
        void ViewportArray(int first, int count, float[] v);
        void ViewportArray(uint first, int count, float[] v);
        void ViewportIndexed(int index, float x, float y, float w, float h);
        void ViewportIndexed(int index, float[] v);
        void ViewportIndexed(uint index, float x, float y, float w, float h);
        void ViewportIndexed(uint index, float[] v);
        WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, long timeout);
        WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, ulong timeout);
        void WindowPos2(double x, double y);
        void WindowPos2(double[] v);
        void WindowPos2(float x, float y);
        void WindowPos2(float[] v);
        void WindowPos2(int x, int y);
        void WindowPos2(int[] v);
        void WindowPos2(short x, short y);
        void WindowPos2(short[] v);
        void WindowPos3(double x, double y, double z);
        void WindowPos3(double[] v);
        void WindowPos3(float x, float y, float z);
        void WindowPos3(float[] v);
        void WindowPos3(int x, int y, int z);
        void WindowPos3(int[] v);
        void WindowPos3(short x, short y, short z);
        void WindowPos3(short[] v);
    }
}